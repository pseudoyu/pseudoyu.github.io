<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Pseudoyu</title>
    <link>https://www.pseudoyu.com/en/posts/</link>
    <description>Recent content in Posts on Pseudoyu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 12 Jul 2021 00:12:17 +0800</lastBuildDate><atom:link href="https://www.pseudoyu.com/en/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode刷题常用数据结构（Go篇）</title>
      <link>https://www.pseudoyu.com/en/2021/07/12/algorithm_data_structure_go/</link>
      <pubDate>Mon, 12 Jul 2021 00:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/07/12/algorithm_data_structure_go/</guid>
      <description>前言 最近开始刷LeetCode算法题，针对工作需求的算法刷题其实主要是锻炼解决问题的思路和代码撰写能力，而不是像算法竞赛那样用复杂的数据结构</description>
    </item>
    
    <item>
      <title>Uright - 区块链音乐版权管理ÐApp</title>
      <link>https://www.pseudoyu.com/en/2021/05/10/uright_case_study/</link>
      <pubDate>Mon, 10 May 2021 19:30:25 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/05/10/uright_case_study/</guid>
      <description>Uright - 区块链音乐版权管理ÐApp 简介 基于Angular+Solidity+Web3.js，应用IPFS、ENS、Oracles等技术，通过Tr</description>
    </item>
    
    <item>
      <title>BlockchainGuide - 区块链核心知识库</title>
      <link>https://www.pseudoyu.com/en/2021/04/03/blockchain_guide/</link>
      <pubDate>Sat, 03 Apr 2021 12:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/04/03/blockchain_guide/</guid>
      <description>BlockchainGuide 一个不断更新的区块链核心知识库 源项目地址 | 在线阅读 目录 BlockchainGuide 基础知识 区块链基础 比特币 以太坊 Hyperledger Fabric 热门技术 IPFS 开发实战 编程语言 开发工具 个人项目 其他 关</description>
    </item>
    
    <item>
      <title>MySQL基础知识与相关操作</title>
      <link>https://www.pseudoyu.com/en/2021/03/29/database_mysql_basic/</link>
      <pubDate>Mon, 29 Mar 2021 00:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/03/29/database_mysql_basic/</guid>
      <description>前言 数据库不论在基础知识学习还是真实企业业务场景中都很常用，也有很多调侃说日常工作总是离不开CRUD，熟练主流关系型与数据库的使用是一个开发</description>
    </item>
    
    <item>
      <title>IPFS本地节点搭建（命令行）</title>
      <link>https://www.pseudoyu.com/en/2021/03/27/blockchain_ipfs_practice/</link>
      <pubDate>Sat, 27 Mar 2021 18:46:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/03/27/blockchain_ipfs_practice/</guid>
      <description>前言 上一篇《IPFS分布式文件存储原理》对于IPFS系统的设计理念、功能、工作原理及IPNS做了详细的介绍，那么，如何在本地搭建一个IPFS</description>
    </item>
    
    <item>
      <title>IPFS分布式存储协议分析与思考</title>
      <link>https://www.pseudoyu.com/en/2021/03/25/blockchain_ipfs_structure/</link>
      <pubDate>Thu, 25 Mar 2021 16:30:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/03/25/blockchain_ipfs_structure/</guid>
      <description>前言 最近在做学校的Case Study项目，是一个基于Ethereum平台的音乐版权管理项目，其中对于音乐作品、版权证明文件等上传用到了IPF</description>
    </item>
    
    <item>
      <title>Hyperledger Fabric网络与安全体系浅析</title>
      <link>https://www.pseudoyu.com/en/2021/03/23/blockchain_hyperledger_fabric_network/</link>
      <pubDate>Tue, 23 Mar 2021 12:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/03/23/blockchain_hyperledger_fabric_network/</guid>
      <description>前言 上一篇文章《Hyperledger Fabric架构详解》对Fabric的架构和工作原理进行了详细的解读与分析，那作为一个企业级的区块链系</description>
    </item>
    
    <item>
      <title>Hyperledger Fabric系统架构详解</title>
      <link>https://www.pseudoyu.com/en/2021/03/20/blockchain_hyperledger_fabric_structure/</link>
      <pubDate>Sat, 20 Mar 2021 12:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/03/20/blockchain_hyperledger_fabric_structure/</guid>
      <description>前言 因为毕业Case Study的项目主要是基于Ethereum公链，也没有面向企业的应用场景，所以之前对Hyperledger Fabric的</description>
    </item>
    
    <item>
      <title>COMP7103 Topic 3 Clustering</title>
      <link>https://www.pseudoyu.com/en/2021/03/18/comp7103_topic3/</link>
      <pubDate>Thu, 18 Mar 2021 01:18:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/03/18/comp7103_topic3/</guid>
      <description>COMP7103 Data Mining Topic 3 Clustering Cluster Analysis Finding groups of objects such that the objects in a group will be similar (or related) to one another and different from (or unrelated to) the objects in other groups
Application  Understanding  Group related documents for browsing, group genes and proteins that have similar functionality, or group stocks with similar price fluctuations   Summarization  Reduce size of large data sets    Types of Clusterings  Partitional Clustering  A division data objects into non-overlapping subsets (clusters) such that each data object is in exactly one subset    Hierarchical clustering  A set of nested clusters organized as a hierarchical tree    Other Distinctions Between Sets of Clusters  Exclusive versus non-exclusive  In non-exclusive clusterings, points may belong to multiple clusters Can represent multiple classes or &amp;lsquo;border&amp;rsquo; points   Fuzzy versus non-fuzzy  In fuzzy clustering, a point belongs to every cluster with some weight between 0 and 1 Weights must sum to 1 Probabilistic clustering has similar characteristics   Partial versus complete  In some cases, we only want to cluster some of the data   Heterogeneous versus homogeneous  Cluster of widely different sizes, shapes, and densities      Well-separated clusters A cluster is a set of points such that any point in a cluster is closer (or more similar) to every other point in the cluster than to any point not in the cluster</description>
    </item>
    
    <item>
      <title>COMP7801 Topic 4 Top-k</title>
      <link>https://www.pseudoyu.com/en/2021/03/06/comp7801_topic4/</link>
      <pubDate>Sat, 06 Mar 2021 01:18:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/03/06/comp7801_topic4/</guid>
      <description>Background Multidimensional Data  Flat relational tables Multimedia feature vectors Data warehouse data Spatial data Text documents  Attribute Types  Attributes of multidimensional tuples may have variable types  Ordinal (e.g., age, salary) Nominal categorical values (e.g., color, religion) Binary (e.g., gender, owns_property)   Basic queries: range, NN, similarity  Basic Queries  (Range) selection query  Returns the records that qualify a (multidimensional) range predicate Example:  Return the employees of age between 45 and 50 and salary above $100,000     Distance (similarity) query  Returns the records that are within a distance from a reference record.</description>
    </item>
    
    <item>
      <title>COMP7801 Topic 3 Spatial Networks</title>
      <link>https://www.pseudoyu.com/en/2021/02/27/comp7801_topic3/</link>
      <pubDate>Sat, 27 Feb 2021 01:18:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/02/27/comp7801_topic3/</guid>
      <description>Background Network Distance  In many real applications accessibility of objects is restricted by a spatial network  Examples  Driver looking for nearest gas station Mobile user looking for nearest restaurant     Shortest path distance used instead of Euclidean distance SP(a,b) = path between a and b with the minimum accumulated length  Challenges  Euclidean distance is no longer relevant  R-tree may not be useful, when search is based on shortest path distance   Graph cannot be flattened to a one-dimensional space  Special storage and indexing techniques for graphs are required   Graph properties may vary  directed vs.</description>
    </item>
    
    <item>
      <title>COMP7103 Topic 2 Association Rules</title>
      <link>https://www.pseudoyu.com/en/2021/02/25/comp7103_topic2/</link>
      <pubDate>Thu, 25 Feb 2021 01:18:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/02/25/comp7103_topic2/</guid>
      <description>COMP7103 Data Mining Topic 2 Association Rules Market-Basket Model A general many-many mapping (association) between two kinds of things
 A large set of items, e.g., things sold in a supermarket A large set of baskets, each of which is a small set of the items, e.g., the things one customer buys on one day  Frequent Itemsets Support Support for itemset I (s(I)) = the number of baskets containing all items in I</description>
    </item>
    
    <item>
      <title>Ethereum核心技术解读</title>
      <link>https://www.pseudoyu.com/en/2021/02/20/blockchain_ethereum_basic/</link>
      <pubDate>Sat, 20 Feb 2021 12:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/02/20/blockchain_ethereum_basic/</guid>
      <description>前言 比特币作为一种去中心化的数字货币，是极其成功的，但受限于比特币脚本（非图灵完备，只能处理一些简单的逻辑），并不能处理很复杂的业务。而Et</description>
    </item>
    
    <item>
      <title>比特币核心技术解读</title>
      <link>https://www.pseudoyu.com/en/2021/02/17/blockchain_bitcoin_basic/</link>
      <pubDate>Wed, 17 Feb 2021 12:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/02/17/blockchain_bitcoin_basic/</guid>
      <description>前言 在上一篇文章《区块链基础知识与关键技术》里对区块链的基础知识和关键技术进行了梳理，而比特币是区块链最典型的应用，本文将对比特币核心技术进</description>
    </item>
    
    <item>
      <title>区块链基础知识与关键技术</title>
      <link>https://www.pseudoyu.com/en/2021/02/12/blockchain_basic/</link>
      <pubDate>Fri, 12 Feb 2021 12:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/02/12/blockchain_basic/</guid>
      <description>前言 最近对在上HKU的&amp;lt;COMP7408 Distributed Ledger and Blockchain Technology&amp;gt;课程，对区块链的基础概念有了更系统的认知，结合之前上过的北</description>
    </item>
    
    <item>
      <title>用OKR的方式梳理自己的学习计划</title>
      <link>https://www.pseudoyu.com/en/2021/02/11/learning_plan_okr/</link>
      <pubDate>Thu, 11 Feb 2021 00:00:00 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/02/11/learning_plan_okr/</guid>
      <description>用一句话形容理想情况下，自己想要达到的状态 具体目标范围：提升编程技术能力 时间周期：2个月 描述：我想要成为一名具备过硬的编程能力的开发者，并对</description>
    </item>
    
    <item>
      <title>COMP7801 Topic 2 Spatial Data Management</title>
      <link>https://www.pseudoyu.com/en/2021/02/06/comp7801_topic2/</link>
      <pubDate>Sat, 06 Feb 2021 01:18:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/02/06/comp7801_topic2/</guid>
      <description>Spatial Data Management Concepts Spatial Data
 Location data  Check-in service Online Maps Location-based services   Location tracking Traffic Data  Spatial Databases
 PostgreSQL with PostGIS Neo4J-spatial HadoopGIS Ingres GeoMesa  Spatial Data Management
 Spatial Database Systems  Manage large collections of multidimensional objects (2D/3D)   A spatial object  Contains (at least) one spatial attributes that describes its location and/or geometry   A spatial relation  Is an organized collection of spatial objects of the same entity    Spatial Data Representation</description>
    </item>
    
    <item>
      <title>COMP7801 Topic 1b Database Indexing</title>
      <link>https://www.pseudoyu.com/en/2021/01/30/comp7801_topic1b/</link>
      <pubDate>Sat, 30 Jan 2021 01:18:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/01/30/comp7801_topic1b/</guid>
      <description>Database Indexing Concepts  Indexing mechanisms used to speed up access to desired data Search Key  An attribute or a set of attributes used to look up records in a file   An index file consists of records (called index entries) of the form search key - pointer Index files are typically much smaller than the original file Two basic kinds of indices  Ordered indices: search keys are stored in sorted order Hash indices: search keys are distributed across &amp;ldquo;buckets&amp;rdquo; using a &amp;ldquo;hash function&amp;rdquo;    Good Index  Index quality is evaluated by several factors  Access types supported by the index efficiently  records with a specified value in the attribute (equality query) or records with an attribute value falling in a specified range of values (range query)   Access time – query response time Insertion time – data record insertion time Deletion time – data record deletion time Space overhead – size of the index file    Classification of Indexes  Primary index  In a sequentially ordered file, the index whose search key specifies the sequential order of the file   Secondary index  an index whose search key specifies an order different from the sequential order of the file Also called non-clustered index     Dense index  Index record appears for every search-key value in the file   Sparse Index  Contains index records for only some search-key values Applicable when records are sequentially ordered on search-key Less space and less maintenance overhead for insertions and deletions Generally slower than dense index for locating records Good tradeoff: sparse index with an index entry for every block in file, corresponding to least search-key value in the block    Primary and Secondary Indices  Secondary indices have to be dense Indices offer substantial benefits when searching for records  Index is much smaller than relation file (cheap scan) Index can be ordered (fast search)   When a file is modified, every index on the file must be updated  Updating indices imposes overhead on database modification Indexes should be used with care   Sequential scan using primary index is efficient, but a sequential scan using a secondary index is expensive  Each record access may fetch a new block from disk    Multilevel Index  If index does not fit in memory, access becomes expensive To reduce number of disk accesses to index records, treat 1st level of index kept on disk as a sequential file and construct a sparse index on it  outer index – a sparse index on 1st-level index file inner index – the 1st-level index file   If even outer index is too large to fit in main memory, yet another level of index can be created, and so on  B+-Tree Index Files  A dynamic, multi-level index Advantage  automatically reorganizes itself with small local changes, in the face of insertions and deletions Reorganization of entire file is not required to maintain performance   Disadvantage of B+-trees  Extra insertion and deletion overhead, space overhead   Advantages of B+-trees outweigh disadvantages, and they are used extensively  Basic Properties  Disk-based tree structure  every node of the tree is a block and has an address (block-id) on the disk   Multiway tree  each node has multiple children (between n/2 and n, where n/2 is the order or degree of the tree) Therefore, at least 50% of the space in a node is guaranteed to be occupied (this rule may not apply to tree root)   Balanced tree  all paths from the root to a leaf have the same length guarantees good search performance (to be seen later)   Disjoint partition of attribute domain into ranges  each sub-tree indexes a range in the attribute domain the entries of a directory node define the separators between domain intervals leaf nodes store index entries and pointers to the relation file    Non-Leaf Nodes in B+-Trees  Each non-leaf node contains up to n-1 search key values and up to n pointers All non-leaf nodes (except root) contain at least n/2 pointers (n/2 is sometimes called the minimum fan-out or degree) Non leaf nodes form a multi-level sparse index on the leaf nodes.</description>
    </item>
    
    <item>
      <title>COMP7103 Topic 1 Introduction</title>
      <link>https://www.pseudoyu.com/en/2021/01/28/comp7103_topic1/</link>
      <pubDate>Thu, 28 Jan 2021 01:18:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/01/28/comp7103_topic1/</guid>
      <description>COMP7103 Data Mining Topic 1 Introduction Decision-Support System (DSS)
 A decision-support system (DSS) is a system that assists decision makers to make important decisions for an organization or business KDD and data mining are important components in many DSS&amp;rsquo;s  Data and Knowledge
 Data  A collecion of facts about certain group of objects   Pattern  Certain characteristics of data that are frequently observed   Knowledge  Some general rules about the objects    Data Warehouse</description>
    </item>
    
    <item>
      <title>COMP7801 Topic 1a Relational Database</title>
      <link>https://www.pseudoyu.com/en/2021/01/23/comp7801_topic1a/</link>
      <pubDate>Sat, 23 Jan 2021 01:18:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2021/01/23/comp7801_topic1a/</guid>
      <description>Relational Databases Structure of Relational Databases Basic structure  Given sets D1, D2, …. Dn A relation r is a subset of D1 x D2 x … x Dn A relation is a set of n-tuples (a1, a2, …, an) where each ai Di  Example
 if  customer-name = {Jones, Smith, Curry, Lindsay} customer-street = {Main, North, Park} customer-city = {Harrison, Rye, Pittsfield}   Then  r = {(Jones, Main, Harrison), (Smith, North, Rye), (Curry, North, Rye), (Lindsay, Park, Pittsfield)} is a relation over customer-name x customer-street x customer-city    Attribute Types  Each attribute of a relation has a name The set of allowed values for each attribute is called the domain of the attribute  Relation Schema  A1, A2, …, An are attributes R = (A1, A2, …, An ) is a relation schema  E.</description>
    </item>
    
  </channel>
</rss>
