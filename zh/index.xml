<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0">
  <channel>
    <title>Pseudoyu</title>
    <link>https://www.pseudoyu.com/zh/</link>
    <description>Recent content on Pseudoyu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 17 Feb 2021 00:00:00 +0800</lastBuildDate>
    
    <atom:link href="https://www.pseudoyu.com/zh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>https://www.pseudoyu.com/zh/about/</link>
      <pubDate>Thu, 04 Mar 2021 16:03:46 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/about/</guid>
      
        <description>&lt;h2 id=&#34;hi我是-yu-zhanghttpswwwpseudoyucom&#34;&gt;Hi，我是 &lt;a href=&#34;https://www.pseudoyu.com&#34;&gt;Yu Zhang&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在香港大学计算机系读研，正在学习区块链，空闲也折腾Notion等效率工具，欢迎交流。&lt;/p&gt;
&lt;p&gt;希望不断学习，不断成长。现阶段的目标是能够在忙碌的闲隙里不断思考，多阅读写作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/dino.gif&#34; alt=&#34;picture&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;个人希望&#34;&gt;个人希望&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;生活方面&lt;/strong&gt;&lt;/em&gt;，希望能够和现在的挚友一直相互支持走下去，和家人保持现在这样亦亲亦友的关系，和在意的人一起面对人生的挑战，同时也能认识更多有趣的人。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;专业方面&lt;/strong&gt;&lt;/em&gt;，希望一直有所进步，能够在开源世界留下一些痕迹。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;经济方面&lt;/strong&gt;&lt;/em&gt;，希望能自主无虞，足够支撑做自己想做的事，探索更多元的未来生活。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;社会方面&lt;/strong&gt;&lt;/em&gt;，希望有机会做参与一些公益活动或其他形式的善举，为世界带来一些微小的改变。&lt;/p&gt;
&lt;h2 id=&#34;关于网站&#34;&gt;关于网站&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Pseudoyu&lt;/strong&gt; 是我的第一个网站，主要用来记录生活、学习与零碎的一些想法。最早基于WordPress并放在自己的个人服务器上，后又迁移至同名微信公众号，最后出于稳定性和自由度考虑还是决定用Hugo生成自己的静态网页，托管于GitHub并绑定 &lt;a href=&#34;https://www.pseudoyu.com/zh/&#34;&gt;pseudoyu.com&lt;/a&gt; 域名。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pseudoyu&lt;/strong&gt; 的命名很巧合，在HKU入学注册时因为自己名字过于常见而很难抉择使用什么uid，后取用了一个前缀「&lt;a href=&#34;https://www.oxfordlearnersdictionaries.com/definition/english/pseudo&#34;&gt;pseudo&lt;/a&gt;」，&lt;a href=&#34;https://www.oxfordlearnersdictionaries.com/definition/english/pseudonym&#34;&gt;pseudonym&lt;/a&gt; 有「笔名、假名」的含义，编程里常用到的 &lt;a href=&#34;https://www.lexico.com/definition/pseudocode&#34;&gt;pseudocode&lt;/a&gt; 是「伪码」的含义，而很喜欢的日漫 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%81%BD%E7%89%A9%E8%AA%9E&#34;&gt;&lt;em&gt;物语系列 - 伪物语&lt;/em&gt;&lt;/a&gt; 中也不乏对「真物」与「伪物」的探究，那为什么不能有一个 pseudo 的 yu（我）呢？&lt;/p&gt;
&lt;p&gt;我常辗转于自我怀疑之中，在与挚友聊天时谈及「初心」或是「意义」时总是选择逃避，即使取得一些世俗的小成就也很难从心底感受到喜悦或满足，总觉得一切都如同「伪物」一样毫无意义。而随着年岁与经历的增长，我在另一篇文章 &lt;a href=&#34;https://www.pseudoyu.com/zh/2020/06/06/23%E5%B2%81%E7%9A%84%E8%87%AA%E7%99%BD%E5%8E%BB%E8%BF%BD%E5%AF%BB%E6%84%8F%E4%B9%89/&#34;&gt;&lt;em&gt;23岁的自白：去追寻意义&lt;/em&gt;&lt;/a&gt; 中写道，「&lt;em&gt;也许思考本身就是建构意义的过程，让我不再期待某个瞬间能够顿悟，只是希望继续向前，体验和追寻着自己的人生.&lt;/em&gt;」&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pseudoyu&lt;/strong&gt; 这个名字也是寓意自己不应该再时常纠结意义，而是要不断去学习、体验与挑战新的事物，即使被评价「变了」、「不像自己」也能欣然接受。&lt;/p&gt;
&lt;p&gt;希望自己能多输入一些新的知识和想法，多写一些小文章。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>用OKR的方式梳理自己的学习计划</title>
      <link>https://www.pseudoyu.com/zh/2021/02/17/learning_plan_okr/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2021/02/17/learning_plan_okr/</guid>
      
        <description>&lt;h2 id=&#34;用一句话形容理想情况下自己想要达到的状态&#34;&gt;用一句话形容理想情况下，自己想要达到的状态&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;具体目标范围&lt;/strong&gt;：提升编程技术能力&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间周期&lt;/strong&gt;：2个月&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：我想要成为一名具备过硬的编程能力的开发者，并对技术有持续学习的开放心态 &lt;em&gt;&lt;strong&gt;— 目标O&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;寻找关键词拆解状态为目标&#34;&gt;寻找关键词，拆解状态为目标&lt;/h2&gt;
&lt;h3 id=&#34;我需要提升解决的部分&#34;&gt;我需要提升解决的部分&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;过硬的编程能力&lt;/li&gt;
&lt;li&gt;持续学习的开放心态&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;想要达到的程度&#34;&gt;想要达到的程度&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;能够通过技术创造价值&lt;/li&gt;
&lt;li&gt;对技术有热爱和追求&lt;/li&gt;
&lt;li&gt;B站Up主“是落拓呀”的持续学习状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;制定每一个关键词目标的指标&#34;&gt;制定每一个关键词/目标的指标&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;过硬的编程能力&lt;/strong&gt;：能够满足目前香港/内地区块链公司，如蚂蚁链、腾讯区块链、杭州趣链科技等目标公司的技术面试要求，并主导完成1-2个完整的项目，深入技术细节 &lt;strong&gt;— KR1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持续学习的开放心态&lt;/strong&gt;：提升对于热门区块链技术平台（Ethereum、Hyperledger）与Java后端技术的理解与学习，并完成多篇原创技术博客 &lt;strong&gt;— KR2&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;填充每一个关键指标的todo-list&#34;&gt;填充每一个关键指标的todo list&lt;/h2&gt;
&lt;h3 id=&#34;过硬的编程能力&#34;&gt;过硬的编程能力&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;每天按照分类与难度刷LeetCode算法题
&lt;ol&gt;
&lt;li&gt;白天刷5-10题&lt;/li&gt;
&lt;li&gt;晚上按照节奏复习之前刷过的题的思路&lt;/li&gt;
&lt;li&gt;看关于算法框架思路的书籍，完善&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;完成区块链音乐版权项目毕业设计
&lt;ol&gt;
&lt;li&gt;每天至少2小时学习Ethereum智能合约编写相关&lt;/li&gt;
&lt;li&gt;按照项目进度进行开发&lt;/li&gt;
&lt;li&gt;与导师和同学定期交流，优化项目&lt;/li&gt;
&lt;li&gt;调研市场上区块链产品，思考运营与商业化相关&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;完成开源项目RPC框架的学习
&lt;ol&gt;
&lt;li&gt;每天至少1小时学习课程并实践代码&lt;/li&gt;
&lt;li&gt;撰写关于RPC框架原理和核心知识点的技术博文&lt;/li&gt;
&lt;li&gt;将此作为亮点项目，添加至简历并与同学进行模拟面试&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;针对GitHub与一些书籍的面试经验，学习掌握计算机基础面试知识，和同学每周模拟面试，现场写算法题并讲解，找到问题并提出建议&lt;/li&gt;
&lt;li&gt;参加春招面试，积攒面试经验查漏补缺，总结心得&lt;/li&gt;
&lt;li&gt;和落拓学长交流区块链学习心得和路径，寻求建议&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;持续学习的开放心态&#34;&gt;持续学习的开放心态&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;完成学校COMP7408区块链与分布式账本课程（共计30学时，每周一节3小时的课程）
&lt;ol&gt;
&lt;li&gt;每周一晚上参加线下课程&lt;/li&gt;
&lt;li&gt;课程第二天花3-6小时整理当周课程的知识点与拓展部分&lt;/li&gt;
&lt;li&gt;每周2-3小时将课程中的理论部分通过代码实践&lt;/li&gt;
&lt;li&gt;每天至少3天对之前所有知识点进行复习和查漏补缺（每次30分钟左右）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Udacity 区块链开发课程并整理笔记（共计约40学时）
&lt;ol&gt;
&lt;li&gt;每天至少2小时学习课程并实践代码&lt;/li&gt;
&lt;li&gt;每天至少3天对之前所有知识点进行复习和查漏补缺（每次30分钟左右）&lt;/li&gt;
&lt;li&gt;阶段性对课程里的项目进行详细整理，添加至简历并针对面试进行准备&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;每天学习间隙整理基础理论知识，并了解一些前沿技术和产品&lt;/li&gt;
&lt;li&gt;完成CSDN关于Spring Boot和其他框架的入门视频并整理&lt;/li&gt;
&lt;li&gt;完成Udacity关于Java开发相关框架的介绍并进行项目实践&lt;/li&gt;
&lt;li&gt;结合自己的理解与学习笔记，撰写针对特定技术的原创博客&lt;/li&gt;
&lt;li&gt;定期和目前从事区块链的同学进行交流讨论，补充项目经验至简历与面试准备&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Java学习笔记 - 文件与I/O流</title>
      <link>https://www.pseudoyu.com/zh/2020/12/02/java_note_io/</link>
      <pubDate>Wed, 02 Dec 2020 03:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/12/02/java_note_io/</guid>
      
        <description>&lt;h2 id=&#34;io流&#34;&gt;IO流&lt;/h2&gt;
&lt;h3 id=&#34;分类&#34;&gt;分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;流的流向
&lt;ul&gt;
&lt;li&gt;输入流&lt;/li&gt;
&lt;li&gt;输出流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作单元
&lt;ul&gt;
&lt;li&gt;字节流&lt;/li&gt;
&lt;li&gt;字符流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;角色
&lt;ul&gt;
&lt;li&gt;节点流&lt;/li&gt;
&lt;li&gt;处理流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;抽象类基类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;InputStream（字节流）/Reader（字符流）&lt;/li&gt;
&lt;li&gt;OutputStream（字节流）/Writer（字符流）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;为什么有了字节流还需要字符流？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;字符流是由虚拟机将字节转换得到的，过程耗时且容易出现编码问题，所以，提供一个直接操作字符的接口方便我们对字符进行流操作，如果音频文件、图片等媒体文件则用字节流比较好，而如果涉及到字符则使用字符流比较好，Socket, ServerSocket。&lt;/p&gt;
&lt;h3 id=&#34;bio-nio-aio&#34;&gt;BIO, NIO, AIO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BIO是同步阻塞I/O模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数较低（小于单机1000）的情况下比较适用，模型简单，不需要考虑系统过载、限流等问题。但是面对较高并发量的时候不适用。&lt;/li&gt;
&lt;li&gt;NIO是同步非阻塞模型，对应java.nio包，提供Channel, Selector, Buffer等抽象。支持面向缓冲、基于通道的I/O方法。提供了SocketChannel，ServerSocketChannel量中国套接字通道实现，都支持阻塞和非阻塞。因此，对于低负载和并发的应用程序，可以使用同步阻塞I/O来提升开发效率和更好的维护性；对于高负载和并发的应用（网络程序），可以使用NIO的非阻塞模式来开发。NIO的IO行为是同步的，对于NIO来说，业务线程是在IO操作准备好时，得到通知，接着由这个线程自行进行IO操作。&lt;/li&gt;
&lt;li&gt;AIO是异步非阻塞的I/O模型，基于事件和回调机制，应用操作后会直接返回，不会阻塞，当后台处理完成，操作系统会通知相应线程进行后续操作。AIO应用不广泛，Netty尝试过但是放弃了。&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Java学习笔记 - 多线程</title>
      <link>https://www.pseudoyu.com/zh/2020/11/29/java_note_concurrent/</link>
      <pubDate>Sun, 29 Nov 2020 03:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/11/29/java_note_concurrent/</guid>
      
        <description>&lt;h2 id=&#34;多线程&#34;&gt;多线程&lt;/h2&gt;
&lt;h3 id=&#34;线程程序进程的基本概念&#34;&gt;线程、程序、进程的基本概念&lt;/h3&gt;
&lt;p&gt;线程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比进程更小的执行单位，一个进程在执行的过程中可以产生多个线程&lt;/li&gt;
&lt;li&gt;同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程或者在各个线程之间切换工作时，负担要比进程小得多&lt;/li&gt;
&lt;li&gt;线程也被称为轻量级进程&lt;/li&gt;
&lt;li&gt;同一进程中的线程极有可能相互影响&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;含有指令和数据的文件&lt;/li&gt;
&lt;li&gt;被存储在磁盘或其他数据存储设备中&lt;/li&gt;
&lt;li&gt;静态的代码&lt;/li&gt;
&lt;li&gt;程序执行时会被操作系统载入内存中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序的一次执行过程，系统运行程序的基本单位，动态的&lt;/li&gt;
&lt;li&gt;运行一个程序即进程从创建、运行到消亡的过程&lt;/li&gt;
&lt;li&gt;一个进程就是一个执行中的程序&lt;/li&gt;
&lt;li&gt;每个进程占有某些系统资源，如CPU时间、内存空间、文件、输入输出设备使用权等&lt;/li&gt;
&lt;li&gt;各进程基本上是独立的&lt;/li&gt;
&lt;li&gt;进程属于操作系统的范畴&lt;/li&gt;
&lt;li&gt;同一时间段内，可以执行一个以上的程序&lt;/li&gt;
&lt;li&gt;线程是在同一程序内几乎同时执行一个以上的程序段&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基本状态&#34;&gt;基本状态&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;NEW：初始状态，被构建但是没有调用start()方法&lt;/li&gt;
&lt;li&gt;RUNNABLE
&lt;ul&gt;
&lt;li&gt;READY：调用start()方法后&lt;/li&gt;
&lt;li&gt;RUNNING：获得cpu时间片time slice后&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BLOCKED：调用同步方法时没有获取到锁&lt;/li&gt;
&lt;li&gt;WAITING：执行wait()方法后&lt;/li&gt;
&lt;li&gt;TIME_WAITING：在WAITING状态基础上增加了超时限制，如sleep()或wait()，时间达成后返回到RUNNABLE状态&lt;/li&gt;
&lt;li&gt;TERMINATED：执行RUNNABLE的run()方法后&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Java学习笔记 - 常用方法</title>
      <link>https://www.pseudoyu.com/zh/2020/11/27/java_note_methods/</link>
      <pubDate>Fri, 27 Nov 2020 03:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/11/27/java_note_methods/</guid>
      
        <description>&lt;h2 id=&#34;string与stringbuffer&#34;&gt;String与StringBuffer&lt;/h2&gt;
&lt;h3 id=&#34;string&#34;&gt;String&lt;/h3&gt;
&lt;p&gt;特征&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java8中，String内部使用char数组存储数据&lt;/li&gt;
&lt;li&gt;Java9后，String类的实现改用了byte数组存储字符串，并使用coder标识编码&lt;/li&gt;
&lt;li&gt;字符串不可变
&lt;ul&gt;
&lt;li&gt;实现
&lt;ul&gt;
&lt;li&gt;value数组被声明为final&lt;/li&gt;
&lt;li&gt;String内部没有能改变value数组的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;作用
&lt;ul&gt;
&lt;li&gt;可以缓存hash值，如hashmap的key&lt;/li&gt;
&lt;li&gt;String Pool的使用需要String不可变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以通过char[]数组生成新的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;String Pool&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保存着所有字符串字面量（编译时期确定）&lt;/li&gt;
&lt;li&gt;通过String的intern()方法在运行过程中添加&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;intern&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;intern&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接使用字符串常量&lt;/li&gt;
&lt;li&gt;调用String类构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;charAt(): 可以通过索引需要获取字符&lt;/li&gt;
&lt;li&gt;indexOf(): 可以通过字符获取索引&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;subString(): 截取子字符串&lt;/li&gt;
&lt;li&gt;split(): 切割字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stringbuffer&#34;&gt;StringBuffer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可变&lt;/li&gt;
&lt;li&gt;对StringBuffer对象本身进行操作&lt;/li&gt;
&lt;li&gt;线程安全，内部使用synchronized进行同步&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stringbuilder&#34;&gt;StringBuilder&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可变&lt;/li&gt;
&lt;li&gt;未加同步锁，线程不安全&lt;/li&gt;
&lt;li&gt;性能比StringBuffer高10%-15%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用总结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作少量数据用String&lt;/li&gt;
&lt;li&gt;单线程下操作字符串缓冲区下操作大量数据，适用StringBuilder&lt;/li&gt;
&lt;li&gt;多线程下操作字符串缓冲区下操作大量数据，使用StringBuffer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;包装类&#34;&gt;包装类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;和基本数据类型对应的类&lt;/li&gt;
&lt;li&gt;类型
&lt;ul&gt;
&lt;li&gt;Byte&lt;/li&gt;
&lt;li&gt;Short&lt;/li&gt;
&lt;li&gt;Integer&lt;/li&gt;
&lt;li&gt;Long&lt;/li&gt;
&lt;li&gt;Float&lt;/li&gt;
&lt;li&gt;Double&lt;/li&gt;
&lt;li&gt;Character&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自动装箱与拆箱
&lt;ul&gt;
&lt;li&gt;Integer x = 2; 装箱，自动调用了Integer.valueOf(2）&lt;/li&gt;
&lt;li&gt;int y = x;拆箱，调用了X.intValue()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常量池技术，缓存数据 Character[0,127]，Boolean[True,False]，Float、Double没有实现常量池技术，其他[-128,127]，超出范围则仍然创建新对象
&lt;ul&gt;
&lt;li&gt;new Integer(123)每次都会新建一个对象&lt;/li&gt;
&lt;li&gt;Integer.valueOf(123)会使用缓存池中的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用equals来判断&lt;/li&gt;
&lt;li&gt;使用BigDecimal来定义浮点数的值，再进行浮点数的运算操作，主要用于操作大浮点数
&lt;ul&gt;
&lt;li&gt;大小比较：a.compareTo(b)&lt;/li&gt;
&lt;li&gt;保留小数：setScale(n, BigDecimal.ROUND_HALF_DOWN)&lt;/li&gt;
&lt;li&gt;创建对象：BigDecimal(String)防止精度丢失&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用标准
&lt;ul&gt;
&lt;li&gt;所有的POJO类属性必须使用包装数据类型&lt;/li&gt;
&lt;li&gt;RPC方法的返回值和参数必须使用包装数据类型&lt;/li&gt;
&lt;li&gt;所有的局部变量使用基本数据类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;object通用方法&#34;&gt;Object通用方法&lt;/h2&gt;
&lt;h3 id=&#34;equals&#34;&gt;equals&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;等价关系
&lt;ul&gt;
&lt;li&gt;自反性&lt;/li&gt;
&lt;li&gt;对称性&lt;/li&gt;
&lt;li&gt;传递性&lt;/li&gt;
&lt;li&gt;一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;相等关系
&lt;ul&gt;
&lt;li&gt;基本类型，==判断两个值是否相等&lt;/li&gt;
&lt;li&gt;引用类型，==判断两个变量是否引用同一个对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;equals实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查是否为一个对象的引用，是则直接返回true&lt;/li&gt;
&lt;li&gt;检查是否是同个类型，不是则返回false&lt;/li&gt;
&lt;li&gt;将Object进行转型&lt;/li&gt;
&lt;li&gt;判断每个关键域是否相等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;equals与==的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;==是判断两个对象地址是不是相等（因为Java只有按值传递，所以本质比较的都是值），即判断是不是同一个对象（基本数据类型比较值、引用数据类型比较内存地址）&lt;/li&gt;
&lt;li&gt;equals不能比较基本数据类型的变量，equals方法存在Object类中&lt;/li&gt;
&lt;li&gt;类没有覆盖equals方法的话等价于==，类覆盖了equals方法的话可以用来比较两个对象的内容相等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;equals方法造成空指针异常的原因及解决方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用值为null的引用类型变量调用equals方法（非静态方法）会抛出异常&lt;/li&gt;
&lt;li&gt;应该使用常量或确认有值的量来调用equals&lt;/li&gt;
&lt;li&gt;或者使用java.util.Objects#equals来进行比较
&lt;ul&gt;
&lt;li&gt;Objects.equals(null, &amp;ldquo;Test&amp;rdquo;);&lt;/li&gt;
&lt;li&gt;如果a == null的话a.equals(b)就不会执行，避免空指针异常&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;null是所有引用类型（Object类型）的默认值&lt;/li&gt;
&lt;li&gt;可以用 == 或 != 操作比较null值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hashcode&#34;&gt;hashCode()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;确定对象在哈希表中的索引位置&lt;/li&gt;
&lt;li&gt;是个本地方法，返回哈希值，将对象的内存地址转换为整数之后返回&lt;/li&gt;
&lt;li&gt;equals()的两个对象哈希值一定相等，反之不一定&lt;/li&gt;
&lt;li&gt;equals()应该覆盖hashCode()方法，保证两个对象哈希值相等&lt;/li&gt;
&lt;li&gt;hashCode默认对堆上的对象产生独特值，如果没有重写hashCode，则无论如何也不会相等&lt;/li&gt;
&lt;li&gt;HashSet和HashMap也都需要实现hashCode()方法
&lt;ul&gt;
&lt;li&gt;当对象加入HashSet值时，会先计算对象的hashcode来判断对象加入的位置，同时比较其他已加入对象的hashcode值，如果没有符合，则没重复出现，但是如果发现有相同的hashcode值的对象，会调用equals方法来检查是否真的相同，相同则不会加入，不同则加入到其他位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;clone&#34;&gt;clone()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;是Object类的protected方法&lt;/li&gt;
&lt;li&gt;如果没有实现Cloneable接口但是调用了clone()方法，会抛出CloneNotSupportedException&lt;/li&gt;
&lt;li&gt;浅拷贝：拷贝对象和原始对象引用类型引用同个对象&lt;/li&gt;
&lt;li&gt;深拷贝：拷贝对象和原始对象引用类型引用不同对象&lt;/li&gt;
&lt;li&gt;风险与替代方案
&lt;ul&gt;
&lt;li&gt;会抛出异常&lt;/li&gt;
&lt;li&gt;需要类型转换&lt;/li&gt;
&lt;li&gt;可以用构造函数或拷贝工厂来拷贝一个对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java组织序列化&#34;&gt;Java组织序列化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对于不想序列化的变量使用transient关键词修饰
&lt;ul&gt;
&lt;li&gt;阻止实例中那些用此关键字修饰的变量序列化&lt;/li&gt;
&lt;li&gt;当对象被反序列化时，其不会被持久化和恢复&lt;/li&gt;
&lt;li&gt;智能修饰变量，不能修饰类和方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;获取键盘输入的方法&#34;&gt;获取键盘输入的方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Scanner
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Scanner&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scanner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nextLine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;BufferedReader
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;BufferedReader&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BufferedReader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;readLine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Java学习笔记 - 集合</title>
      <link>https://www.pseudoyu.com/zh/2020/11/25/java_note_collections/</link>
      <pubDate>Wed, 25 Nov 2020 03:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/11/25/java_note_collections/</guid>
      
        <description>&lt;h2 id=&#34;集合类&#34;&gt;集合类&lt;/h2&gt;
&lt;h3 id=&#34;概述&#34;&gt;概述&lt;/h3&gt;
&lt;p&gt;为了在程序中保存数目不确定的对象，JDK中提供了一系列特殊的类，这些类可以存储任意类型的对象且长度可变，称为集合，位于java.util包中&lt;/p&gt;
&lt;p&gt;按存储结构分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Collection
&lt;ul&gt;
&lt;li&gt;List
&lt;ul&gt;
&lt;li&gt;ArrayList：基于动态数组实现，支持随机访问
&lt;ul&gt;
&lt;li&gt;CopyOnWriteArrayList
&lt;ul&gt;
&lt;li&gt;读写分离，读在原数组，写则是复制到新数组（加锁）&lt;/li&gt;
&lt;li&gt;内存为两倍左右&lt;/li&gt;
&lt;li&gt;数据不同步&lt;/li&gt;
&lt;li&gt;不适合对内存敏感或是实时性要求较高的数组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LinkedList：基于双向链表实现（JDK1.6之前为循环链表，JDK1.7取消了循环），只能顺序访问，但是可以快速地在链表中间插入和删除元素，也可以用作栈、队列和双向队列&lt;/li&gt;
&lt;li&gt;ArrayList和LinkedList区别
&lt;ul&gt;
&lt;li&gt;都不同步，不保证线程安全&lt;/li&gt;
&lt;li&gt;ArrayList底层使用Object数组，LinkedList使用双向链表
&lt;ul&gt;
&lt;li&gt;双向链表包含两个指针，一个prev指向前一个节点，一个next指向后一个节点&lt;/li&gt;
&lt;li&gt;双向循环链表最后一个节点的next指向head，而head的prev指向最后一个节点，构成一个环&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LinkedList不支持高效随机元素访问，ArrayList支持&lt;/li&gt;
&lt;li&gt;ArrayList空间浪费在list列表结尾会预留一些空间，而LinkedList每一个元素都需要消耗币ArrayList更多的空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vector：与ArrayList类似，但是是线程安全的&lt;/li&gt;
&lt;li&gt;RandomAccess接口：标识实现这个接口的类具有随机访问功能，如ArrayList&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set
&lt;ul&gt;
&lt;li&gt;HashSet：基于HashMap实现，支持快速查找，但不支持有序性操作，并且没有插入顺序信息（用Iterator遍历的结果不确定）
&lt;ul&gt;
&lt;li&gt;实现Set接口，仅存储对象，调用add()方法向Set中添加元素&lt;/li&gt;
&lt;li&gt;使用成员对象来计算hashcode值&lt;/li&gt;
&lt;li&gt;LinkedHashSet：具有HashSet的查找效率，并且内部使用双向链表来维护元素的插入顺序。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TreeSet：基于红黑树实现，支持有序性操作，查找效率不如HashSet（O(1)），为O(Log N)&lt;/li&gt;
&lt;li&gt;无序性是指存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的&lt;/li&gt;
&lt;li&gt;不可重复性是指添加到元素按照equals判断时返回false&lt;/li&gt;
&lt;li&gt;Comparable和Comparator
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一般需要对一个集合使用自定义排序时，需要重写compareTo或compare方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果需要对一个集合使用两种排序，可以重写compareTo，使用自制的Comparator方法或者以两个Comparator来实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 定制排序的用法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collections&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Comparator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compare&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;compareTo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;定制排序后：&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重写compareTo方法实现按年龄来排序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// person对象没有实现Comparable接口，所以必须实现，这样才不会出错，才可以使treemap中的数据按顺序排列
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 前面一个例子的String类已经默认实现了Comparable接口，详细可以查看String类的API文档，另外其他
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 像Integer类等都已经实现了Comparable接口，所以不需要另外实现了
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Comparable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    * T重写compareTo方法实现按年龄来排序
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    */&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compareTo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Queue
&lt;ul&gt;
&lt;li&gt;LinkedList：可用来实现双向队列&lt;/li&gt;
&lt;li&gt;PriorityQueue：基于堆结构实现，可以用它来实现有限队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Map
&lt;ul&gt;
&lt;li&gt;Hashtable：类似于HashMap，但是是线程安全的
&lt;ul&gt;
&lt;li&gt;Properties&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HashMap：基于哈希表实现
&lt;ul&gt;
&lt;li&gt;多线程下使用容易造成数据丢失等问题&lt;/li&gt;
&lt;li&gt;存储结构
&lt;ul&gt;
&lt;li&gt;包含一个Entry类型的数组table，存放键值对（hashCode，K，V，next）&lt;/li&gt;
&lt;li&gt;Entry是一个链表，通过拉链法解决冲突&lt;/li&gt;
&lt;li&gt;头插式进行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JDK1.8开始，桶的链表长度大于8时会转换为红黑树，但如果当前数据长度小于64则会优先选择数组扩容&lt;/li&gt;
&lt;li&gt;查找
&lt;ul&gt;
&lt;li&gt;计算键值所在的桶&lt;/li&gt;
&lt;li&gt;在链表上顺序查找，时间复杂度取决于链表长度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;允许插入null的键值对，使用第0个桶存放&lt;/li&gt;
&lt;li&gt;ConcurrentHashMap
&lt;ul&gt;
&lt;li&gt;使用了分段锁segment，维护着多个HashEntry，因此可以多线程访问&lt;/li&gt;
&lt;li&gt;分段锁继承自重入锁ReentrantLock&lt;/li&gt;
&lt;li&gt;每个segment维护了一个count变量来统计键值对个数&lt;/li&gt;
&lt;li&gt;JDK1.8采用了CAS操作来支持更高的并发度，在CAS操作失败时使用内置锁synchronized&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LinkedHashMap&lt;/li&gt;
&lt;li&gt;WeakHashMap
&lt;ul&gt;
&lt;li&gt;继承自WeakReference，被关联的对象在下一次垃圾回收时会被回收&lt;/li&gt;
&lt;li&gt;主要用来实现缓存，通过WeakHashMap引用缓存对象，JVM进行回收&lt;/li&gt;
&lt;li&gt;Tomcat中的ConcurrentCache使用了缓存功能，分代缓存
&lt;ul&gt;
&lt;li&gt;常用对象放入eden中，ConcurrentHashMap&lt;/li&gt;
&lt;li&gt;不常用对象放入longterm，使用WeakHashMap&lt;/li&gt;
&lt;li&gt;调用get时，优先从eden中获取，没找到则在longterm中获取&lt;/li&gt;
&lt;li&gt;调用put时，如果大小超过了size，则全部放入longterm，JVM回收掉一部分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TreeMap
&lt;ul&gt;
&lt;li&gt;基于红黑树实现&lt;/li&gt;
&lt;li&gt;实现了NavigableMap接口和SortedMap接口
&lt;ul&gt;
&lt;li&gt;Navigable接口让TreeMap有了对集合中的元素搜索的能力&lt;/li&gt;
&lt;li&gt;SortMap接口让TreeMap有了对集合中的元素根据键排序的能力，默认是按照key的升序排序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HashMap和HashTable的区别
&lt;ul&gt;
&lt;li&gt;HashMap线程不安全，HashTable线程安全（经过synchronized修饰）&lt;/li&gt;
&lt;li&gt;HashMap效率高一点&lt;/li&gt;
&lt;li&gt;HashMap可以拥有一个null键和多个null值，而HashTable不允许，不然会抛出NullPointerException&lt;/li&gt;
&lt;li&gt;初始值
&lt;ul&gt;
&lt;li&gt;HashTable创建默认大小为11，每次扩充为2n+1；HashMap默认大小为12，每次扩充为两倍&lt;/li&gt;
&lt;li&gt;创建时如果给了初始值，HashTable直接使用，而HashMap则扩充为2的幂次方大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;底层数据结构
&lt;ul&gt;
&lt;li&gt;HashMap在JDK1.8之后解决哈希冲突有了较大变化，当链表长度大于8时，将链表转为红黑树以减少搜索时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ConcurrentHashMap和HashTable的区别
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HashTable采取数组+链表，而JDK1.8之后的ConcurrentHashMap采取分段的数组+链表/红黑树&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HashTable使用synchronized来保证线程安全，效率比较低（同一把锁，存在竞争）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ConcurrentHashMap采用segment分段锁，每一把锁只锁容器其中一部分数据，多线程访问容器中不同数据段的数据，就不会存在锁竞争；JDK1.8之后摒弃了Segment分段锁，而是直接使用Node数组+链表+红黑树的形式，并发控制使用了synchronized和CAS（CompareAndSet，先进行比较再修改，对应着一条硬件指令，虽然有多个步骤，但是操作系统保证其原子性）来操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;synchronized只锁定当前链表或红黑书的首节点，只要哈希不冲突，就不会产生并发，提升效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CAS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于采用这种 CAS 机制是没有对方法进行加锁的，所以，所有的线程都可以进入 increment() 这个方法，假如进入这个方法的线程太多，就会出现一个问题：每次有线程要执行第三个步骤的时候，i 的值老是被修改了，所以线程又到回到第一步继续重头再来&lt;/li&gt;
&lt;li&gt;为了解决这个问题，Java8 引入了一个 cell[] 数组，如果有 100 个线程要对 i 进行自增操作的话，这个时候，冲突就会大大增加，系统就会把这些线程分配到不同的 cell 数组元素去&lt;/li&gt;
&lt;li&gt;在 Java 中，也是提供了这种 CAS 的原子类，例如
&lt;ul&gt;
&lt;li&gt;AtomicBoolean&lt;/li&gt;
&lt;li&gt;AtomicInteger&lt;/li&gt;
&lt;li&gt;AtomicLong&lt;/li&gt;
&lt;li&gt;AtomicReference&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compareAndSet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CASTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AtomicInteger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 自增 1并返回之后的结果
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;incrementAndGet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;collection接口&#34;&gt;Collection接口&lt;/h3&gt;
&lt;p&gt;通用方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boolean add(Object o) 向集合中添加一个元素&lt;/li&gt;
&lt;li&gt;boolean addAll(Collection c) 将指定集合中所有元素添加到该集合中&lt;/li&gt;
&lt;li&gt;void clear() 删除该集合所有元素&lt;/li&gt;
&lt;li&gt;boolean remove(Object o) 删除该集合指定元素&lt;/li&gt;
&lt;li&gt;boolean removeAll(Collection c) 删除该集合所有元素&lt;/li&gt;
&lt;li&gt;boolean isEmpty() 判断是否为空&lt;/li&gt;
&lt;li&gt;boolean contains(Object o) 判断该集合是否包含某个元素&lt;/li&gt;
&lt;li&gt;boolean containsAll(Collection c) 判断集合中是否包含指定集合中的所有元素&lt;/li&gt;
&lt;li&gt;Iterator iterator(Collection c) 返回在该集合的算俗尚进行迭代的迭代起（用于遍历）&lt;/li&gt;
&lt;li&gt;int size() 获取该集合元素个数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;list接口&#34;&gt;List接口&lt;/h4&gt;
&lt;p&gt;继承自Collection接口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许出现重复的元素&lt;/li&gt;
&lt;li&gt;线性存储，可通过索引访问集合中的指定元素&lt;/li&gt;
&lt;li&gt;元素有序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;增加了根据元素索引进行操作的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boolean add(int index, Object e) 插入元素至指定位置&lt;/li&gt;
&lt;li&gt;boolean addAll(int index, Collection c) 插入集合至指定位置&lt;/li&gt;
&lt;li&gt;Object get(int index) 返回指定索引元素&lt;/li&gt;
&lt;li&gt;Object remove(int index) 删除指定索引元素&lt;/li&gt;
&lt;li&gt;Object set(int index, Object e) 将索引处元素替换，并返回替换后的元素&lt;/li&gt;
&lt;li&gt;int indexOf(Object o) 返回元素在List集合中的位置&lt;/li&gt;
&lt;li&gt;int lastIndexOf(Object o) 返回元素在List集合中最后出现的位置&lt;/li&gt;
&lt;li&gt;List subList(int fromIndex, int toIndex) 两个索引之间集合组成的子集合，包含头不包含尾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ArrayList&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是List接口的一个实现类，底层的存储结构式数组&lt;/li&gt;
&lt;li&gt;大部分方法从接口中继承，其中add()方法和get()方法主要用于元素存取&lt;/li&gt;
&lt;li&gt;查询元素时效率高，但增删元素时效率低&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LinkedList&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内部维护了一个双向循环链表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于元素的增删具有很高的效率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;void add(int index, E e) 在列表指定位置插入指定元素&lt;/li&gt;
&lt;li&gt;void addFirst(Object o) 将指定元素插入列表开头&lt;/li&gt;
&lt;li&gt;void addLast(Object o) 将指定元素插入列表结尾&lt;/li&gt;
&lt;li&gt;Object getFirst() 返回列表第一个元素&lt;/li&gt;
&lt;li&gt;Object getLast() 返回列表最后一个元素&lt;/li&gt;
&lt;li&gt;Object removeFirst() 移除并返回列表第一个元素&lt;/li&gt;
&lt;li&gt;Object removeLast() 移除并返回列表最后一个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;LinkedList&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LinkedList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;removeFirst&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;removeLast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;iterator接口&#34;&gt;Iterator接口&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用于遍历集合中的所有元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;迭代器获取ArrayList集合中的元素时，会当作Object看待，如想得到特定元素则需要强制类型转换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hasNext()&lt;/li&gt;
&lt;li&gt;next()&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 构建一个迭代器
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Iterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 通过hasNext()方法来循环遍历
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()){&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 通过next()来访问下一个元素
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;foreach循环&#34;&gt;foreach循环&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;容器内元素类型&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;临时变量&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;容器变量&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;执行语句&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;234&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;999&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果要进行remove操作，可以调用迭代器的remove方法而不是集合类的reomve方法，因为如果列表在任何时间从结构上修改创建迭代器之后，以任何方式除非通过迭代器自身remove/add方法，都会抛出一个ConcurrentModificationException，这就是单线程状态下的fail-fast机制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java8开始，可以使用Collection#removeIf()方法删除满足特定条件的元素&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;removeIf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* 删除list中的所有偶数 */&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* [1, 3, 5, 7, 9] */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;set接口&#34;&gt;Set接口&lt;/h4&gt;
&lt;p&gt;继承自Collection接口，Collection接口中的方法一致但更加严格&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;元素无序&lt;/li&gt;
&lt;li&gt;保证存入的程序不出现重复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HashSet&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据对象的哈希值来确定元素在集合中的存储位置
&lt;ul&gt;
&lt;li&gt;向HashSet添加一个对象时，首先调用那个hashCode方法计算对象的哈希值，确定元素的存储位置&lt;/li&gt;
&lt;li&gt;如果哈希值相同，调用对象的equals方法确保该位置没有重复元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;具有良好的存取和查找功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TreeSet&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以二叉树的方式来存储元素&lt;/li&gt;
&lt;li&gt;可以实现对集合中元素进行排序&lt;/li&gt;
&lt;li&gt;TreeSet有序指的是元素会按照大小关系进行排序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;map接口&#34;&gt;Map接口&lt;/h3&gt;
&lt;p&gt;存储具有对应关系的数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;双列集合&lt;/li&gt;
&lt;li&gt;Key和Value进行对应&lt;/li&gt;
&lt;li&gt;Key不能重复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;void put(Object key, Object value) 存入键值对&lt;/li&gt;
&lt;li&gt;Object get(Object key) 获取值&lt;/li&gt;
&lt;li&gt;boolean containsKey(Object key) 是否包含key&lt;/li&gt;
&lt;li&gt;boolean containsValue(Object value) 是否包含值&lt;/li&gt;
&lt;li&gt;Set keySet 返回键的Set&lt;/li&gt;
&lt;li&gt;Collection&lt;!-- raw HTML omitted --&gt; values() 返回值的Collection&lt;/li&gt;
&lt;li&gt;Set&amp;lt;Map.Entry,&amp;lt;K, V&amp;raquo;entrySet() 返回映射关系的Set&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HashMap&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断key是否重复和HashSet一样 跟hashCode和equals方法相关&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LinkedHashMap&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维持元素读取和存储的顺序一致&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Properties&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hashtable是线程安全的 性能比较低&lt;/li&gt;
&lt;li&gt;Properties是Hashtable的子类&lt;/li&gt;
&lt;li&gt;应用场景：多线程安全的需求 往往对应到系统属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;容器中的设计模式&#34;&gt;容器中的设计模式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;迭代器模式
&lt;ul&gt;
&lt;li&gt;继承了Iterable接口，iterator()方法能够产生一个iterator对象&lt;/li&gt;
&lt;li&gt;JDK1.5 之后可以通过foreach来遍历实现了Iterable接口的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;适配器模式
&lt;ul&gt;
&lt;li&gt;Arrays.asList可以把数组类型转换为List类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;arraysaslist使用指南&#34;&gt;Arrays.asList()使用指南&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以将一个数组转换为一个List集合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;asList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 另一种方式
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;asList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将数组转换为集合后，底层还是数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传递的数组必须是数组对象而不是基本类型（泛型方法），因此要使用包装类型数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用集合的修改方法add()，remove()和clear()会抛出异常，因为返回的是java.util.Arrays的一个内部类，并没有实现（重写）集合的修改方法，只重写了get, set, indexOf, contains, forEach, replaceAll, sort&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;正确地将数组转为arraylist&#34;&gt;正确地将数组转为ArrayList&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;简便方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;asList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用Java8的Stream&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myArray&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collectors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//基本类型也可以实现转换（依赖boxed的装箱操作）
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myArray2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myArray2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;boxed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collectors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用Java9的List.of()方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* [1, 2, 3] */&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/* 不支持基本数据类型 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;collectiontoarray方法使用&#34;&gt;Collection.toArray()方法使用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;泛型方法，如果toArray方法没有传递任何参数则返回Object类型数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]{&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;dog&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lazy&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;over&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;jumps&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fox&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;brown&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;quick&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;asList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Collections&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//没有指定类型的话会报错
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于JVM优化，new String[0]作为Collection.toArray()方法的参数使用，是作为一个模板作用，指定了返回数组的类型，0为了节省空间&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;泛型&#34;&gt;泛型&lt;/h3&gt;
&lt;p&gt;功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;和集合联合使用的时候&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;限制往集合添加的数据类型&lt;/li&gt;
&lt;li&gt;保证获取元素的时候 使用具体的数据类型 而不是Object 从而避免不必要的强制类型转换&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 创建集合并指定泛型为String
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Java学习笔记 - 面向对象</title>
      <link>https://www.pseudoyu.com/zh/2020/11/23/java_note_oop/</link>
      <pubDate>Mon, 23 Nov 2020 03:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/11/23/java_note_oop/</guid>
      
        <description>&lt;h2 id=&#34;java面向对象&#34;&gt;Java面向对象&lt;/h2&gt;
&lt;h3 id=&#34;特性&#34;&gt;特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;封装性：将对象的属性和行为封装起来，不需要让外界知道具体的实现细节&lt;/li&gt;
&lt;li&gt;继承性：无需重新编写原有类的情况下，新类可拥有原有类的功能&lt;/li&gt;
&lt;li&gt;多态性：一个类中定义的属性和方法被继承后，可以具有不同的数据类型和表现出不同的行为&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面向对象与面向过程的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面向过程的性能比面向对象高，类的调用需要实例化、开销比较大，比较消耗资源。非根本原因，面向过程也需要分配内存，计算内存偏移量，Java性能差主要原因是它是半编译语言，最终的执行代码并不是可以直接被CPU执行的二进制机器码，而面向过程语言大多是直接编译成机器码在电脑上执行&lt;/li&gt;
&lt;li&gt;面向对象易维护、易复用、易拓展，可以设计出低耦合的系统，使系统更灵活、更加易于维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类与对象&#34;&gt;类与对象&lt;/h3&gt;
&lt;p&gt;成员变量与局部变量的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语法形式：成员变量是定义在类中的变量，可以被public、private、static等修饰符修饰，而局部变量是定义在代码块或方法中的变量，不能被访问修饰符修饰，但都可以被final修饰&lt;/li&gt;
&lt;li&gt;变量在内存中的存储方式：成员变量如果使用static则属于类，没有则属于实例；对象存在于堆内存，局部变量存在于栈内存&lt;/li&gt;
&lt;li&gt;变量在内存中的生存时间：成员变量是对象的一部分，随着对象创建而存在，而局部变量随着方法调用自动消失&lt;/li&gt;
&lt;li&gt;成员变量如果没有初始值则自动以类型默认值赋值（除非被final修饰），而局部变量不会自动赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 定义成员变量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;speak&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 定义局部变量，方法优先访问局部变量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类的构造方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完成对类对象的初始化工作&lt;/li&gt;
&lt;li&gt;如果自己添加了构造方法，则不会添加默认的无参数构造方法了，因此需要自己添加一下&lt;/li&gt;
&lt;li&gt;调用子类构造方法前先调用父类无参数的构造方法是为了帮助子类做初始化工作&lt;/li&gt;
&lt;li&gt;一般需要在父类中加上一个不做事且没有参数的构造方法，因为程序在执行子类的构造方法之前，如果父类只定义了有参数的构造方法，子类没有super()调用父类特定的构造方法，则会编译错误&lt;/li&gt;
&lt;li&gt;方法名与类名相同&lt;/li&gt;
&lt;li&gt;方法名前没有返回值声明&lt;/li&gt;
&lt;li&gt;不能使用return返回值&lt;/li&gt;
&lt;li&gt;使用this来访问成员变量以解决命名冲突&lt;/li&gt;
&lt;li&gt;构造方法不能被重写，但可以被重载，所以可以有多个构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 无参数默认
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 构造函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 重载构造函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 新的构造函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;new运算符创建对象实例（在堆内存中），对象引用指向对象实例（在栈内存中），一个对象引用可以指向0或1个对象，一个对象可以有n个引用指向它&lt;/li&gt;
&lt;li&gt;对象的相等是比较内存中存放的内容，引用相等比较的是指向的内存地址是否相等&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 类名 对象名 = new 类名();
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;垃圾回收机制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象成为垃圾后仍然会占用内存空间&lt;/li&gt;
&lt;li&gt;Java虚拟机自动启动垃圾回收器将垃圾从内存中释放&lt;/li&gt;
&lt;li&gt;可以调用System.gc()方法通知虚拟机立即进行垃圾回收&lt;/li&gt;
&lt;li&gt;对象在内存中被释放时，finalize()方法会被自动调用，因此可以在类中定义finalized()方法来观察对象何时被释放&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;封装方法&#34;&gt;封装方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;private修饰成员变量&lt;/li&gt;
&lt;li&gt;把一个对象的状态信息隐藏在对象内部，不允许外部对象直接访问，但是为外界提供一些操作方法，如set和get方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static关键字&#34;&gt;static关键字&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;静态变量：修饰成员变量，特定的数据在内存中只有一份，可以通过类名来访问&lt;/li&gt;
&lt;li&gt;静态方法：可以通过类名.方法名的方式来访问
&lt;ul&gt;
&lt;li&gt;静态方法只能访问static修饰的成员&lt;/li&gt;
&lt;li&gt;静态方法不依赖于任何实例，因此必须有实现，不能是抽象方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;静态代码块：static修饰的代码块
&lt;ul&gt;
&lt;li&gt;类被加载时执行，一次&lt;/li&gt;
&lt;li&gt;通常被用来对类的成员作初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;静态导包
&lt;ul&gt;
&lt;li&gt;在使用静态变量和方法时不用再指名ClassName，简化代码，但降低了可读性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;成员内部类&#34;&gt;成员内部类&lt;/h3&gt;
&lt;p&gt;一个类中除了可以定义成员变量、成员方法，还可以定义类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通成员内部类&lt;/li&gt;
&lt;li&gt;静态内部类&lt;/li&gt;
&lt;li&gt;方法内部类&lt;/li&gt;
&lt;li&gt;匿名内部类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成员内部类可以访问外部类的所有成员&lt;/li&gt;
&lt;li&gt;外部类访问内部类需要通过外部类去创建内部类对象&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 外部类名.内部类名 变量名 = new 外部类名().new 内部类名();
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;outer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;初始化顺序&#34;&gt;初始化顺序&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;父类（静态变量，静态语句块）&lt;/li&gt;
&lt;li&gt;子类（静态变量，静态语句块）&lt;/li&gt;
&lt;li&gt;父类（实例变量，普通语句块）&lt;/li&gt;
&lt;li&gt;父类（构造函数）&lt;/li&gt;
&lt;li&gt;子类（实例变量，普通语句块）&lt;/li&gt;
&lt;li&gt;子类（构造函数）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;访问权限&#34;&gt;访问权限&lt;/h3&gt;
&lt;p&gt;访问级别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private 只能被该类的其他成员访问&lt;/li&gt;
&lt;li&gt;default 能被包中的其他类访问。默认访问控制级别&lt;/li&gt;
&lt;li&gt;protected 可以被包中的其他类和子类访问&lt;/li&gt;
&lt;li&gt;public 不管访问类与被访问类是否在同一个包中都可以访问&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类的继承&#34;&gt;类的继承&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不同类型对象经常有一定数量的共同点，因此可以在一个类的基础上构建新的类&lt;/li&gt;
&lt;li&gt;子类会自动拥有父类所有可继承的属性和方法，不可选择性继承&lt;/li&gt;
&lt;li&gt;父类中的私有属性和方法子类是无法访问的，只是拥有&lt;/li&gt;
&lt;li&gt;可以快速创建新的类，提高代码的重用、程序的可维持性，节省创建新类的时间，提高开发效率&lt;/li&gt;
&lt;li&gt;子类可以拥有自己的属性和方法，进行拓展，也可以用自己的方式实现父类方法（即重写）&lt;/li&gt;
&lt;li&gt;使用extends关键字&lt;/li&gt;
&lt;li&gt;不允许多重继承&lt;/li&gt;
&lt;li&gt;多个类可以继承自同一个父类&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重写&#34;&gt;重写&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;发生在运行期&lt;/li&gt;
&lt;li&gt;子类会自动继承父类中定义的方法&lt;/li&gt;
&lt;li&gt;可以对方法进行修改，即重写&lt;/li&gt;
&lt;li&gt;重写方法需要和父类方法具有相同的方法名、参数列表及返回类型&lt;/li&gt;
&lt;li&gt;使用super方法访问父类成员&lt;/li&gt;
&lt;li&gt;使用super方法访问父类构造方法，第一行&lt;/li&gt;
&lt;li&gt;使用this关键字调用子类构造方法，第一行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重载&#34;&gt;重载&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;发生在编译期&lt;/li&gt;
&lt;li&gt;同一个方法能够根据输入数据不同做出不同的处理&lt;/li&gt;
&lt;li&gt;方法名必须相同&lt;/li&gt;
&lt;li&gt;参数类型不同、个数不同、顺序不同、方法返回值和访问修饰符可以不同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;final关键字&#34;&gt;final关键字&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;final修饰的类不可被继承&lt;/li&gt;
&lt;li&gt;final修饰的方法不可被重写&lt;/li&gt;
&lt;li&gt;final修饰的变量不可被改变赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;抽象类&#34;&gt;抽象类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用abstract关键词修饰&lt;/li&gt;
&lt;li&gt;包含抽象方法的类必须声明为抽象类&lt;/li&gt;
&lt;li&gt;抽象类可以不包含任何抽象方法&lt;/li&gt;
&lt;li&gt;抽象类不可以被实例化&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 定义一个抽象Animal类
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Animal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 定义一个抽象方法shout()
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;shout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;接口&#34;&gt;接口&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;接口是由常量和抽象方法组成的特殊类，是对抽象类的进一步抽象&lt;/li&gt;
&lt;li&gt;使用接口主要是为了克服单继承的限制&lt;/li&gt;
&lt;li&gt;使用extends来继承别的接口&lt;/li&gt;
&lt;li&gt;使用interface关键字来声明&lt;/li&gt;
&lt;li&gt;类使用implement关键字来继承接口&lt;/li&gt;
&lt;li&gt;接口中的变量默认用public static final修饰&lt;/li&gt;
&lt;li&gt;接口中的方法默认用public static修饰&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;接口名&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;接口1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;接口2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;数据类型&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;常量名&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;常量值&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;返回值&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;抽象方法名&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;参数列表&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;抽象类与接口对比&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都不能实例化，都可以有抽象方法&lt;/li&gt;
&lt;li&gt;接口可用于多继承&lt;/li&gt;
&lt;li&gt;接口具有默认修饰符&lt;/li&gt;
&lt;li&gt;关键字不一样
&lt;ul&gt;
&lt;li&gt;接口继承接口，类继承类用extends&lt;/li&gt;
&lt;li&gt;类继承接口implements&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口（推荐）
&lt;ul&gt;
&lt;li&gt;需要让不相关的类实现同一个方法&lt;/li&gt;
&lt;li&gt;需要多重继承&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;抽象类
&lt;ul&gt;
&lt;li&gt;需要在几个相关的类中共享代码&lt;/li&gt;
&lt;li&gt;需要能控制继承来的成员的访问权限&lt;/li&gt;
&lt;li&gt;需要继承非静态和非常量字段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多态&#34;&gt;多态&lt;/h3&gt;
&lt;p&gt;父类引用，指向不同子类的实例，对同一个实例方法名调用，调用的程序不一样&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多态的基础是继承和重写&lt;/li&gt;
&lt;li&gt;多态仅限于实例方法&lt;/li&gt;
&lt;li&gt;对象类型和引用类型之间具有继承/实现的关系&lt;/li&gt;
&lt;li&gt;引用类型变量发出的方法调用哪个类中的方法必须在程序运行期间才能确定&lt;/li&gt;
&lt;li&gt;多态不能调用只在子类存在但父类不存在的方法&lt;/li&gt;
&lt;li&gt;如果子类重写了父类的方法，真正执行的是子类覆盖的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对象的类型转换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显式转换&lt;/li&gt;
&lt;li&gt;隐式转换&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 把子类对象当作父类类型
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Animal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;an1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Animal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;an2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Dog&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;异常处理&#34;&gt;异常处理&lt;/h3&gt;
&lt;p&gt;异常结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Throwable
&lt;ul&gt;
&lt;li&gt;Error 一般是Java运行时产生的系统内部错误或者资源耗尽的错误，仅靠修改程序本身不能恢复执行，例如虚拟机运行错误Virtual MachineError，虚拟机内存不够错误OutOfMemoryError，类定义错误NoClassDefFoundError，虚拟机一般选择线程终止&lt;/li&gt;
&lt;li&gt;Exception 异常 RuntimeException用于运行时异常，其他用于编译时异常&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Throwable类常用方法
&lt;ul&gt;
&lt;li&gt;String getMessage()返回异常发生时的简要描述&lt;/li&gt;
&lt;li&gt;string toString()返回异常发生时的详细信息&lt;/li&gt;
&lt;li&gt;string getLocalizedMessage()返回异常对象的本地化信息，使用Throwable子类覆盖这个方法，生成本地化信息，没覆盖的话则与getMessage()相同&lt;/li&gt;
&lt;li&gt;void printStackTrace()在控制台上打印Throwable对象封装的异常信息&lt;/li&gt;
&lt;li&gt;void printStackTrace(PrintStream s)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;异常处理方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 程序
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;异常类型类&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 对异常的处理
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 一定执行的语句
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;finally不执行的情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;try或finally中用了System.exit(int)退出程序，但如果在异常语句之后还是会被执行&lt;/li&gt;
&lt;li&gt;程序所在的线程死亡&lt;/li&gt;
&lt;li&gt;关闭CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当try语句和finally语句中都有return语句时，在方法返回之前，finally语句的内容将被执行，并且finally语句的返回值将会覆盖原始的返回值&lt;/p&gt;
&lt;p&gt;try-with-resources代替try-catch-finally&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适用范围（资源的定义）：任何实现java.lang.AutoCloseable或者java.io.Closeable的对象&lt;/li&gt;
&lt;li&gt;关闭资源和final的执行顺序：在try-with-resources语句中，任何catch或finally块在声明的资源关闭后运行&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Scanner&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scanner&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scanner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;test.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scanner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scanner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nextLine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fnfe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fnfe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;多个资源&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BufferedInputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BufferedInputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;test.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;BufferedOutputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BufferedOutputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;out.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;bout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;throws关键字&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;修饰符&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;返回值类型&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;方法名&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;异常类型1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;异常类型2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 定义方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;自定义异常&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 自定义异常类
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CustomerException&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RuntimeException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 继承构造函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;CustomerException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// 自定义异常方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 调用自定义异常类
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;异常对象&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;代理&#34;&gt;代理&lt;/h2&gt;
&lt;p&gt;代理关系模型，A想要调用B类的方法，A不直接调用，A会在自己的类中创建一个B对象的代理，再由代理调用B的方法&lt;/p&gt;
&lt;h2 id=&#34;泛型&#34;&gt;泛型&lt;/h2&gt;
&lt;p&gt;提供了编译时类型安全检测机制，允许在编译时检测到非法的类型，本质是参数化类型。Java的泛型是伪泛型，也就是在编译期间，所有的泛型信息会被擦除，Java编译器会在编译时尽可能发现出错的地方，但没办法发现运行时类型转换异常的问题，类型擦除是Java泛型与C++模板机制实现方式之间的重要区别。类型擦除后只保留Object或者Comparable这样的原始类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java编译器先检查泛型类型，进行类型擦除，再进行编译&lt;/li&gt;
&lt;li&gt;类型检查是编译时就完成的，类型检查针对引用，引用调用泛型方法则会对这个引用调用的方法进行类型检测，无关真正引用的对象&lt;/li&gt;
&lt;li&gt;泛型不允许继承关系&lt;/li&gt;
&lt;li&gt;泛型信息虽然会被擦除，但是当存取一个泛型域时会自动插入强制类型转换&lt;/li&gt;
&lt;li&gt;子类在继承时只能将父类类型擦除为原始类型，目的为重写却变为了重载，要解决多态与泛型的冲突，JVM编译生成桥方法&lt;/li&gt;
&lt;li&gt;泛型类型变量不能使基本数据类型&lt;/li&gt;
&lt;li&gt;编译时用instanceof是错误的（因为类型擦除了）&lt;/li&gt;
&lt;li&gt;泛型类中的静态方法和静态变量不可以使用泛型类所声明的泛型类型参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用泛型表示类&lt;/li&gt;
&lt;li&gt;用泛型表示接口&lt;/li&gt;
&lt;li&gt;泛型方法&lt;/li&gt;
&lt;li&gt;泛型通配符
&lt;ul&gt;
&lt;li&gt;？表示不确定的java类型&lt;/li&gt;
&lt;li&gt;T表示具体的一个java类型&lt;/li&gt;
&lt;li&gt;K V表示Key Value&lt;/li&gt;
&lt;li&gt;E表示Element&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反射&#34;&gt;反射&lt;/h2&gt;
&lt;p&gt;Java反射机制是在程序运行的过程中，对于任何一个类，都能够知道它的所有属性和方法；对于任意一个对象，都能够知道调用它的任意属性和方法；动态获取信息及动态调用对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在运行时判断一个对象所属的类&lt;/li&gt;
&lt;li&gt;在运行是构造任意一个类的对象&lt;/li&gt;
&lt;li&gt;在运行时判断任意一个类所有的成员变量和方法&lt;/li&gt;
&lt;li&gt;在运行时调用任意一个对象的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;静态编译和动态编译&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态编译：在编译时确定类型，绑定对象&lt;/li&gt;
&lt;li&gt;动态编译：在运行时确定对象，绑定对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：运行期类型的判断，动态加载类，提高代码的灵活度&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;JVM需要做一系列解释操作，性能比直接的java代码要慢很多，造成性能瓶颈&lt;/li&gt;
&lt;li&gt;让我们可以动态操作改变类的属性同时也增加了其安全隐患&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要用于框架设计&lt;/li&gt;
&lt;li&gt;模块化开发，通过反射去调用对应的字节码&lt;/li&gt;
&lt;li&gt;动态代理设计模式采用了反射机制&lt;/li&gt;
&lt;li&gt;Spring/Hibernate框架也大量使用到了反射机制&lt;/li&gt;
&lt;li&gt;例如
&lt;ul&gt;
&lt;li&gt;JDBC连接数据库时使用Class.forName()通过反射加载数据库的驱动程序&lt;/li&gt;
&lt;li&gt;Spring框架的IOC（动态加载管理Bean）创建对象及AOP动态代理功能和反射都有联系&lt;/li&gt;
&lt;li&gt;动态配置实例的属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Java学习笔记 - 基础</title>
      <link>https://www.pseudoyu.com/zh/2020/11/20/java_note_basic/</link>
      <pubDate>Fri, 20 Nov 2020 03:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/11/20/java_note_basic/</guid>
      
        <description>&lt;h2 id=&#34;java基础&#34;&gt;Java基础&lt;/h2&gt;
&lt;h3 id=&#34;java特性&#34;&gt;Java特性&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;简单性
&lt;ul&gt;
&lt;li&gt;丢弃了C++中运算符重载、多重继承等&lt;/li&gt;
&lt;li&gt;不使用指针而是使用引用&lt;/li&gt;
&lt;li&gt;自动垃圾回收机制（不用开发者进行内存管理）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面向对象
&lt;ul&gt;
&lt;li&gt;提供了类、接口和继承等&lt;/li&gt;
&lt;li&gt;支持类之间的单继承&lt;/li&gt;
&lt;li&gt;支持接口之间的多继承&lt;/li&gt;
&lt;li&gt;全面支持动态绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安全性
&lt;ul&gt;
&lt;li&gt;不支持指针，一切对内存的访问都必须通过实例变量来实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可靠性&lt;/li&gt;
&lt;li&gt;跨平台性
&lt;ul&gt;
&lt;li&gt;可以运行在各种平台上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持多线程
&lt;ul&gt;
&lt;li&gt;并发执行多个任务，提升执行效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持网络编程（Java语言诞生就是为了简化网络编程而设计的）&lt;/li&gt;
&lt;li&gt;编译与解释并存&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;与C++的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都面向对象，实现了封装、继承和多态，但是Java是类不能多重继承（接口可以），C++可以&lt;/li&gt;
&lt;li&gt;Java不提供指针访问内存，程序内存更加安全&lt;/li&gt;
&lt;li&gt;Java提供了自动内存管理垃圾回收机制，程序员不需要手动释放&lt;/li&gt;
&lt;li&gt;Java中没有结束符&#39;\0&amp;rsquo;而C语言有&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;import java 和 javax区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以前javaAPI必需的是java开头的包，javax只是拓展API&lt;/li&gt;
&lt;li&gt;后来javax逐渐拓展为javaAPI的组成部分，但移植麻烦，最终成为标准API的一部分&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jdkjava-development-kit&#34;&gt;JDK（Java Development Kit）&lt;/h3&gt;
&lt;p&gt;Java开发环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译器&lt;/li&gt;
&lt;li&gt;运行工具&lt;/li&gt;
&lt;li&gt;文档生成工具&lt;/li&gt;
&lt;li&gt;打包工具&lt;/li&gt;
&lt;li&gt;JRE（Java Runtime Environment）运行环境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java程序编译&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;javac编译源文件&lt;/li&gt;
&lt;li&gt;生成.class字节码文件&lt;/li&gt;
&lt;li&gt;java虚拟机解释执行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JVM虚拟机&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对不同的操作系统有特定的实现，使用相同的字节码，给出相应的结果&lt;/li&gt;
&lt;li&gt;解决了传统解释型语言执行效率低的问题，又保留了其可移植的特性&lt;/li&gt;
&lt;li&gt;引进了JIT编译器，运行时编译，完成第一次编译后，将机器码保存下来，下次直接使用（解决解释器逐行解释执行效率低与热点代码经常被调用的问题）&lt;/li&gt;
&lt;li&gt;根据代码每次执行情况做一些优化，执行次数越多，速度越快&lt;/li&gt;
&lt;li&gt;JDK9引入了AOT编译模式，将字节吗直接编译成机器码，避免了JIT预热等方面的开销（但编译质量相对较差），JDK支持分层编译和AOT协同使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oracle JDK 与 Open JDK区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open JDK是一个参考模型，完全开源，而Oracle JDK是Open JDK的一个实现，并不完全开源&lt;/li&gt;
&lt;li&gt;Oracle JDK相对更稳定，有更多的类和错误修复&lt;/li&gt;
&lt;li&gt;Oracle JDK提供了更好的性能&lt;/li&gt;
&lt;li&gt;Oracle不会为即将发布的版本提供长期支持&lt;/li&gt;
&lt;li&gt;Oracle JDK根据二进制代码许可协议获得许可，Open JDK根据GPL v2获得许可&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java编程基础&#34;&gt;Java编程基础&lt;/h2&gt;
&lt;h3 id=&#34;基本语法&#34;&gt;基本语法&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;HelloWorld&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 定义一个字符串变量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;功能性语句和结构性语句组成  结构性语句主要是为了承载功能性语句&lt;/li&gt;
&lt;li&gt;严格区分大小写的&lt;/li&gt;
&lt;li&gt;需要注意层次清晰规范&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;书写规范&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包名：不使用大写的英文字母&lt;/li&gt;
&lt;li&gt;类名和接口名：首字母大写&lt;/li&gt;
&lt;li&gt;常量：英文字母大写 单词之间使用下划线分割&lt;/li&gt;
&lt;li&gt;变量名和方法名：驼峰命名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单行注释&lt;/li&gt;
&lt;li&gt;多行注释
&lt;ul&gt;
&lt;li&gt;文档注释，一般写在方法或类上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据类型&#34;&gt;数据类型&lt;/h3&gt;
&lt;p&gt;Java要确定每种基本类型所占存储空间的大小，并不随着机器硬件架构的变化而变化，因此更具备可移植性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整型
&lt;ul&gt;
&lt;li&gt;byte 8位&lt;/li&gt;
&lt;li&gt;short 16位&lt;/li&gt;
&lt;li&gt;int 32位&lt;/li&gt;
&lt;li&gt;long 64位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浮点数
&lt;ul&gt;
&lt;li&gt;float 32位 +f&lt;/li&gt;
&lt;li&gt;double 64位 +d&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符（相当于一个整型ASCII值，可参加表达式运算）
&lt;ul&gt;
&lt;li&gt;char 16位，2个字节&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符串（代表一个地址值）
&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;布尔常量
&lt;ul&gt;
&lt;li&gt;boolean
&lt;ul&gt;
&lt;li&gt;true&lt;/li&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;变量&#34;&gt;变量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;程序运行期间会产生一些临时数据，保存在一些内存单元中，用一个标识符来表示，称之为变量&lt;/li&gt;
&lt;li&gt;声明变量时候要指定变量的数据类型 赋值时候需要相互匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类型转换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动类型转换
&lt;ul&gt;
&lt;li&gt;两种数据彼此兼容&lt;/li&gt;
&lt;li&gt;目标类型的取值范围大于源类型取值范围&lt;/li&gt;
&lt;li&gt;例如：byte类型转换至short, int, double等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;强制类型转换
&lt;ul&gt;
&lt;li&gt;两种类型彼此不兼容&lt;/li&gt;
&lt;li&gt;目标类型的取值范围小于源类型&lt;/li&gt;
&lt;li&gt;会造成精度丢失&lt;/li&gt;
&lt;li&gt;格式：目标类型 变量 = （目标类型）值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作用域&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量需要在作用范围内才可以被使用&lt;/li&gt;
&lt;li&gt;一般定义在某一对大括号中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;运算符&#34;&gt;运算符&lt;/h3&gt;
&lt;p&gt;算数运算符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;+&lt;/li&gt;
&lt;li&gt;-&lt;/li&gt;
&lt;li&gt;*&lt;/li&gt;
&lt;li&gt;/ 整数相除为整,有小数参与则为小数&lt;/li&gt;
&lt;li&gt;% 正负结果取决于左边（被模数）&lt;/li&gt;
&lt;li&gt;++ 算数符号在前先自增&lt;/li&gt;
&lt;li&gt;&amp;ndash; 算数符号在前先自减&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;赋值运算符（会自动完成强制类型转换）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;=&lt;/li&gt;
&lt;li&gt;+=&lt;/li&gt;
&lt;li&gt;-=&lt;/li&gt;
&lt;li&gt;*=&lt;/li&gt;
&lt;li&gt;/=&lt;/li&gt;
&lt;li&gt;%=&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比较运算符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;==&lt;/li&gt;
&lt;li&gt;!=&lt;/li&gt;
&lt;li&gt;&amp;lt; &amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;= &amp;gt;=&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;逻辑运算符（用于布尔运算，结果仍为布尔型）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;amp; 与&lt;/li&gt;
&lt;li&gt;| 或&lt;/li&gt;
&lt;li&gt;^ 异或&lt;/li&gt;
&lt;li&gt;! 非&lt;/li&gt;
&lt;li&gt;&amp;amp;&amp;amp; 短路与&lt;/li&gt;
&lt;li&gt;|| 短路或&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运算符优先级&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;. [] ()&lt;/li&gt;
&lt;li&gt;++ - - ~ !&lt;/li&gt;
&lt;li&gt;* / %&lt;/li&gt;
&lt;li&gt;+ -&lt;/li&gt;
&lt;li&gt;&amp;laquo; &amp;raquo; &amp;raquo;&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt; &amp;gt; &amp;lt;= &amp;gt;=&lt;/li&gt;
&lt;li&gt;== !=&lt;/li&gt;
&lt;li&gt;&amp;amp;&lt;/li&gt;
&lt;li&gt;^&lt;/li&gt;
&lt;li&gt;|&lt;/li&gt;
&lt;li&gt;&amp;amp;&amp;amp;&lt;/li&gt;
&lt;li&gt;||&lt;/li&gt;
&lt;li&gt;?&lt;/li&gt;
&lt;li&gt;赋值运算符&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;选择结构&#34;&gt;选择结构&lt;/h3&gt;
&lt;p&gt;if&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if&lt;/li&gt;
&lt;li&gt;if&amp;hellip;else&lt;/li&gt;
&lt;li&gt;if&amp;hellip;else if&amp;hellip;else&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;statement1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;statement2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;statement3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;switch&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语句类型
&lt;ul&gt;
&lt;li&gt;byte&lt;/li&gt;
&lt;li&gt;short&lt;/li&gt;
&lt;li&gt;char&lt;/li&gt;
&lt;li&gt;int&lt;/li&gt;
&lt;li&gt;枚举&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;语句&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;statement1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;statement2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;  default:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;statement3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;循环结构&#34;&gt;循环结构&lt;/h3&gt;
&lt;p&gt;while循环&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;while&lt;/li&gt;
&lt;li&gt;do&amp;hellip;while&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// while循环
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// do...while循环
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;for循环&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;初始化&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;条件&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;操作表达式&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;方法&#34;&gt;方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;声明方法&lt;/li&gt;
&lt;li&gt;重载方法：允许在一个程序中定义多个名称相同的方法，但是参数类型/个数必须不同&lt;/li&gt;
&lt;li&gt;调用方法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 声明方法的基本语法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;修饰符&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;返回值类型&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;方法名&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;参数类型&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;参数1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;执行语句&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;返回值&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 示例
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;printHello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;数组&#34;&gt;数组&lt;/h3&gt;
&lt;p&gt;一组数据的集合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以存放任意类型的元素&lt;/li&gt;
&lt;li&gt;同个数组类型必须一致&lt;/li&gt;
&lt;li&gt;引用为null时会发生空指针异常&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数组元素默认值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;byte, short, int, long - 0&lt;/li&gt;
&lt;li&gt;float, double - 0.0&lt;/li&gt;
&lt;li&gt;char - 空字符&#39;\u0000&#39;&lt;/li&gt;
&lt;li&gt;boolean - false&lt;/li&gt;
&lt;li&gt;引用数据类型 - null&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 定义数组
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 静态初始化
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;元素&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;元素&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,...}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 静态初始化简便写法（建议）
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;元素&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;元素&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;遍历数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 通过index来访问元素
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;多维数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 定义一个m*n的多维数组
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[][]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;引用&#34;&gt;引用&lt;/h3&gt;
&lt;p&gt;Java是按值传递参数，在将一个参数传入一个方法时，本质上是将对象的地址以值的方式传递到形参中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法得到的是所有参数值的一个拷贝，不能修改传递给它的任何参数变量内容&lt;/li&gt;
&lt;li&gt;对象引用作为参数则指向通过同一个对象（如数组），外部引用对象的改变会反映到所对应的对象上&lt;/li&gt;
&lt;li&gt;一个方法可以改变一个对象参数的状态&lt;/li&gt;
&lt;li&gt;一个方法不能让对象参数引用一个新的对象&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>xDeepFM for Recommender Systems</title>
      <link>https://www.pseudoyu.com/zh/2020/11/11/comp7404_group_project/</link>
      <pubDate>Wed, 11 Nov 2020 16:30:25 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/11/11/comp7404_group_project/</guid>
      
        <description>&lt;h1 id=&#34;xdeepfm-for-recommender-systems&#34;&gt;xDeepFM for Recommender Systems&lt;/h1&gt;
&lt;p&gt;eXtreme Deep Factorization Machine (&lt;a href=&#34;https://arxiv.org/abs/1803.05170&#34;&gt;xDeepFM&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This paper proposes a novel Compressed Interaction Network (CIN), which aims to generate feature interactions in an explicit fashion and at the vector-wise level.&lt;/p&gt;
&lt;h2 id=&#34;github-repository&#34;&gt;Github Repository&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pseudoyu/xDeepFM_for_Recommender_Systems&#34;&gt;GitHub: xDeepFM_for_Recommender_Systems&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;video-demo&#34;&gt;Video Demo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=rFEGAtTZLyQ&#34;&gt;YouTube&lt;/a&gt; | &lt;a href=&#34;https://drive.google.com/file/d/1qPx6H9R1b-EDP7HZpAg5bDjkzR8QEHnR/view?usp=sharing&#34;&gt;Google Drive&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;datasets&#34;&gt;Datasets&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://labs.criteo.com/2014/02/kaggle-display-advertising-challenge-dataset/&#34;&gt;Criteo Dataset&lt;/a&gt;.&lt;/strong&gt; It is a famous industry benchmarking dataset for developing models predicting ad click-through rate, and is publicly accessible. Given a user and the page he is visiting, the goal is to predict the probability that he will clik on a given ad&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;running-environment&#34;&gt;Running Environment&lt;/h2&gt;
&lt;p&gt;I strongly recommmend that you use &lt;a href=&#34;https://www.anaconda.com&#34;&gt;Anaconda&lt;/a&gt; to implement this project. Here are some simple instructions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download a suitable version (&lt;a href=&#34;https://repo.anaconda.com/archive/Anaconda3-2020.07-Windows-x86_64.exe&#34;&gt;Windows&lt;/a&gt;/&lt;a href=&#34;https://repo.anaconda.com/archive/Anaconda3-2020.07-MacOSX-x86_64.pkg&#34;&gt;MacOS&lt;/a&gt;/&lt;a href=&#34;https://repo.anaconda.com/archive/Anaconda3-2020.07-Linux-x86_64.sh&#34;&gt;Linux&lt;/a&gt;)  for your OS and install it (check for latest version from &lt;a href=&#34;https://www.anaconda.com&#34;&gt;Anaconda&lt;/a&gt;)
&lt;ol&gt;
&lt;li&gt;On Windows or MacOS, you can just use the &lt;em&gt;.exe&lt;/em&gt; or &lt;em&gt;.pkg&lt;/em&gt; installer and follow the instructions&lt;/li&gt;
&lt;li&gt;On Linux, you may need to run &lt;code&gt;bash ./.Anaconda3-2020.07-Linux-x86_64.sh&lt;/code&gt; in the same directory of the downloaded &lt;em&gt;.sh&lt;/em&gt; file to allow the installer to initialize Anaconda3 in your .bashrc&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Create a dedicated Conda environment for this project (strongly recommended)
&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;conda create -n xdeepfm python=3.6&lt;/code&gt; and enter &lt;code&gt;y&lt;/code&gt; to create the conda environment&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;conda activate xdeepfm&lt;/code&gt; to activate the project environment&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;pip install -r requirements.txt&lt;/code&gt; to install the package dependencies&lt;/li&gt;
&lt;li&gt;Now you can run the code simply through &lt;code&gt;python main.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; YouPath/xDeepFM_for_Recommender_Systems/exdeepfm
bash ./.Anaconda3-2020.07-Linux-x86_64.sh
conda create -n xdeepfm &lt;span class=&#34;nv&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;3.6
conda activate xdeepfm
pip install -r requirements.txt
python main.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;absl-py==0.8.1&lt;/li&gt;
&lt;li&gt;astor==0.8.0&lt;/li&gt;
&lt;li&gt;gast==0.3.2&lt;/li&gt;
&lt;li&gt;google-pasta==0.1.7&lt;/li&gt;
&lt;li&gt;grpcio==1.24.3&lt;/li&gt;
&lt;li&gt;h5py==2.10.0&lt;/li&gt;
&lt;li&gt;joblib==0.14.0&lt;/li&gt;
&lt;li&gt;Keras-Applications==1.0.8&lt;/li&gt;
&lt;li&gt;Keras-Preprocessing==1.1.0&lt;/li&gt;
&lt;li&gt;Markdown==3.1.1&lt;/li&gt;
&lt;li&gt;numpy==1.17.3&lt;/li&gt;
&lt;li&gt;packaging==19.2&lt;/li&gt;
&lt;li&gt;protobuf==3.10.0&lt;/li&gt;
&lt;li&gt;pyparsing==2.4.2&lt;/li&gt;
&lt;li&gt;PyYAML==5.1.2&lt;/li&gt;
&lt;li&gt;scikit-learn==0.21.3&lt;/li&gt;
&lt;li&gt;scipy==1.3.1&lt;/li&gt;
&lt;li&gt;six==1.12.0&lt;/li&gt;
&lt;li&gt;sklearn==0.0&lt;/li&gt;
&lt;li&gt;tensorboard==1.14.0&lt;/li&gt;
&lt;li&gt;tensorflow==1.14.0&lt;/li&gt;
&lt;li&gt;tensorflow-estimator==1.14.0&lt;/li&gt;
&lt;li&gt;termcolor==1.1.0&lt;/li&gt;
&lt;li&gt;Werkzeug==0.16.0&lt;/li&gt;
&lt;li&gt;wrapt==1.11.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;running-results&#34;&gt;Running Results&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/comp7404_screenshot1.png&#34; alt=&#34;comp7404_screenshot1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;hellip;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/comp7404_screenshot2.png&#34; alt=&#34;comp7404_screenshot2&#34;&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>ICOM6045 Topic 1 Cryptography</title>
      <link>https://www.pseudoyu.com/zh/2020/10/21/icom6045_topic1/</link>
      <pubDate>Wed, 21 Oct 2020 19:53:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/21/icom6045_topic1/</guid>
      
        <description>&lt;h1 id=&#34;icom6045-fundamentals-of-e-commerce-security&#34;&gt;ICOM6045 Fundamentals of E-Commerce Security&lt;/h1&gt;
&lt;h2 id=&#34;topic-1-cryptography&#34;&gt;Topic 1 Cryptography&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/cryptography.svg&#34; alt=&#34;cryptography&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Process of transforming information to make it unreadable to anyone except those possessing the key&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Data confidentiality&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;transpositionspermutations&#34;&gt;Transpositions/Permutations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;An encryption in which the letters of the message are rearranged&lt;/li&gt;
&lt;li&gt;Function
&lt;ul&gt;
&lt;li&gt;Try to break established patterns&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example
&lt;ul&gt;
&lt;li&gt;Columnar transposition
&lt;ul&gt;
&lt;li&gt;Rearrangement of the characters of the plaintext into columns&lt;/li&gt;
&lt;li&gt;Based on characteristic patterns of pairs of adjacent letters, called digrams&lt;/li&gt;
&lt;li&gt;Analysis
&lt;ul&gt;
&lt;li&gt;Compute the letter frequencies
&lt;ul&gt;
&lt;li&gt;Break the text into columns by compare a block of ciphertext characters against characters successively farther away in the ciphertext.&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Do common digrams appear.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Do most of the digram look reasonable&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complexity
&lt;ul&gt;
&lt;li&gt;No additional work&lt;/li&gt;
&lt;li&gt;Require storage for all characters of the message&lt;/li&gt;
&lt;li&gt;Not good for long message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Alternative
&lt;ul&gt;
&lt;li&gt;Permute the characters of the plaintext with a fixed period d&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;confusion&#34;&gt;Confusion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cipher that makes relationship between the plaintext/key pair and the ciphertext as complex as possible&lt;/li&gt;
&lt;li&gt;Good confusion
&lt;ul&gt;
&lt;li&gt;poly-alphabetic substitution with a long key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bad confusion
&lt;ul&gt;
&lt;li&gt;Caesar cipher&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;diffusion&#34;&gt;Diffusion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cipher that spreads the information from the plaintext over the entire ciphertext&lt;/li&gt;
&lt;li&gt;Change in the plaintext should affect many parts of the ciphertext&lt;/li&gt;
&lt;li&gt;Good diffusion
&lt;ul&gt;
&lt;li&gt;DES&lt;/li&gt;
&lt;li&gt;Transposition cipher&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bad diffusion
&lt;ul&gt;
&lt;li&gt;Substitutin cipher&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cryptanalysis&#34;&gt;Cryptanalysis&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Index of coincidence (A tool to rate how wella particular distribution
matches the distribution of letter in English)&lt;/li&gt;
&lt;li&gt;Procedure
&lt;ul&gt;
&lt;li&gt;Measure of roughness(variance)&lt;/li&gt;
&lt;li&gt;If the distribution is perfectly flat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Examine
&lt;ul&gt;
&lt;li&gt;Is it encrypted&lt;/li&gt;
&lt;li&gt;How is it encrypted&lt;/li&gt;
&lt;li&gt;What is the key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;types&#34;&gt;Types&lt;/h2&gt;
&lt;h3 id=&#34;symmetric-key-encryption&#34;&gt;Symmetric Key Encryption&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Procedure (Single key)
&lt;ul&gt;
&lt;li&gt;Original message&lt;/li&gt;
&lt;li&gt;Key -&amp;gt; Encryption algorithm&lt;/li&gt;
&lt;li&gt;Encrypted message&lt;/li&gt;
&lt;li&gt;Encrypted message sent over Internet&lt;/li&gt;
&lt;li&gt;Encrypted message arrives destination&lt;/li&gt;
&lt;li&gt;Key -&amp;gt; Decryption algorithm&lt;/li&gt;
&lt;li&gt;Original message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Algorithms
&lt;ul&gt;
&lt;li&gt;DES(Data Encryption Standard)
&lt;ul&gt;
&lt;li&gt;Most commonly used block cipher&lt;/li&gt;
&lt;li&gt;Purpose
&lt;ul&gt;
&lt;li&gt;Facilitate hardware implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Form
&lt;ul&gt;
&lt;li&gt;A block cipher with 56-bit key (64-bit including parity bits)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Feistel&amp;rdquo; network structure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AES(Advanced Encryption Standard)&lt;/li&gt;
&lt;li&gt;RC4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stream cipher
&lt;ul&gt;
&lt;li&gt;Definition
&lt;ul&gt;
&lt;li&gt;Convert one symbol of plaintext immediately into a symbol of ciphertext&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advantage
&lt;ul&gt;
&lt;li&gt;Speed of transformation&lt;/li&gt;
&lt;li&gt;Low error propagation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disadvantage
&lt;ul&gt;
&lt;li&gt;Low diffusion&lt;/li&gt;
&lt;li&gt;Possible for malicious insertions and modifications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Block cipher
&lt;ul&gt;
&lt;li&gt;Definition
&lt;ul&gt;
&lt;li&gt;Encrypt a group of plaintext symbol as one block&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advantage
&lt;ul&gt;
&lt;li&gt;Diffusion&lt;/li&gt;
&lt;li&gt;Immunity to insertion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disadvantage
&lt;ul&gt;
&lt;li&gt;Slowness of encryption&lt;/li&gt;
&lt;li&gt;Error propagation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kasiski method
&lt;ul&gt;
&lt;li&gt;Search for repeated sequence of characters&lt;/li&gt;
&lt;li&gt;Example
&lt;ul&gt;
&lt;li&gt;3 occurrences of the 11-character sequence&lt;/li&gt;
&lt;li&gt;Distance between first 2 sequence = 141- 90 = 51&lt;/li&gt;
&lt;li&gt;Distance between second 2 sequences = 213 - 141 = 72&lt;/li&gt;
&lt;li&gt;The common divisor between 51 and 72 is 3&lt;/li&gt;
&lt;li&gt;Estimated key length is 3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Perfect&amp;rdquo; substitution cipher
&lt;ul&gt;
&lt;li&gt;Definition
&lt;ul&gt;
&lt;li&gt;Many alphabets for an unrecognizable distribution&lt;/li&gt;
&lt;li&gt;No apparent pattern for the choice of an alphabet at a particular point&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Function
&lt;ul&gt;
&lt;li&gt;Confuse the Kasiski method&lt;/li&gt;
&lt;li&gt;Index of coincidence would be close to 0.038&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Application
&lt;ul&gt;
&lt;li&gt;Caesar cipher
&lt;ul&gt;
&lt;li&gt;Definition
&lt;ul&gt;
&lt;li&gt;The message is enciphered with a 27-symbol alphabet (A-&amp;gt;Z) and the blank, the blank is translated to itself&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Permutation
&lt;ul&gt;
&lt;li&gt;Each letter is translated to a fixed number of letters after it in the alphabet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &amp;ldquo;real&amp;rdquo; Caessar cipher by Julius Caesar used a shift of 3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mono-alphabetic substitutions
&lt;ul&gt;
&lt;li&gt;Definition
&lt;ul&gt;
&lt;li&gt;The alphabet is scrambled, and each plaintext letter maps to a unique ciphertext letter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Permutation
&lt;ul&gt;
&lt;li&gt;A permutation is a recording of the elements of a series&lt;/li&gt;
&lt;li&gt;A permutation can be a function&lt;/li&gt;
&lt;li&gt;Some permutations can&amp;rsquo;t be represented as simple equation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Weakness
&lt;ul&gt;
&lt;li&gt;Frequency distribution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Polyalphabetic substitutions
&lt;ul&gt;
&lt;li&gt;Definition
&lt;ul&gt;
&lt;li&gt;Combine distributions that are high with ones that are low&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analysis
&lt;ul&gt;
&lt;li&gt;Use Kasiski method to predict likely numbers of enciphering alphabets&lt;/li&gt;
&lt;li&gt;If no numbers emerge fairly regularly, may not a poly-alphabetic substitution&lt;/li&gt;
&lt;li&gt;Compute the index of coincidence to validate the predictions from step 1&lt;/li&gt;
&lt;li&gt;When step 1 and 3 indicate a promising value, separate the ciphertext into appropriate subsets and independently compute index of coincidence of each subset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example
&lt;ul&gt;
&lt;li&gt;Rotor Machines&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vigenere cipher
&lt;ul&gt;
&lt;li&gt;Definition
&lt;ul&gt;
&lt;li&gt;Vigenere tableau
&lt;ul&gt;
&lt;li&gt;A collection of 26 permutations&lt;/li&gt;
&lt;li&gt;Written in a 26*26 matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Permutation
&lt;ul&gt;
&lt;li&gt;Use a key (keyword) -&amp;gt; select  particular permutaion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;One-time pad
&lt;ul&gt;
&lt;li&gt;Definition
&lt;ul&gt;
&lt;li&gt;Based on a large nonrepeating set of keys (written on paper and glued together into a pad)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Procedure
&lt;ul&gt;
&lt;li&gt;Sender writes key one time above the letters of the plaintext&lt;/li&gt;
&lt;li&gt;Encipher the plaintext with a chart like Vigenere tableau&lt;/li&gt;
&lt;li&gt;Sender destroys the key&lt;/li&gt;
&lt;li&gt;Receiver takes the appropriate number of keys&lt;/li&gt;
&lt;li&gt;Decipher the message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example
&lt;ul&gt;
&lt;li&gt;Vernam cipher
&lt;ul&gt;
&lt;li&gt;Involves an arbitrarily long nonrepeating sequence of numbers that are combined with the plaintext&lt;/li&gt;
&lt;li&gt;Possible attack
&lt;ul&gt;
&lt;li&gt;Random number generator&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;public-key-encryption&#34;&gt;Public Key Encryption&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Procedure (Everyone has 2 keys)
&lt;ul&gt;
&lt;li&gt;Original message&lt;/li&gt;
&lt;li&gt;Encryption key -&amp;gt; Encryption algorithm
&lt;ul&gt;
&lt;li&gt;Plaintext &amp;lt;- Encryption
&lt;ul&gt;
&lt;li&gt;The original form of a message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ciphertext &amp;lt;- Decryption
&lt;ul&gt;
&lt;li&gt;The encrypted form a message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Original plaintext&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Encrypted message&lt;/li&gt;
&lt;li&gt;Encrypted message sent over Internet&lt;/li&gt;
&lt;li&gt;Encrypted message arrives destination&lt;/li&gt;
&lt;li&gt;Decryption key -&amp;gt; Decryption algorithm&lt;/li&gt;
&lt;li&gt;Original message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Algorithms
&lt;ul&gt;
&lt;li&gt;RSA&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>ICOM6012 Topic 4 Transport Layer</title>
      <link>https://www.pseudoyu.com/zh/2020/10/20/icom6012_topic4/</link>
      <pubDate>Tue, 20 Oct 2020 09:37:44 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/20/icom6012_topic4/</guid>
      
        <description>&lt;h1 id=&#34;icom6012-internet-infrastructure-technologies&#34;&gt;ICOM6012 Internet Infrastructure Technologies&lt;/h1&gt;
&lt;h2 id=&#34;topic-4-transport-layer&#34;&gt;Topic 4 Transport Layer&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/transport_layer.svg&#34; alt=&#34;transport_layer.svg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;actions&#34;&gt;Actions&lt;/h2&gt;
&lt;h3 id=&#34;sender&#34;&gt;Sender&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Get application layer message&lt;/li&gt;
&lt;li&gt;Determine segment header fields values&lt;/li&gt;
&lt;li&gt;Create segment&lt;/li&gt;
&lt;li&gt;Pass segment to IP&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;receiver&#34;&gt;Receiver&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Receive segment from IP&lt;/li&gt;
&lt;li&gt;Check header values&lt;/li&gt;
&lt;li&gt;Extract application layer message&lt;/li&gt;
&lt;li&gt;Demultiplexes message up to application via socket&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;services&#34;&gt;Services&lt;/h2&gt;
&lt;h3 id=&#34;provide-logical-communication-between-processes&#34;&gt;Provide logical communication between processes&lt;/h3&gt;
&lt;h3 id=&#34;run-in-end-system&#34;&gt;Run in end system&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Send side
&lt;ul&gt;
&lt;li&gt;Break app messages into segment&lt;/li&gt;
&lt;li&gt;Pass to network layer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Receive side
&lt;ul&gt;
&lt;li&gt;Reassembles segments into messages&lt;/li&gt;
&lt;li&gt;Pass to application layer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;protocols&#34;&gt;Protocols&lt;/h2&gt;
&lt;h3 id=&#34;tcp&#34;&gt;TCP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Features
&lt;ul&gt;
&lt;li&gt;Point-to-point
&lt;ul&gt;
&lt;li&gt;One sender, one receiver&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reliable, in-order byte system
&lt;ul&gt;
&lt;li&gt;No message boundaries&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Full duplex data
&lt;ul&gt;
&lt;li&gt;Bi-directional data flow in same connection&lt;/li&gt;
&lt;li&gt;MSS: maximum segment size (excluding header)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cumulative ACKs&lt;/li&gt;
&lt;li&gt;Pipelining
&lt;ul&gt;
&lt;li&gt;TCP congestion and flow control set window size&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flow Control
&lt;ul&gt;
&lt;li&gt;Sender will not overwhelm receiver&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Congestion control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Concepts
&lt;ul&gt;
&lt;li&gt;Segment structure&lt;/li&gt;
&lt;li&gt;Sequence numbers
&lt;ul&gt;
&lt;li&gt;Byte stream &amp;ldquo;number&amp;rdquo; of first byte in segment&amp;rsquo;s data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Acknowledgements (ACKs)
&lt;ul&gt;
&lt;li&gt;Seq # of next byte expected from other side&lt;/li&gt;
&lt;li&gt;Cumulative ACKs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Procedure
&lt;ul&gt;
&lt;li&gt;Connection-oriented
&lt;ul&gt;
&lt;li&gt;Handshaking initializes sender, receiver state before data exchange&lt;/li&gt;
&lt;li&gt;TCP socket identified by 4-tuple
&lt;ul&gt;
&lt;li&gt;Source IP&lt;/li&gt;
&lt;li&gt;Source Port #&lt;/li&gt;
&lt;li&gt;Dest IP&lt;/li&gt;
&lt;li&gt;Dest Port #&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server host may support many simultaneous TCP sockets&lt;/li&gt;
&lt;li&gt;Web servers have different sockets for each connecting client
(Non-persistent HTTP will have different socket for each request)&lt;/li&gt;
&lt;li&gt;Demux
&lt;ul&gt;
&lt;li&gt;Receiver uses all four values to direct segment to appropriate socket&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3-way handshake
&lt;ul&gt;
&lt;li&gt;Connection setup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Connection management
&lt;ul&gt;
&lt;li&gt;Handshake
&lt;ul&gt;
&lt;li&gt;Agree to establish connection&lt;/li&gt;
&lt;li&gt;Agree on connection parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Retransmission&lt;/li&gt;
&lt;li&gt;Closing a connection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Events
&lt;ul&gt;
&lt;li&gt;Data received from application
&lt;ul&gt;
&lt;li&gt;Create segment with seq # (a byte-stream number of first data byte in segment)&lt;/li&gt;
&lt;li&gt;Start timer if not already running
&lt;ul&gt;
&lt;li&gt;Think of timer as for oldest unACKed segment&lt;/li&gt;
&lt;li&gt;Expiration interval: TimeOutInterval&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Timeout
&lt;ul&gt;
&lt;li&gt;Retransmit segment that caused timeout&lt;/li&gt;
&lt;li&gt;Restart timer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ACK received
&lt;ul&gt;
&lt;li&gt;Update what is known to ACKed&lt;/li&gt;
&lt;li&gt;Start timer if there are still unACKed segment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shortcomings
&lt;ul&gt;
&lt;li&gt;SYN DoS Attack
&lt;ul&gt;
&lt;li&gt;Half-open TCP connections consume all the TCP connection resources&lt;/li&gt;
&lt;li&gt;SYN packet with a spoofed source address&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;udp&#34;&gt;UDP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Features&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No frills&lt;/li&gt;
&lt;li&gt;Bare bones&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Best effort&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;Lost&lt;/li&gt;
&lt;li&gt;Delivered out-of-order to app&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No handshaking&lt;/li&gt;
&lt;li&gt;Handle independently&lt;/li&gt;
&lt;li&gt;Services not available
&lt;ul&gt;
&lt;li&gt;Delay guarantee&lt;/li&gt;
&lt;li&gt;Bandwidth guarantee&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Concepts&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Segment format
&lt;ul&gt;
&lt;li&gt;Source port #&lt;/li&gt;
&lt;li&gt;Dest port #&lt;/li&gt;
&lt;li&gt;Length&lt;/li&gt;
&lt;li&gt;Checksum
&lt;ul&gt;
&lt;li&gt;Detect errors
&lt;ul&gt;
&lt;li&gt;Sender
&lt;ul&gt;
&lt;li&gt;Treat segement contents&lt;/li&gt;
&lt;li&gt;Checksum: 1&amp;rsquo;s complement sum&lt;/li&gt;
&lt;li&gt;Put checksum into UDP field value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Receiver
&lt;ul&gt;
&lt;li&gt;Compute checksum of received segment&lt;/li&gt;
&lt;li&gt;Check equality
&lt;ul&gt;
&lt;li&gt;No: error detected&lt;/li&gt;
&lt;li&gt;Yes: no error detected (not sure)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Checksum calculation may be disabled in order to speed up the processing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Procedure&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connectionless demux
&lt;ul&gt;
&lt;li&gt;Create socket with unique local port #&lt;/li&gt;
&lt;li&gt;Sender side: create datagram to send into UDP socket
&lt;ul&gt;
&lt;li&gt;Dest IP&lt;/li&gt;
&lt;li&gt;Dest port #&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Receive side: receive UDP segment
(IP datagrams with same dest port #, but different source will be directed to same socket)
&lt;ul&gt;
&lt;li&gt;Check dest port #&lt;/li&gt;
&lt;li&gt;Direct UDP segment to socket with that port #&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Utilization&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Streaming multimedia apps
&lt;ul&gt;
&lt;li&gt;Loss tolerant&lt;/li&gt;
&lt;li&gt;Rate sensitive&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNS&lt;/li&gt;
&lt;li&gt;SNMP&lt;/li&gt;
&lt;li&gt;HTTP/3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shortcomings&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Need reliability at application layer&lt;/li&gt;
&lt;li&gt;Congestion control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sctp&#34;&gt;SCTP&lt;/h3&gt;
&lt;h3 id=&#34;dccp&#34;&gt;DCCP&lt;/h3&gt;
&lt;h2 id=&#34;multiplexing-and-demultiplexing&#34;&gt;Multiplexing and Demultiplexing&lt;/h2&gt;
&lt;h3 id=&#34;multiplexing-at-sender&#34;&gt;Multiplexing at sender&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Handle data from multiple sockets, add transport header&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;demultiplexing-at-receiver&#34;&gt;Demultiplexing at receiver&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Handle data info to deliver received segments to correct socket&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;host-receivers-ip-datagram-host-uses-ip--port--to-redirect-segment&#34;&gt;Host receivers IP datagram (Host uses IP &amp;amp; port # to redirect segment)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Source IP&lt;/li&gt;
&lt;li&gt;Dest IP&lt;/li&gt;
&lt;li&gt;One transport layer segment
&lt;ul&gt;
&lt;li&gt;Source port #&lt;/li&gt;
&lt;li&gt;Dest port #&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;congestion-control&#34;&gt;Congestion Control&lt;/h2&gt;
&lt;h3 id=&#34;cause&#34;&gt;Cause&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Too many sources sending too much data too fast for network to handle&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;manifestations&#34;&gt;Manifestations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Long delay
&lt;ul&gt;
&lt;li&gt;Queueing in router buffers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Packet loss
&lt;ul&gt;
&lt;li&gt;Buffer overflow at network&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;approaches&#34;&gt;Approaches&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;End-end congestion control
&lt;ul&gt;
&lt;li&gt;Features
&lt;ul&gt;
&lt;li&gt;No explicit feedback from network&lt;/li&gt;
&lt;li&gt;Congestion inferred from observed loss, delay&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Network-assisted congestion control
&lt;ul&gt;
&lt;li&gt;Features
&lt;ul&gt;
&lt;li&gt;Routers provide direct feedback to hosts with flow passing through congested router&lt;/li&gt;
&lt;li&gt;May indicate congestion level or explicit set sending rate&lt;/li&gt;
&lt;li&gt;TCP ECN ATM DECbit protocols&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp-congestion-control&#34;&gt;TCP Congestion Control&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;AIMD
&lt;ul&gt;
&lt;li&gt;Sender can increase sending rate until packet loss occurs, then decrease&lt;/li&gt;
&lt;li&gt;Additive increase
&lt;ul&gt;
&lt;li&gt;1 MSS (maximum segment size) until loss detected&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multiplicative decrease
&lt;ul&gt;
&lt;li&gt;Cut sending rate in half at each loss event&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Detecting, reacting to loss
&lt;ul&gt;
&lt;li&gt;ACKs problem
&lt;ul&gt;
&lt;li&gt;cwnd is cut in half&lt;/li&gt;
&lt;li&gt;Window grow linearly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Timeout event
&lt;ul&gt;
&lt;li&gt;cwnd is set to 1 MSS&lt;/li&gt;
&lt;li&gt;Window grow exponentially to threshold, then linearly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TCP slow start
&lt;ul&gt;
&lt;li&gt;Initially cwnd = 1 MSS&lt;/li&gt;
&lt;li&gt;Double cwnd every RTT&lt;/li&gt;
&lt;li&gt;Done by incrementing cwnd for every ACK received&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>ICOM6012 Topic 3 Application Layer</title>
      <link>https://www.pseudoyu.com/zh/2020/10/19/icom6012_topic3/</link>
      <pubDate>Mon, 19 Oct 2020 17:50:44 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/19/icom6012_topic3/</guid>
      
        <description>&lt;h1 id=&#34;icom6012-internet-infrastructure-technologies&#34;&gt;ICOM6012 Internet Infrastructure Technologies&lt;/h1&gt;
&lt;h2 id=&#34;topic-3-application-layer&#34;&gt;Topic 3 Application Layer&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Creating a Network App&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run on different end systems&lt;/li&gt;
&lt;li&gt;Communication over network&lt;/li&gt;
&lt;li&gt;No need to write for network-core devices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Client-Server Architecture (The Centralized Internet)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server
&lt;ul&gt;
&lt;li&gt;Always-on host&lt;/li&gt;
&lt;li&gt;Permanent IP address&lt;/li&gt;
&lt;li&gt;Often in data centers (for scaling)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clients
&lt;ul&gt;
&lt;li&gt;Contact, communicate with server&lt;/li&gt;
&lt;li&gt;May be intermittently connected&lt;/li&gt;
&lt;li&gt;May have dynamic IP addresses&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t communicate directly with each other&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Peer-to-Peer (P2P) Architecture&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No always-on server&lt;/li&gt;
&lt;li&gt;Arbitrary end systems directly communicate&lt;/li&gt;
&lt;li&gt;Peers request service from other peers, providing service in return to other peers
&lt;ul&gt;
&lt;li&gt;Self scalability - new peers bring new service capacity, as well as new service demands&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Peers are intermittently connected with dynamic IP addresses
&lt;ul&gt;
&lt;li&gt;Complex management&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Processes Communicating&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Process: program running within a host
&lt;ul&gt;
&lt;li&gt;Same host
&lt;ul&gt;
&lt;li&gt;Inter-process communication (defined by OS)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Different hosts
&lt;ul&gt;
&lt;li&gt;Exchanging messages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Client, servers
&lt;ul&gt;
&lt;li&gt;Client process: process that initiates communication&lt;/li&gt;
&lt;li&gt;Server process: process that waits to be contacted&lt;/li&gt;
&lt;li&gt;Applications with P2P architecture have both&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sockets&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Process sends/receives messages to/from its socket&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/sockets.png&#34; alt=&#34;sockets&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Addressing Processes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To receive messages, process must have identifier
&lt;ul&gt;
&lt;li&gt;IP address
&lt;ul&gt;
&lt;li&gt;Host has unique 32-bits IP address&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Port number
&lt;ul&gt;
&lt;li&gt;Port 0 - 1023: Well-known
&lt;ul&gt;
&lt;li&gt;HTTP server: 80&lt;/li&gt;
&lt;li&gt;Mail server: 25&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Port 1024 - 49151: Registered ports&lt;/li&gt;
&lt;li&gt;Port &amp;gt; 49151: Dynamic/private ports&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;An Application-Layer Protocol Defines&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Types of messages exchanged
&lt;ul&gt;
&lt;li&gt;Request&lt;/li&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Message syntax
&lt;ul&gt;
&lt;li&gt;What field&lt;/li&gt;
&lt;li&gt;How fields are delineated&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Message semantics
&lt;ul&gt;
&lt;li&gt;Meaning of information in fields&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rules
&lt;ul&gt;
&lt;li&gt;When and how process send &amp;amp; respond to messages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protocols
&lt;ul&gt;
&lt;li&gt;Open protocols
&lt;ul&gt;
&lt;li&gt;Defined in RFCs (by IETF)&lt;/li&gt;
&lt;li&gt;Everyone has access to protocol definition&lt;/li&gt;
&lt;li&gt;Allow for interoperability&lt;/li&gt;
&lt;li&gt;Example
&lt;ul&gt;
&lt;li&gt;HTTP&lt;/li&gt;
&lt;li&gt;SMTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Proprietary protocols
&lt;ul&gt;
&lt;li&gt;Skype&lt;/li&gt;
&lt;li&gt;Zoom&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Transport Service&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data integrity&lt;/li&gt;
&lt;li&gt;Timing&lt;/li&gt;
&lt;li&gt;Throughput&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/transport_service.png&#34; alt=&#34;transport_service&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Internet Transport Protocols Services&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP service
&lt;ul&gt;
&lt;li&gt;Connection-oriented&lt;/li&gt;
&lt;li&gt;Reliable transport&lt;/li&gt;
&lt;li&gt;Flow control&lt;/li&gt;
&lt;li&gt;Congestion control&lt;/li&gt;
&lt;li&gt;Doesn&amp;rsquo;t provide
&lt;ul&gt;
&lt;li&gt;Timing&lt;/li&gt;
&lt;li&gt;Minimum throughput guarantee&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UDP service
&lt;ul&gt;
&lt;li&gt;Unreliable data transfer&lt;/li&gt;
&lt;li&gt;Doesn&amp;rsquo;t provide
&lt;ul&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;li&gt;Flow control&lt;/li&gt;
&lt;li&gt;Congestion control&lt;/li&gt;
&lt;li&gt;Timing&lt;/li&gt;
&lt;li&gt;Throughput guarantee&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Connection setup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/transport_protocols.png&#34; alt=&#34;transport_protocols&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Securing TCP&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP &amp;amp; UDP
&lt;ul&gt;
&lt;li&gt;No encryption&lt;/li&gt;
&lt;li&gt;Cleartext passwords sent into socket traverse Internet in cleartext&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SSL (Secure Socket Layer) / TLS (Transport Layer Security)
&lt;ul&gt;
&lt;li&gt;Provides encrypted TCP connection&lt;/li&gt;
&lt;li&gt;Data integrity&lt;/li&gt;
&lt;li&gt;End-point authentication&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SSL/TLS is at Application Layer
&lt;ul&gt;
&lt;li&gt;Apps use SSL/TLS libraries, which &amp;ldquo;talk&amp;rdquo; to TCP&lt;/li&gt;
&lt;li&gt;Cleartext passwords sent into socket traverse Internet encrypted&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/ssl_tls.png&#34; alt=&#34;ssl_tls&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The IP Hourglass&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/ip_hourglass.png&#34; alt=&#34;ip_hourglass&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP Overview&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP: Hypertext Transfer Protocol&lt;/li&gt;
&lt;li&gt;Web&amp;rsquo;s application-layer protocol&lt;/li&gt;
&lt;li&gt;Client/Server model
&lt;ul&gt;
&lt;li&gt;Client - browser that requests, receives and &amp;ldquo;display&amp;rdquo; web objects&lt;/li&gt;
&lt;li&gt;Server - Web server sends objects in response to requests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Development
&lt;ul&gt;
&lt;li&gt;HTTP/1.0: RFC 1945 (1996)&lt;/li&gt;
&lt;li&gt;HTTP/1.1: RFC 2616 (1997)&lt;/li&gt;
&lt;li&gt;HTTP/2: RFC 7540 (2015)&lt;/li&gt;
&lt;li&gt;HTTP/3: Internet-Draft (2020)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Uses TCP
&lt;ul&gt;
&lt;li&gt;Client initiates TCP connection (create sockets) to server, port 80&lt;/li&gt;
&lt;li&gt;Server accepts TCP connection from client&lt;/li&gt;
&lt;li&gt;HTTP messages exchanged between browser and web server&lt;/li&gt;
&lt;li&gt;TCP connection closed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP is stateless
&lt;ul&gt;
&lt;li&gt;Server maintains no information about past client requests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;HTTP Connections&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Non-persistent HTTP
&lt;ul&gt;
&lt;li&gt;Downloading multiple objects required multiple connections
&lt;ul&gt;
&lt;li&gt;Sequential&lt;/li&gt;
&lt;li&gt;Parallel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Procedures
&lt;ul&gt;
&lt;li&gt;TCP connection opened&lt;/li&gt;
&lt;li&gt;At most one object sent over TCP connection&lt;/li&gt;
&lt;li&gt;TCP connection closed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS must work and allocate host resources for each TCP connection&lt;/li&gt;
&lt;li&gt;Browser often open parallel TCP connections to fetch referenced objects&lt;/li&gt;
&lt;li&gt;HTTP response time (2RTT+)
&lt;ul&gt;
&lt;li&gt;RTT: Time for a small packet to travel from client to server and back&lt;/li&gt;
&lt;li&gt;1RTT to initiate TCP connection&lt;/li&gt;
&lt;li&gt;1RTT for HTTP request and first few bytes of HTTP response to return&lt;/li&gt;
&lt;li&gt;File transmission time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Persistent HTTP
&lt;ul&gt;
&lt;li&gt;Procedures
&lt;ul&gt;
&lt;li&gt;TCP connection opened to a server&lt;/li&gt;
&lt;li&gt;Multiple objects can be sent over single TCP connection between clients and that server&lt;/li&gt;
&lt;li&gt;TCP connection closed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server leaves connection open after sending response&lt;/li&gt;
&lt;li&gt;Subsequent HTTP messages between same client/server are sent over connection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Persistent HTTP without pipelining
&lt;ul&gt;
&lt;li&gt;Client issues new request only when previous response has been received&lt;/li&gt;
&lt;li&gt;1RTT for each referenced object&lt;/li&gt;
&lt;li&gt;Head-of-line (HoL) blocking&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Persistent HTTP with pipelining
&lt;ul&gt;
&lt;li&gt;Client sends requests as soon as it encounters a referenced object&lt;/li&gt;
&lt;li&gt;As little as 1RTT for all the referenced objects&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Not activated in practice&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;HTTP Message&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Request
&lt;ul&gt;
&lt;li&gt;In ASCII (human readable format)&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/http_request.png&#34; alt=&#34;http_request&#34;&gt;&lt;/li&gt;
&lt;li&gt;Methods
&lt;ul&gt;
&lt;li&gt;POST&lt;/li&gt;
&lt;li&gt;GET&lt;/li&gt;
&lt;li&gt;HEAD&lt;/li&gt;
&lt;li&gt;PUT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Response
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/http_response.png&#34; alt=&#34;http_response&#34;&gt;&lt;/li&gt;
&lt;li&gt;Statu Code
&lt;ul&gt;
&lt;li&gt;Informational, 1XX&lt;/li&gt;
&lt;li&gt;Successful, 2XX, (200 OK)&lt;/li&gt;
&lt;li&gt;Redirection, 3XX, (301 Moved Permanently)&lt;/li&gt;
&lt;li&gt;Client Error, 4XX, (400 Bad Request, 404 Not Found)&lt;/li&gt;
&lt;li&gt;Server Error, 5XX, (505 HTTP Version Not Support)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cookies&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Components
&lt;ul&gt;
&lt;li&gt;Cookie header line of HTTP response message&lt;/li&gt;
&lt;li&gt;Cookie header line in next HTTP request message&lt;/li&gt;
&lt;li&gt;Cookie file kept on user&amp;rsquo;s host, managed by user&amp;rsquo;s browser&lt;/li&gt;
&lt;li&gt;Back-end database at website&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/cookie_example.png&#34; alt=&#34;cookie_example&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3rd-party cookies
&lt;ul&gt;
&lt;li&gt;Many sites use third party advertisements&lt;/li&gt;
&lt;li&gt;The third party can set a cookie that identifies the user&lt;/li&gt;
&lt;li&gt;This cookie is sent to the third party each time an ad is downloaded by the user’s browser along with the address of the page that contains the link to the ad&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/3_party_cookies.png&#34; alt=&#34;3_party_cookies&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Web Caches (Proxy Servers)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Goal
&lt;ul&gt;
&lt;li&gt;Satisfy client request without involving origin server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;User configures browser to point to a web cache&lt;/li&gt;
&lt;li&gt;Browser sends all HTTP requsets to cache
&lt;ul&gt;
&lt;li&gt;If object in cache: cache returns object&lt;/li&gt;
&lt;li&gt;Else: cache requests object from origin server, then returns object to client&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conditional GET&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Goal
&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t send object if cache has up-to-date cached version
&lt;ul&gt;
&lt;li&gt;No object transmission delay&lt;/li&gt;
&lt;li&gt;Lower link utilization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cache: specify date of cached copy in HTTP request&lt;/li&gt;
&lt;li&gt;Server: response contains no object if cached copy is up-to-date&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/conditional_get.png&#34; alt=&#34;conditional_get&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP/2&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Goals
&lt;ul&gt;
&lt;li&gt;Backward compatible with HTTP 1.1&lt;/li&gt;
&lt;li&gt;Improve page load speed
&lt;ul&gt;
&lt;li&gt;Data compression of HTTP headers&lt;/li&gt;
&lt;li&gt;HTTP/2 Server Push&lt;/li&gt;
&lt;li&gt;Pipelining of requests&lt;/li&gt;
&lt;li&gt;Fixing the head-of-line blocking problem in HTTP 1.1&lt;/li&gt;
&lt;li&gt;Multiplexing multiple requests over a single TCP connection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mitigating HOL blocking
&lt;ul&gt;
&lt;li&gt;Objects divided into frames, frame transmission interleaved&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;HTTP/2 to HTTP/3&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Goal
&lt;ul&gt;
&lt;li&gt;To further decrease delay in multi-object HTTP requests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP/2 over single TCP connection means
&lt;ul&gt;
&lt;li&gt;Recovery from packet loss still stalls all object transmissions =&amp;gt; Head-of-line blocking!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP/3 over UDP (to address the HoL blocking)
&lt;ul&gt;
&lt;li&gt;Adds security, per object error and congestion-control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Email&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Components
&lt;ul&gt;
&lt;li&gt;User agents
&lt;ul&gt;
&lt;li&gt;Composing, editing, reading mail messages&lt;/li&gt;
&lt;li&gt;Outgoing, incoming messages stored on server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mail server
&lt;ul&gt;
&lt;li&gt;Mailbox&lt;/li&gt;
&lt;li&gt;Message queue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SMTP (Simple Mail Transfer Protocol)
&lt;ul&gt;
&lt;li&gt;Client: Sending mail server&lt;/li&gt;
&lt;li&gt;Server: Receiving mail server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SMTP [RFC 5321]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uses TCP to reliably transfer email message from client to server, port 25 (or 587)&lt;/li&gt;
&lt;li&gt;Direct transfer: sending server to receiving server&lt;/li&gt;
&lt;li&gt;Three phases of transfer
&lt;ul&gt;
&lt;li&gt;Handshaking (greeting)&lt;/li&gt;
&lt;li&gt;Transfer of messages&lt;/li&gt;
&lt;li&gt;Closure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Command/response interaction (like HTTP, FTP)
&lt;ul&gt;
&lt;li&gt;Commands: ASCII text&lt;/li&gt;
&lt;li&gt;Response: status code and phrase&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Messages must be in 7-bit ASCII&lt;/li&gt;
&lt;li&gt;Uses persistent connections&lt;/li&gt;
&lt;li&gt;use &lt;em&gt;CRLF.CRLF&lt;/em&gt; to determine end of message&lt;/li&gt;
&lt;li&gt;Example
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/smtp_example.png&#34; alt=&#34;smtp_example&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Mail Message Format&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RFC 822: standard for text message format
&lt;ul&gt;
&lt;li&gt;Header lines (different from SMTP MAIL FROM, RCPT TO commands)
&lt;ul&gt;
&lt;li&gt;To&lt;/li&gt;
&lt;li&gt;From&lt;/li&gt;
&lt;li&gt;Subject&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Body (the message)
&lt;ul&gt;
&lt;li&gt;ASCII characters only&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Message Format: multimedia extensions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MIME (multipurpose internet mail extension): multimedia mail extension (to RFC 822), RFC 2045, 2056&lt;/li&gt;
&lt;li&gt;Additional lines in msg header declare MIME content type&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/mail_mime.png&#34; alt=&#34;mail_mime&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Mail Access Protocols&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/mail_access_protocols.png&#34; alt=&#34;mail_access_protocols&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SMTP
&lt;ul&gt;
&lt;li&gt;Delivery/storage to receiver&amp;rsquo;s server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mail access protocol: retrieval from server
&lt;ul&gt;
&lt;li&gt;POP
&lt;ul&gt;
&lt;li&gt;Post Office Protocol [RFC 1939]: authorization, download&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IMAP
&lt;ul&gt;
&lt;li&gt;Internet Mail Access Protocol [RFC 1730]: more features, including manipulation of stored msgs on server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP
&lt;ul&gt;
&lt;li&gt;Provides web-based interface on top of STMP (to send), IMAP (or POP) to retrieve e-mail messages&lt;/li&gt;
&lt;li&gt;Gmail, Hotmail, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DNS (Domain Name System)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why not a single centralized DNS server
&lt;ul&gt;
&lt;li&gt;Single point of failure&lt;/li&gt;
&lt;li&gt;Traffic jam due to huge number of requests/queries&lt;/li&gt;
&lt;li&gt;Long distance =&amp;gt; slow response&lt;/li&gt;
&lt;li&gt;Maintenance issue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNS services
&lt;ul&gt;
&lt;li&gt;Hostname to IP address translation&lt;/li&gt;
&lt;li&gt;Host aliasing&lt;/li&gt;
&lt;li&gt;Mail server aliasing&lt;/li&gt;
&lt;li&gt;Load distribution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/dns_services.png&#34; alt=&#34;dns_services&#34;&gt;&lt;/li&gt;
&lt;li&gt;Root Name Servers
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/root_name_servers.png&#34; alt=&#34;root_name_servers&#34;&gt;&lt;/li&gt;
&lt;li&gt;13 LOGICAL root name servers, but 1086(or more) PHYICAL servers&lt;/li&gt;
&lt;li&gt;Reply with a referral to the DNS servers for a TLD, or indicating no such TLD exists.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TLD &amp;amp; authoritative servers
&lt;ul&gt;
&lt;li&gt;Top-level domain (TLD) servers
&lt;ul&gt;
&lt;li&gt;gTLD (originally 7): com, net, biz, edu, org, int, mil, …&lt;/li&gt;
&lt;li&gt;ccTLD (249): uk, cn, hk, …&lt;/li&gt;
&lt;li&gt;IDN (internationalized top-level domains): .中国, .香港 and .台灣&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Authoritative DNS servers
&lt;ul&gt;
&lt;li&gt;Organization&amp;rsquo;s own DNS server(s), providing authoritative hostname to IP mappings for organization’s named hosts&lt;/li&gt;
&lt;li&gt;Can be maintained by organization or service provider&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Local/Default DNS Server&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does not strictly belong to hierarchy&lt;/li&gt;
&lt;li&gt;When host makes DNS query, query is sent to its local DNS server
&lt;ul&gt;
&lt;li&gt;Has local cache of recent name-to-address translation&lt;/li&gt;
&lt;li&gt;Acts as proxy, forwards query into hierarchy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Each ISP (residential ISP, company, university) has one&lt;/li&gt;
&lt;li&gt;Public DNS server
&lt;ul&gt;
&lt;li&gt;Google public DNS (with IP address 8.8.8.8)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Your home WiFi router may act as your local DNS server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DNS: Caching, Updating Records&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Once (any) name server learns mapping, it caches mapping
&lt;ul&gt;
&lt;li&gt;Cache entries timeout (disappear) after some time (TTL)&lt;/li&gt;
&lt;li&gt;TLD servers typically cached in local name servers
&lt;ul&gt;
&lt;li&gt;Root name servers not often visited&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cached entries may be out-of-date
&lt;ul&gt;
&lt;li&gt;If name host changes IP address, may not be known Internet-wide until all TTLs expire&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Update/notify mechanisms proposed IETF standard
&lt;ul&gt;
&lt;li&gt;RFC 2136&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DNS Records&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS: distributed db storing resource records (RR)
&lt;ul&gt;
&lt;li&gt;RR format
&lt;ul&gt;
&lt;li&gt;(name, value, type, ttl)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;type = A&lt;/li&gt;
&lt;li&gt;type = CNAME&lt;/li&gt;
&lt;li&gt;type = NS&lt;/li&gt;
&lt;li&gt;type = MX&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DNS Protocol, Messages&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS query and reply messages, both with same message format
&lt;ul&gt;
&lt;li&gt;Message header
&lt;ul&gt;
&lt;li&gt;Identification
&lt;ul&gt;
&lt;li&gt;16 bit&lt;/li&gt;
&lt;li&gt;For query, reply to query uses same&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flags
&lt;ul&gt;
&lt;li&gt;Query or reply&lt;/li&gt;
&lt;li&gt;Recursion desired&lt;/li&gt;
&lt;li&gt;Recursion available&lt;/li&gt;
&lt;li&gt;Reply is authoritative&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/dns_message.png&#34; alt=&#34;dns_message&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Attacking DNS&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DDoS attacks
&lt;ul&gt;
&lt;li&gt;Bombard root servers with traffic
&lt;ul&gt;
&lt;li&gt;Not successful to date&lt;/li&gt;
&lt;li&gt;Traffic Filtering&lt;/li&gt;
&lt;li&gt;Local DNS servers cache IPs of TLD servers, allowing root server bypass&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bombard TLD servers
&lt;ul&gt;
&lt;li&gt;Potentially more dangerous&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Redirect attacks
&lt;ul&gt;
&lt;li&gt;Man-in-middle
&lt;ul&gt;
&lt;li&gt;Intercept queries&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNS poisoning
&lt;ul&gt;
&lt;li&gt;Send bogus replies to DNS server, which caches&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Peer-to-peer File Distribution&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P2P architecture
&lt;ul&gt;
&lt;li&gt;No always-on server&lt;/li&gt;
&lt;li&gt;Arbitrary end systems directly communicate&lt;/li&gt;
&lt;li&gt;Self scalibility&lt;/li&gt;
&lt;li&gt;Peers are intermittently connected and change IP address&lt;/li&gt;
&lt;li&gt;Example
&lt;ul&gt;
&lt;li&gt;File distribution - BitTorrent&lt;/li&gt;
&lt;li&gt;Streaming - KanKan&lt;/li&gt;
&lt;li&gt;Volp - Skype&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;File Distribution (Client-Server)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/client_server_file.png&#34; alt=&#34;client_server_file&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server transmission
&lt;ul&gt;
&lt;li&gt;Must send/upload N file copies&lt;/li&gt;
&lt;li&gt;Time: NF/U(s)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Client
&lt;ul&gt;
&lt;li&gt;Each client must download one file copy&lt;/li&gt;
&lt;li&gt;Slowest time: F/d(min)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Time to distribute F to N
&lt;ul&gt;
&lt;li&gt;D(c-s) &amp;gt;= max {NF/U(s), F/d(min)}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;File Distribution (P2P)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server transmission
&lt;ul&gt;
&lt;li&gt;Must upload at least one copy&lt;/li&gt;
&lt;li&gt;Time: F/U(s)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Client
&lt;ul&gt;
&lt;li&gt;Each client must download one file copy&lt;/li&gt;
&lt;li&gt;Slowest time: F/d(min)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;All clients
&lt;ul&gt;
&lt;li&gt;As aggregate must download NF bits&lt;/li&gt;
&lt;li&gt;Max upload rate: U(s)+NU(i)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Time to distribute F to N
&lt;ul&gt;
&lt;li&gt;D(P2P) &amp;gt;= max {F/U(s), F/d(min), NF/(U(s)+Sum(U(i)))}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Client-Server vs. P2P&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/p2p_cs.png&#34; alt=&#34;p2p_cs&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P2P File Distribution: BitTorrent&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Procedure
&lt;ul&gt;
&lt;li&gt;File divided into 256KB chunks&lt;/li&gt;
&lt;li&gt;Peers in torrent send/receive file chucks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Roles
&lt;ul&gt;
&lt;li&gt;Tracker
&lt;ul&gt;
&lt;li&gt;Track peers participating in torrent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Torrent
&lt;ul&gt;
&lt;li&gt;Group of peers exchanging chucks of a file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Actions
&lt;ul&gt;
&lt;li&gt;Requesting chunks
&lt;ul&gt;
&lt;li&gt;Ask each peer for chunks they have&lt;/li&gt;
&lt;li&gt;Request missing chunks (rarest piece first)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sending chunks (tit-for-tat)
&lt;ul&gt;
&lt;li&gt;Send chunks to peers who currently sending her chunks at highest rate&lt;/li&gt;
&lt;li&gt;Randomly select another peers and send chunks (for new peers)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>A Look at Tik-Tok</title>
      <link>https://www.pseudoyu.com/zh/2020/10/16/ecom6013_discussion_topic4/</link>
      <pubDate>Fri, 16 Oct 2020 09:19:19 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/16/ecom6013_discussion_topic4/</guid>
      
        <description>&lt;h1 id=&#34;a-look-at-tik-tok&#34;&gt;A Look at Tik-Tok&lt;/h1&gt;
&lt;h2 id=&#34;given-there-are-many-social-media-platforms-already-existing-in-us-what-makes-tik-tok-so-successful-that-it-becomes-a-big-enough-threat-to-cause-the-us-government-to-act-the-way-it-did-towards-a-commercial-company-ignore-political-factors&#34;&gt;Given there are many social media platforms already existing in US, what makes Tik-Tok so successful that it becomes a big enough threat to cause the US Government to act the way it did towards a commercial company (ignore political factors)?&lt;/h2&gt;
&lt;p&gt;Economically, at about 2016, US tech giants such as Facebook or Google mainly focused on long video platform instead of the short video platform. A company called Musical.ly (later acquired by ByteDance and became a part of Tik-Tok) grasped this opportunity to extend the US market and gained a massive amount of market share. Generally, the US market is relatively a free market that encourages new products (startups) to participate in the competition. In addition to acquiring Musical.ly, which already played an essential role in the short video market, Tik-Tok also utilized targeted strategies to fulfil the US market&amp;rsquo;s needs and fashion to gain and retain more users.&lt;/p&gt;
&lt;p&gt;Socially, the majority of users of short video platform are young people, and they tend to follow fashions and do more social interactions. Tik-Tok carries out new creative forms of videos for users to easily create, share and connect interesting videos in their social circle, which brings the long tail influence on the spread of Tik-Tok videos. Besides, some organizations or even official medias also joined the Tik-Tok platform to please their audience or get more subscribers, which further increase the social influence of Tik-Tok.&lt;/p&gt;
&lt;p&gt;Technically, as the rapid development of Internet and smartphone industry, short video has gradually become a mainstream form of creation and entertainment. US people especially young people get more accustomed to using their smartphones to entertain or do social interactions, like watching or shooting videos in their leisure time. What&amp;rsquo;s more, the recommendation system and mechanism applying artificial intelligence and machine learning algorithms become more powerful and smart, keeping attracting their users&#39; attention.&lt;/p&gt;
&lt;p&gt;To sum up, Tik-Tok chose the right market expanding strategy, successfully meets the market demand and captures their users&#39; needs to get its market share. And it makes fair use of their technical benefits and most advanced innovation like machine learning algorithms to continually improve their product, making them become a very influential platform.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>ECOM6013 Topic 8 Blockchain and Cybercurrency</title>
      <link>https://www.pseudoyu.com/zh/2020/10/09/ecom6013_topic8/</link>
      <pubDate>Fri, 09 Oct 2020 11:01:28 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/09/ecom6013_topic8/</guid>
      
        <description>&lt;h1 id=&#34;ecom6013-e-commerce-technologies&#34;&gt;ECOM6013 E-Commerce Technologies&lt;/h1&gt;
&lt;h2 id=&#34;topic-8-blockchain-and-cybercurrency&#34;&gt;Topic 8 Blockchain and Cybercurrency&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Form of Money&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Token money
&lt;ul&gt;
&lt;li&gt;Physical token&lt;/li&gt;
&lt;li&gt;Value is lost without the token&lt;/li&gt;
&lt;li&gt;No intermediary is required for spending&lt;/li&gt;
&lt;li&gt;Requires faith in the issuer (a government or a bank)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Notationary money
&lt;ul&gt;
&lt;li&gt;Notation/entry in a ledger, passbook, or database&lt;/li&gt;
&lt;li&gt;Can&amp;rsquo;t be lost&lt;/li&gt;
&lt;li&gt;Requires an intermediary&lt;/li&gt;
&lt;li&gt;Requires faith in the maintainer of the ledger&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hybrid money
&lt;ul&gt;
&lt;li&gt;Requires both a token and a ledger account&lt;/li&gt;
&lt;li&gt;Can be lost&lt;/li&gt;
&lt;li&gt;Requires an intermediary&lt;/li&gt;
&lt;li&gt;Requires faith in the issuer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Virtual money
&lt;ul&gt;
&lt;li&gt;No token/ledger&lt;/li&gt;
&lt;li&gt;Can be lost&lt;/li&gt;
&lt;li&gt;No intermediary required&lt;/li&gt;
&lt;li&gt;No issuer, no government backing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Digital money
&lt;ul&gt;
&lt;li&gt;String of bytes (data) stored on a device&lt;/li&gt;
&lt;li&gt;Value is lost/stolen when devices fail/invaded&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cybercurrency
&lt;ul&gt;
&lt;li&gt;Bitcoin is the most influential one&lt;/li&gt;
&lt;li&gt;Based on blockchain&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Bitcoin&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Designed for the &amp;ldquo;online society&amp;rdquo;&lt;/li&gt;
&lt;li&gt;An important example application of Blockchain&lt;/li&gt;
&lt;li&gt;Relationship with national currencies
&lt;ul&gt;
&lt;li&gt;Decentralized and independent of national currencies&lt;/li&gt;
&lt;li&gt;Easily convertible to national currencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Excellent application Scenarios
&lt;ul&gt;
&lt;li&gt;Anonymous transactions&lt;/li&gt;
&lt;li&gt;E-Commerce&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Land Deeds - A Blockchain Analogy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/land_deeds.png&#34; alt=&#34;land_deeds&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &amp;ldquo;chain of title&amp;rdquo; (a sequence of deeds leading from the original owner to the present owner)&lt;/li&gt;
&lt;li&gt;Deeds are recorded in the Land Registry&lt;/li&gt;
&lt;li&gt;Ownership is established by searching the Registry&lt;/li&gt;
&lt;li&gt;The Land Registry is ledger holder&lt;/li&gt;
&lt;li&gt;Double-selling is prevented by timestamps&lt;/li&gt;
&lt;li&gt;If the Registry is altered, ownership can be lost&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;5 elements of Bitcoin&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Currency
&lt;ul&gt;
&lt;li&gt;Send units of value&lt;/li&gt;
&lt;li&gt;Convertible&lt;/li&gt;
&lt;li&gt;Divisible&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Commodity
&lt;ul&gt;
&lt;li&gt;Scarcity stores wealth&lt;/li&gt;
&lt;li&gt;Market fluctuates with speculation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Brand
&lt;ul&gt;
&lt;li&gt;Marketing message&lt;/li&gt;
&lt;li&gt;Commodity and sharing knowledge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protocol
&lt;ul&gt;
&lt;li&gt;Decentralized trust&lt;/li&gt;
&lt;li&gt;Distributed ledger&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Technology
&lt;ul&gt;
&lt;li&gt;Blockchain&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;How to Get Bitcoin&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sell something&lt;/li&gt;
&lt;li&gt;Salary (some companies)&lt;/li&gt;
&lt;li&gt;Bitcoin exchange&lt;/li&gt;
&lt;li&gt;Mining
&lt;ul&gt;
&lt;li&gt;No more than 21 million BTCs&lt;/li&gt;
&lt;li&gt;Divisible into units as small as 1/100 millionth of a BTC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Bitcoin and Encryption Technologies&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hash functions&lt;/li&gt;
&lt;li&gt;Public-private key (asymmetric) encryption&lt;/li&gt;
&lt;li&gt;Digital signatures&lt;/li&gt;
&lt;li&gt;All of these technologies are mature and trusted&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Bitcoin Characteristics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No physical object (not a character string)
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Bitcoin&amp;rdquo; - protocol&lt;/li&gt;
&lt;li&gt;&amp;ldquo;bitcoin&amp;rdquo; - value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A chain of digitally signed transaction records leading from the original owner to the current owner&lt;/li&gt;
&lt;li&gt;Transaction records
&lt;ul&gt;
&lt;li&gt;Hashes&lt;/li&gt;
&lt;li&gt;Addresses&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No Bitcoin registry&lt;/li&gt;
&lt;li&gt;No central authority&lt;/li&gt;
&lt;li&gt;Broadcast to everyone
&lt;ul&gt;
&lt;li&gt;Everyone can verify the Bitcoin blockchain&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Bitcoin Protocol&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Invented in 2008 by Satoshi Nakamoto, &lt;a href=&#34;https://bitcoin.org/bitcoin.pdf&#34;&gt;&lt;em&gt;Bitcoin: A Peer-to-Peer Electronic Cash System&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Publicly available, Open source software&lt;/li&gt;
&lt;li&gt;Everyone can obtain and run a Bitcoin client&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Bitcoin addresses&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An elliptic curve public key
&lt;ul&gt;
&lt;li&gt;25-44 characters for users&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Send Bitcoins
&lt;ul&gt;
&lt;li&gt;Receiving address (public)&lt;/li&gt;
&lt;li&gt;Amount&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Receive Bitcoins
&lt;ul&gt;
&lt;li&gt;Receiving address (public)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Addresses are not directly registered to users&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Possible Vulnerabilities&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No way to reverse a transaction without the payee’s cooperation&lt;/li&gt;
&lt;li&gt;Software bugs&lt;/li&gt;
&lt;li&gt;Bank robbery by hackers&lt;/li&gt;
&lt;li&gt;Malware attacks against wallets&lt;/li&gt;
&lt;li&gt;Government attempts to control&lt;/li&gt;
&lt;li&gt;Competing digital currencies easy to make (fork)
&lt;ul&gt;
&lt;li&gt;Auroracoin&lt;/li&gt;
&lt;li&gt;Dogecoin&lt;/li&gt;
&lt;li&gt;Namecoin&lt;/li&gt;
&lt;li&gt;Primecoin&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Challenges for Bitcoin&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Time to solve a block (security concerns in algorithms)&lt;/li&gt;
&lt;li&gt;Energy consumption&lt;/li&gt;
&lt;li&gt;Meaningless and highly inefficient&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Possible Future of Bitcoin/Virtual Currencies (Social)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For the world’s unbanked&lt;/li&gt;
&lt;li&gt;For small businesses, freelancers and startups&lt;/li&gt;
&lt;li&gt;Inevitable development of &amp;ldquo;money&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Distributed trust&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Possible Future of Bitcoin/Virtual Currencies (Economic/Political)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A future with digital currencies and decentralized stores&lt;/li&gt;
&lt;li&gt;National adoption of decentralized currencies may bring political transparency and economic neutrality&lt;/li&gt;
&lt;li&gt;Developing nations seeking to curb corruption and break free of economic dependence on other countries could see potential in these technologies&lt;/li&gt;
&lt;li&gt;Central Bank Digital Currency (CBDC)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Retail Money Key Attributes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/retail_money.png&#34; alt=&#34;retail_money&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Different Degrees of Responsibilities for the Central Bank&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/central_bank.png&#34; alt=&#34;central_bank&#34;&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>ICOM6012 Topic 2 The Big Picture</title>
      <link>https://www.pseudoyu.com/zh/2020/10/05/icom6012_topic2/</link>
      <pubDate>Mon, 05 Oct 2020 09:06:09 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/05/icom6012_topic2/</guid>
      
        <description>&lt;h1 id=&#34;icom6012-internet-infrastructure-technologies&#34;&gt;ICOM6012 Internet Infrastructure Technologies&lt;/h1&gt;
&lt;h2 id=&#34;topic-2-the-big-picture&#34;&gt;Topic 2 The Big Picture&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The Internet: &amp;ldquo;nuts and bolts&amp;rdquo; view&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Billions of connected computing devices
&lt;ul&gt;
&lt;li&gt;Host = end system&lt;/li&gt;
&lt;li&gt;Running network apps&lt;/li&gt;
&lt;li&gt;Internet of things (IoT)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Packet switches
&lt;ul&gt;
&lt;li&gt;routers&lt;/li&gt;
&lt;li&gt;switchers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Communication links
&lt;ul&gt;
&lt;li&gt;Fiber, copper, radio, satellite&lt;/li&gt;
&lt;li&gt;Transmission rate: bandwidth&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Networks
&lt;ul&gt;
&lt;li&gt;Collection of devices, routers, switches, links&lt;/li&gt;
&lt;li&gt;Managed by an organization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Internet: &amp;ldquo;network of networks&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;Interconnected ISPs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protocols
&lt;ul&gt;
&lt;li&gt;Control sending, receiving of messages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Internet standards
&lt;ul&gt;
&lt;li&gt;RFC: Requests for Comments&lt;/li&gt;
&lt;li&gt;IETF: Internet Engineering Task Force&lt;/li&gt;
&lt;li&gt;IEEE: Institute of Electronical &amp;amp; Electronic Engineering&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The Internet: a &amp;ldquo;service&amp;rdquo; view&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Infrastructure
&lt;ul&gt;
&lt;li&gt;Web&lt;/li&gt;
&lt;li&gt;Streaming video&lt;/li&gt;
&lt;li&gt;Multimedia teleconferencing&lt;/li&gt;
&lt;li&gt;Email&lt;/li&gt;
&lt;li&gt;Games&lt;/li&gt;
&lt;li&gt;E‐Commerce&lt;/li&gt;
&lt;li&gt;Social media&lt;/li&gt;
&lt;li&gt;Inter‐connected appliances&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Programming interface
&lt;ul&gt;
&lt;li&gt;Sending/receiving apps&lt;/li&gt;
&lt;li&gt;Service options&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Protocol&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activities in the Internet involving two or more remote entities are governed by a protocol&lt;/li&gt;
&lt;li&gt;Protocols are running everywhere in the Internet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;A protocol defines the format and the order of messages exchanged between two or more communicating entities, as well as the actions taken on the transmission and/or receipt of a message or other event.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Network Standards&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ietf.org/standards/&#34;&gt;IETF&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Application&lt;/li&gt;
&lt;li&gt;Transport&lt;/li&gt;
&lt;li&gt;Network&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ieeexplore.ieee.org/browse/standards/collection/ieee&#34;&gt;IEEE&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Data link&lt;/li&gt;
&lt;li&gt;Physical&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Network Edge&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hosts
&lt;ul&gt;
&lt;li&gt;Clients&lt;/li&gt;
&lt;li&gt;Servers (always in data centers)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Access Networks, Physical Media&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Residential access networks (cable-based)
&lt;ul&gt;
&lt;li&gt;Frequency Division Multiplexing (FDM)
&lt;ul&gt;
&lt;li&gt;Different channels transmitted in different frequency bands&lt;/li&gt;
&lt;li&gt;Modem = Modulator + Demodulator
&lt;ul&gt;
&lt;li&gt;A device that converts data from digital format into one suitable for a transmission medium&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HFC: hybrid fiber coax
&lt;ul&gt;
&lt;li&gt;Asymmetric: up to 40 Mbps – 1.2 Gbs downstream transmission rate, 30‐100 Mbps upstream transmission rate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Network of cable, fiber attaches homes to ISP router
&lt;ul&gt;
&lt;li&gt;Homes share access network to cable headend&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Residential access networks: digital subscriber line (DSL)
&lt;ul&gt;
&lt;li&gt;Use existing telephone line to central office DSLAM
&lt;ul&gt;
&lt;li&gt;Data over DSL phone line goes to Internet&lt;/li&gt;
&lt;li&gt;Voice over DSL phone line goes to telephone network&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wireless access networks
&lt;ul&gt;
&lt;li&gt;Wireless local area networks (WLANs)
&lt;ul&gt;
&lt;li&gt;Within or around building (~100ft)&lt;/li&gt;
&lt;li&gt;802.11b/g/n (WiFi) - 11,54,450 Mbps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wide-area cellular access networks
&lt;ul&gt;
&lt;li&gt;Mobile (10km)&lt;/li&gt;
&lt;li&gt;4G/5G cellular networks - 10 Mbps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IoT
&lt;ul&gt;
&lt;li&gt;BLE&lt;/li&gt;
&lt;li&gt;ZigBee&lt;/li&gt;
&lt;li&gt;LoRa&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Remote areas
&lt;ul&gt;
&lt;li&gt;Satellite network: Geosynchronous Equatorial Orbit (GEO)
&lt;ul&gt;
&lt;li&gt;35,786 km above equator&lt;/li&gt;
&lt;li&gt;Large RTT (Round trip time): 0.5s&lt;/li&gt;
&lt;li&gt;Expensive&lt;/li&gt;
&lt;li&gt;Slow&lt;/li&gt;
&lt;li&gt;Examples
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=OFGW2sZsUiQ&#34;&gt;&amp;ldquo;Project Loon&amp;rdquo; &amp;ndash; Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=giQ8xEWjnBs&amp;amp;t=13s&#34;&gt;Starlink ‐‐ SpaceX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Enterprise access networks (school, company)
&lt;ul&gt;
&lt;li&gt;Mix of wired, wireless link technologies
&lt;ul&gt;
&lt;li&gt;Ethernet
&lt;ul&gt;
&lt;li&gt;Wired access at 100Mbps, 1Gbps, 10Gbps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WiFi
&lt;ul&gt;
&lt;li&gt;Wireless access points at 11, 54, 450 Mbps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;History of IEEE 802.11 (Use CSMA/CA)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unlicensed ISM - 1985&lt;/li&gt;
&lt;li&gt;802.11 - 1997
&lt;ul&gt;
&lt;li&gt;2.4GHz&lt;/li&gt;
&lt;li&gt;DSSS &amp;amp; FHSS&lt;/li&gt;
&lt;li&gt;1,2Mbps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;802.11b - 1999 (WiFi-1)
&lt;ul&gt;
&lt;li&gt;2.4GHz&lt;/li&gt;
&lt;li&gt;DSSS&lt;/li&gt;
&lt;li&gt;11Mbps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;802.11a - 1999 (WiFi-2)
&lt;ul&gt;
&lt;li&gt;5GHz&lt;/li&gt;
&lt;li&gt;OFDM&lt;/li&gt;
&lt;li&gt;54Mbps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WiFi Alliance - 1999&lt;/li&gt;
&lt;li&gt;802.11g - 2003 (WiFi-3)
&lt;ul&gt;
&lt;li&gt;2.4GHz&lt;/li&gt;
&lt;li&gt;54Mbps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;802.11-2007 - 2007
&lt;ul&gt;
&lt;li&gt;Combined 802.11a/b/g&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;802.11n - 2009 (WiFi-4)
&lt;ul&gt;
&lt;li&gt;MIMO, 2.4 or 5GHz&lt;/li&gt;
&lt;li&gt;600Mbps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;802.11-2012
&lt;ul&gt;
&lt;li&gt;Combined 802.11a/b/g/n&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;802.11ac - 2013 (WiFi-5)
&lt;ul&gt;
&lt;li&gt;5GHz&lt;/li&gt;
&lt;li&gt;7Gbps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;802.11ah - 2017&lt;/li&gt;
&lt;li&gt;802.11ax - 2020 (WiFi-6)
&lt;ul&gt;
&lt;li&gt;5GHz&lt;/li&gt;
&lt;li&gt;OFDMA&lt;/li&gt;
&lt;li&gt;9.6Gbps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Links: Physical Media&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Twisted pair (TP)
&lt;ul&gt;
&lt;li&gt;Two insulated copper wires
&lt;ul&gt;
&lt;li&gt;Category 5: 100Mbos, 1Gbps Ethernet&lt;/li&gt;
&lt;li&gt;Category 6: 10Gbps Ethernet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coaxial cable
&lt;ul&gt;
&lt;li&gt;Two concentric copper conductors&lt;/li&gt;
&lt;li&gt;Bidiretional&lt;/li&gt;
&lt;li&gt;Broadband
&lt;ul&gt;
&lt;li&gt;Multiple frequency channels on cable&lt;/li&gt;
&lt;li&gt;100 Mbps per channel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/jZOg39v73c4&#34;&gt;Fiber optic cable&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Glass fiber carrying light pulse a bit (each pulse a bit)&lt;/li&gt;
&lt;li&gt;High-speed point-to-point transmission (10-100Gbps)&lt;/li&gt;
&lt;li&gt;Low error rate
&lt;ul&gt;
&lt;li&gt;Repeaters spaced far apart&lt;/li&gt;
&lt;li&gt;Immune to electromagnetic noise&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wireless radio
&lt;ul&gt;
&lt;li&gt;Signal carried in electromagnetic spectrum&lt;/li&gt;
&lt;li&gt;No physical &amp;ldquo;wire&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Propagation environment effects
&lt;ul&gt;
&lt;li&gt;Reflection&lt;/li&gt;
&lt;li&gt;Obstruction by objects&lt;/li&gt;
&lt;li&gt;Interference&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Network Core&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Mesh of interconnected routers&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Packet-switching (hosts break application-layer messages into packets)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Forward packets from one router to the next&lt;/li&gt;
&lt;li&gt;Each packet transmitted a full link capacity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Packet transmission delay&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/packet_switch.png&#34; alt=&#34;packet_switch&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Packet transmission delay = L (bits) / R (bits/sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;End-end delay&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/store_and_forward.png&#34; alt=&#34;store_and_forward&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;End-end delay = 2L (bits) / R (bits/sec)
(Assuming zero propagation delay)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Store and forward: entire packet must arrive at router before it can be transmitted on next link&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Packet queuing and loss&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If arrival rate &amp;gt; transmission rate, packets will queue&lt;/li&gt;
&lt;li&gt;If memory fills up, packets can be dropped&lt;/li&gt;
&lt;li&gt;Bigger buffer can bring lower packet loss but higher delay+buffer cost&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two key network-core functios&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Forwarding
&lt;ul&gt;
&lt;li&gt;Local action: input link -&amp;gt; output link&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Routing
&lt;ul&gt;
&lt;li&gt;Global action: source -&amp;gt; destinatin&lt;/li&gt;
&lt;li&gt;Routing algorithms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Circuit switching&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;End-end resources allocated to, reserved for &amp;ldquo;call&amp;rdquo; between source&amp;amp;dest&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/circuit_switching.png&#34; alt=&#34;circuit_switching&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Frequency Division Multiplexing (FDM)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/fdm.png&#34; alt=&#34;fdm&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time Division Multiplexing (TDM)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/tdm.png&#34; alt=&#34;tdm&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Packet Switching vs. Circuit Switching&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Packet switching is great for bursty data
&lt;ul&gt;
&lt;li&gt;Resource sharing&lt;/li&gt;
&lt;li&gt;Simpler, no call setup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Packet switching can cause excessive congestion&lt;/li&gt;
&lt;li&gt;Combined: Virtual Circuit Packet Switching&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Internet Structure: Network of networks&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hosts connected to internet&lt;/li&gt;
&lt;li&gt;Access ISPs (Internet Service Providers)
&lt;ul&gt;
&lt;li&gt;To ensure every two hosts can send packets to each other, access ISPs must be interconnected&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/isp_tiers.png&#34; alt=&#34;isp_tiers&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tier-1 ISP
&lt;ul&gt;
&lt;li&gt;Sprint, AT&amp;amp;T, NTT&lt;/li&gt;
&lt;li&gt;National &amp;amp; international coverage&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content provider network (private network)
&lt;ul&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;Facebook&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Delay and Loss&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nodal processing&lt;/li&gt;
&lt;li&gt;Queueing delay&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/queueing_delay.png&#34; alt=&#34;queueing_delay&#34;&gt;
&lt;ul&gt;
&lt;li&gt;R: link bandwidth (bps)&lt;/li&gt;
&lt;li&gt;L: packet length (bits)&lt;/li&gt;
&lt;li&gt;a: average packet arrival rate&lt;/li&gt;
&lt;li&gt;Traffic intensity = La / R&lt;/li&gt;
&lt;li&gt;E(x) = La/R / (1 - La/R)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transmission delay
&lt;ul&gt;
&lt;li&gt;L(packet length) / R (link bandwidth)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Propagation delay
&lt;ul&gt;
&lt;li&gt;d (length of physical link) / s (propagation speed)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/packet_delay.png&#34; alt=&#34;packet_delay&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;d(nodal) = d(proc) + d(queue) + d(trans) + d(prop)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Number of hops = M
Per-hop processing delay = d(proc)
Link propagation delay = d(prop)
Packet transmission delay = d(trans)
Message size = N packets

End-to-end Delay (ignoring queueing delay)
= M * d(prop) + N * d(trans) + (M-1) * d(trans) + (M-1) * d(proc)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/timing_diagram.png&#34; alt=&#34;timing_diagram&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;Real&amp;rdquo; Internet delays and routes: traceroute &lt;a href=&#34;https://www.youtube.com&#34;&gt;YouTube&lt;/a&gt; (macOS)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;➜  ~ traceroute youtube.com
traceroute to youtube.com &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;216.58.197.110&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, &lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; hops max, &lt;span class=&#34;m&#34;&gt;52&lt;/span&gt; byte packets
 &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;  172.24.172.1 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;172.24.172.1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  14.211 ms  1.584 ms  1.635 ms
 &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;  118.140.125.65 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;118.140.125.65&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  13.122 ms  23.362 ms  7.402 ms
 &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;  10.30.31.17 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;10.30.31.17&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  7.024 ms  23.736 ms  54.474 ms
 &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;  10.28.21.37 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;10.28.21.37&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  5.924 ms  3.565 ms  2.954 ms
 &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;  * * *
 &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;  * 218.188.28.165 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;218.188.28.165&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  214.507 ms  3.344 ms
 &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;  108.170.241.65 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;108.170.241.65&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  3.595 ms
    72.14.222.9 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;72.14.222.9&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  10.840 ms  3.377 ms
 &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;  108.170.241.65 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;108.170.241.65&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  3.156 ms
    216.239.62.59 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;216.239.62.59&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  3.495 ms
    216.239.62.57 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;216.239.62.57&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  2.733 ms
 &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt;  216.239.62.59 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;216.239.62.59&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  4.698 ms
    hkg12s01-in-f14.1e100.net &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;216.58.197.110&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  3.252 ms  4.355 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Packet Loss&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Queen (buffer) preceding link in buffer has finite capcity&lt;/li&gt;
&lt;li&gt;Packet arriving to full queue dropped (lost)&lt;/li&gt;
&lt;li&gt;Lost packet may be retransmitted by previous node, end system or not at all&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/packet_loss.png&#34; alt=&#34;packet_loss&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Throughput&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rate (bits/time) at which bits transferred from sender to receiver
&lt;ul&gt;
&lt;li&gt;Instantaneous: rate at given point in time&lt;/li&gt;
&lt;li&gt;Average: rate over longer period of time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bottleneck link
&lt;ul&gt;
&lt;li&gt;link on end-end path that constrains end-end throughput&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/throughput.png&#34; alt=&#34;throughput&#34;&gt;&lt;/li&gt;
&lt;li&gt;Per-connection end-end throughput
&lt;ul&gt;
&lt;li&gt;min(Rc, Rs, R/10)&lt;/li&gt;
&lt;li&gt;In practice, Rc or Rs is often bottleneck&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Why Layering&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Explicit structure allows identification, relationship of complex system&amp;rsquo;s pieces&lt;/li&gt;
&lt;li&gt;Modularization eases maintenance, updating of system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Internet Protocol Stack&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application - supporting network applications
&lt;ul&gt;
&lt;li&gt;FTP&lt;/li&gt;
&lt;li&gt;SMTP&lt;/li&gt;
&lt;li&gt;HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transport - process data transfer
&lt;ul&gt;
&lt;li&gt;TCP&lt;/li&gt;
&lt;li&gt;UDP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Network - routing of datagrams from source to destination
&lt;ul&gt;
&lt;li&gt;IP&lt;/li&gt;
&lt;li&gt;Routing protocol&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Link - data transfer between neighboring network elements
&lt;ul&gt;
&lt;li&gt;Ethernet&lt;/li&gt;
&lt;li&gt;WiFi&lt;/li&gt;
&lt;li&gt;PPP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Physical - bits &amp;ldquo;on the wire&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ISO/OSI Reference Model (Implemented in Application)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Presentation
&lt;ul&gt;
&lt;li&gt;Allow applications to interpret meaning of data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Session
&lt;ul&gt;
&lt;li&gt;Synchronization, checkpoint, recovery of data exchange&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Encapsulation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/encapsulation.png&#34; alt=&#34;encapsulation&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Network Security&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fields of network security
&lt;ul&gt;
&lt;li&gt;How bad guys can attack computer networks&lt;/li&gt;
&lt;li&gt;How we can defend networks against attacks&lt;/li&gt;
&lt;li&gt;How to design architectures that are immune to attacks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Internet not originally designed with much security in mind&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Bad Guys&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Malware
&lt;ul&gt;
&lt;li&gt;From
&lt;ul&gt;
&lt;li&gt;Virus&lt;/li&gt;
&lt;li&gt;Worm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spyware malware&lt;/li&gt;
&lt;li&gt;Usage
&lt;ul&gt;
&lt;li&gt;Botnet&lt;/li&gt;
&lt;li&gt;Spam&lt;/li&gt;
&lt;li&gt;DDos attacks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Denial of service (DoS)
&lt;ul&gt;
&lt;li&gt;Make resources (server, bandwidth) unavailable to legitimate traffic by overwhelming resource with fake traffic&lt;/li&gt;
&lt;li&gt;Procedures
&lt;ol&gt;
&lt;li&gt;Select target&lt;/li&gt;
&lt;li&gt;Break into hosts around the network&lt;/li&gt;
&lt;li&gt;Send packets to target from compromised hosts&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Packet interception
&lt;ul&gt;
&lt;li&gt;Packet &amp;ldquo;sniffing&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/packet_sniffing.png&#34; alt=&#34;packet_sniffing&#34;&gt;
&lt;ul&gt;
&lt;li&gt;Broadcast media (shared ethernet, wireless)&lt;/li&gt;
&lt;li&gt;Promiscuous network interface reads/records all packets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fake identity
&lt;ul&gt;
&lt;li&gt;IP spoofing: send packet with false source address&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/ip_spoffing.png&#34; alt=&#34;ip_spoffing&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Use&amp;rsquo;s View Of Internet&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single large (global) network
&lt;ul&gt;
&lt;li&gt;Achieved through software that implements abstractions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;User&amp;rsquo;s computers all attach directly&lt;/li&gt;
&lt;li&gt;No other structure visible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/user_view_internet.png&#34; alt=&#34;user_view_internet&#34;&gt;
&lt;strong&gt;Internet History&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Early packet-switching principles (1961-1972)&lt;/li&gt;
&lt;li&gt;Internetworking, new and proprietary nets (1972-1980)&lt;/li&gt;
&lt;li&gt;New protocols, a proliferation of networks (1980-1990)&lt;/li&gt;
&lt;li&gt;Commercialization, the Web, new apps (1990&amp;rsquo;s, 2000&amp;rsquo;s)&lt;/li&gt;
&lt;li&gt;More new applications, Internet is &amp;ldquo;everywhere&amp;rdquo; (2005-Present)&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>COMP7404 Topic 3 Adversarial Search</title>
      <link>https://www.pseudoyu.com/zh/2020/10/05/comp7404_topic3/</link>
      <pubDate>Mon, 05 Oct 2020 00:30:11 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/05/comp7404_topic3/</guid>
      
        <description>&lt;h1 id=&#34;comp7404-computational-intelligence-and-machine-learning&#34;&gt;COMP7404 Computational Intelligence and Machine Learning&lt;/h1&gt;
&lt;h2 id=&#34;topic-3-adversarial-search&#34;&gt;Topic 3 Adversarial Search&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A Multi-agent Competitive Environment&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Other agents are planning against us&lt;/li&gt;
&lt;li&gt;Goals are in conflict (not necessarily)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Game Definition&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A game can be defined as
&lt;ul&gt;
&lt;li&gt;s : States&lt;/li&gt;
&lt;li&gt;s0: Initial state&lt;/li&gt;
&lt;li&gt;Player(s) : Defines which player has the move&lt;/li&gt;
&lt;li&gt;Actions(s) : Returns a set of legal moves&lt;/li&gt;
&lt;li&gt;Result(s,a) : Defines the result of a move&lt;/li&gt;
&lt;li&gt;TerminalTest(s) : True when game is over, false otherwise&lt;/li&gt;
&lt;li&gt;Utility(s,p) : Defines the final numeric value for a game that ends in terminal state s for player p&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A game tree can be constructed
&lt;ul&gt;
&lt;li&gt;Nodes are game states and edges are moves&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tic-Tac-Toe Game Tree&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/tic_tac_toe_game_tree.png&#34; alt=&#34;tic_tac_toe_game_tree&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Minimax Search&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A state-space search tree&lt;/li&gt;
&lt;li&gt;Players alternate turns&lt;/li&gt;
&lt;li&gt;Compute each node’s minimax value
&lt;ul&gt;
&lt;li&gt;the best achievable utility against a rational (optimal) adversary&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/minimax.png&#34; alt=&#34;minimax&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Will lead to optimal strategy
&lt;ul&gt;
&lt;li&gt;Best achievable payoff against best play&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/minimax_example.png&#34; alt=&#34;minimax_example&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implementation
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/minimax_implementation.png&#34; alt=&#34;minimax_implementation&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Properties
&lt;ul&gt;
&lt;li&gt;Complete - Yes, if tree is finite&lt;/li&gt;
&lt;li&gt;Optimal - In general no, yes against an optimal opponent&lt;/li&gt;
&lt;li&gt;Time complexity - O(b^m)&lt;/li&gt;
&lt;li&gt;Space complexity - O(bm)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Depth-Limit Search (DLS)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A depth limit search (DLS)
&lt;ul&gt;
&lt;li&gt;Search only to a limited depth in the tree&lt;/li&gt;
&lt;li&gt;Replace terminal utilities with an evaluation function for non-terminal positions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Problems
&lt;ul&gt;
&lt;li&gt;Guarantee of optimal play is gone&lt;/li&gt;
&lt;li&gt;Need to design evaluation function&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;An evaluation function
&lt;ul&gt;
&lt;li&gt;An evaluation function Eval(s) scores non-terminals in depth-limited search
&lt;ul&gt;
&lt;li&gt;An estimate of the expected utility of the game from a given position&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ideal function
&lt;ul&gt;
&lt;li&gt;The actual minimax value of the position&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The performance of a game-playing program depends strongly on the quality of its evaluation functio&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;𝛼-𝛽 Pruning Algorithm&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/pruning_algorithm.png&#34; alt=&#34;pruning_algorithm&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Min version
&lt;ul&gt;
&lt;li&gt;Consider Min’s value at some node n&lt;/li&gt;
&lt;li&gt;n will decrease (or stay constant) while the descendants of n are examined&lt;/li&gt;
&lt;li&gt;Let m be the best value that Max can get at any choice point along the current path from the root&lt;/li&gt;
&lt;li&gt;If n becomes worse (&amp;lt;) than m
&lt;ul&gt;
&lt;li&gt;Max will avoid it&lt;/li&gt;
&lt;li&gt;Stop considering n’s other children&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Max version is symmetric&lt;/li&gt;
&lt;li&gt;Properties
&lt;ul&gt;
&lt;li&gt;Pruning has no effect on the minimax value at the root&lt;/li&gt;
&lt;li&gt;Values of intermediate nodes might be wrong
&lt;ul&gt;
&lt;li&gt;Action selection not appropriate for this simple version of alpha-beta pruning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Move ordering
&lt;ul&gt;
&lt;li&gt;The effectiveness of alpha-beta pruning is highly dependent on the order in which states are examined&lt;/li&gt;
&lt;li&gt;It is worthwhile to try to examine first the successors that are likely best
&lt;ul&gt;
&lt;li&gt;Examine only O(b^(m/2)) nodes to pick the best move, instead of O(bm) for minimax&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://kartikkukreja.wordpress.com/2014/06/29/alphabetasearch/&#34;&gt;A Reference Note&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expectimax Search&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/expectimax_search.png&#34; alt=&#34;expectimax_search&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Values reflect average case outcomes, not worst case outcomes&lt;/li&gt;
&lt;li&gt;Expectimax search computes the expected score under optimal play
&lt;ul&gt;
&lt;li&gt;Max nodes as in minimax search&lt;/li&gt;
&lt;li&gt;Chance nodes are like min nodes but the outcome is uncertain&lt;/li&gt;
&lt;li&gt;Calculate their expected utilities
&lt;ul&gt;
&lt;li&gt;i.e., take weighted average of children&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Expectiminimax
&lt;ul&gt;
&lt;li&gt;Environment is an extra &amp;ldquo;random agent&amp;rdquo; player that moves after each min/max agent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Multi-Agent Utilities&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/multi_agent.png&#34; alt=&#34;multi_agent&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generalisation of minimax
&lt;ul&gt;
&lt;li&gt;Terminals and nodes have utility vectors&lt;/li&gt;
&lt;li&gt;Each player maximizes its own component&lt;/li&gt;
&lt;li&gt;Gives rise to cooperation and competition dynamically&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/46706438&#34;&gt;A Reference Note1&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://kartikkukreja.wordpress.com/2015/07/04/adversarial-search/&#34;&gt;A Reference Note2&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>COMP7404 Topic 2 Beyond Classical Search</title>
      <link>https://www.pseudoyu.com/zh/2020/10/04/comp7404_topic2/</link>
      <pubDate>Sun, 04 Oct 2020 21:30:11 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/04/comp7404_topic2/</guid>
      
        <description>&lt;h1 id=&#34;comp7404-computational-intelligence-and-machine-learning&#34;&gt;COMP7404 Computational Intelligence and Machine Learning&lt;/h1&gt;
&lt;h2 id=&#34;topic-2-beyond-classical-search&#34;&gt;Topic 2 Beyond Classical Search&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Planning vs Identification&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Planing: sequence of actions
&lt;ul&gt;
&lt;li&gt;The path to the goal is the important thing&lt;/li&gt;
&lt;li&gt;Paths have various costs, depths&lt;/li&gt;
&lt;li&gt;Heuristics to guide, frontier to keep backups&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Identification: assignments to variables
&lt;ul&gt;
&lt;li&gt;The goal itself is important, not the path&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Local Search can find solutions faster for specific types of identification problems&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Local Search&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Evaluate and modify one current state rather than systematically explore paths from an initial state&lt;/li&gt;
&lt;li&gt;Suitable for problems were all that matters in the solution state and not the path cost to reach it&lt;/li&gt;
&lt;li&gt;Although local search algorithms are not systematic they have two advantages
&lt;ul&gt;
&lt;li&gt;Require very little memory&lt;/li&gt;
&lt;li&gt;Often find reasonable solutions in large spaces&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Local Search Algorithm&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Randomly initialize currentState
If cost of currentState == 0 return currentState
If min(cost(getNeighbors(currentState))) &amp;gt; cost(currentState)
    goto step 1 (we have reached a local minimum)
Select cheapest neighbor as currentState and goto step2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Example: 8-Queens&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;States
&lt;ul&gt;
&lt;li&gt;Each state has 8 queens on board, one per column&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Successors
&lt;ul&gt;
&lt;li&gt;All possible states generated by moving single queen to another square in the same column&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cost function
&lt;ul&gt;
&lt;li&gt;Number of pairs of queens that are attacking each other, either directly and indirectly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Constraint Satisfaction Problems&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CSPs use a factored representation for states&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A set of variables, each of which has a value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Defining CSPs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A CSP consists of three components
&lt;ul&gt;
&lt;li&gt;A set of variables, X = {X1,&amp;hellip;,Xn}&lt;/li&gt;
&lt;li&gt;A set of domains, D = {D1,&amp;hellip;,Dn}, where Di = {V1,&amp;hellip;,Vk} for each variable Xi&lt;/li&gt;
&lt;li&gt;A set of constraints C which specify allowable combinations of values&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To solve a CSP we need to define a state space
&lt;ul&gt;
&lt;li&gt;Each state is defined by an assignment of values to some or all variables {Xi = Vi, Xj = Vj,&amp;hellip;}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solving CSPs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;States are defined by the values assigned so far&lt;/li&gt;
&lt;li&gt;Initial state
&lt;ul&gt;
&lt;li&gt;Empty assignment {}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Successor function
&lt;ul&gt;
&lt;li&gt;Assign a value to an unassigned variable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Goal test
&lt;ul&gt;
&lt;li&gt;Current assignment is complete and consistent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solutiona to CSPs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consistent - No constraints are violated&lt;/li&gt;
&lt;li&gt;Complete - Every variable is assigned&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Backtracking Search (The basic algorithm for solving CSPs)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Idea&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only consider assignments to a single variable at each point&lt;/li&gt;
&lt;li&gt;Only allow legal assignemnts to each point&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DFS with these two ideas is called backtracking search&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Improving Backchecking&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Idea&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Forward checking (FC)&lt;/li&gt;
&lt;li&gt;Constraint propagation (AC-3)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Filtering: Forward Checking&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Filtering
&lt;ul&gt;
&lt;li&gt;Keep track of domains for unassigned variables and cross off bad options&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Forward checking
&lt;ul&gt;
&lt;li&gt;Cross off values that violate a constraint when added to the existing assignment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Improving Backtracking Further&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Variable Ordering
&lt;ul&gt;
&lt;li&gt;Minimum remaining values (MRV)
&lt;ul&gt;
&lt;li&gt;Choose the variable with the fewest legal left values in its domain
&lt;ul&gt;
&lt;li&gt;Most constraint variable&lt;/li&gt;
&lt;li&gt;Fail-first heuristic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tie-breaker among MRV variables
&lt;ul&gt;
&lt;li&gt;Degree Heuristic (Deg)
&lt;ul&gt;
&lt;li&gt;Choose the variable with the most constraints on remaining variables&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Value Ordering
&lt;ul&gt;
&lt;li&gt;Least constraining value (LCV)
&lt;ul&gt;
&lt;li&gt;Choose the value that rules out the fewest values in the remaining variables&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Mobile Payment Systems Case Study</title>
      <link>https://www.pseudoyu.com/zh/2020/10/01/ecom6013_discussion_topic3/</link>
      <pubDate>Thu, 01 Oct 2020 22:25:19 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/01/ecom6013_discussion_topic3/</guid>
      
        <description>&lt;h1 id=&#34;mobile-payment-systems&#34;&gt;Mobile Payment Systems&lt;/h1&gt;
&lt;h2 id=&#34;why-has-china-been-an-ideal-environment-to-support-mobile-payment-systems&#34;&gt;Why has China been an ideal environment to support mobile payment systems?&lt;/h2&gt;
&lt;p&gt;Politically, payment licenses are controlled by government (relative financial institutions) and under strict regulation. So, tech giants like Alibaba who are qualified can increasingly develop their payment business in the early age. Plus, in the early stage of mobile payment, laws and rules are not so completed. Payment platform can utilize smart market strategies (like very high return rate) to attract more new potential users and enhance existing users’ engagement, which is effective in market expanding stage.&lt;/p&gt;
&lt;p&gt;Economically and socially, China’s economic development was relatively slower than major developed countries such as the U. S. or Japan. And the majority of Chinese get used to spending money they already have instead of ahead-of-time consumption. Thus, credit card payment hasn’t been so popular in the past few decades (only about 0.31 credit card per capita) compared to western countries. Since the credit card payment (mainly related to the bank) is not the dominant way for daily payment, it’s possible for a new payment method to grow and domain the payment market in a “free compete” environment.&lt;/p&gt;
&lt;p&gt;Technically, E-Commerce and internet technology has been developing rapidly in China recently. As a country with huge population and strong consumption ability, the market urgently needs a new way of payment. With the new utilization of established technologies (4G, mobile phone development, cyber security, etc.) and emerging technologies (QR-Code, information system architecture, etc.), payment platform can integrate various functions into the existing system and provide a more powerful and advantageous platform.&lt;/p&gt;
&lt;p&gt;To sum up, China has been an ideal environment to support mobile payment systems.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>ECOM6013 Topic 7 E-Payment Systems</title>
      <link>https://www.pseudoyu.com/zh/2020/09/27/ecom6013_topic7/</link>
      <pubDate>Sun, 27 Sep 2020 11:30:28 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/09/27/ecom6013_topic7/</guid>
      
        <description>&lt;h1 id=&#34;ecom6013-e-commerce-technologies&#34;&gt;ECOM6013 E-Commerce Technologies&lt;/h1&gt;
&lt;h2 id=&#34;topic-7-e-payment-systems&#34;&gt;Topic 7 E-Payment Systems&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Payment System Stakeholders&#39; Priorities&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Customer
&lt;ol&gt;
&lt;li&gt;Low-risk&lt;/li&gt;
&lt;li&gt;Low-cost&lt;/li&gt;
&lt;li&gt;Refutable&lt;/li&gt;
&lt;li&gt;Convenience&lt;/li&gt;
&lt;li&gt;Reliable&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Merchants
&lt;ol&gt;
&lt;li&gt;Low-risks&lt;/li&gt;
&lt;li&gt;Low-cost&lt;/li&gt;
&lt;li&gt;Irrefutable&lt;/li&gt;
&lt;li&gt;Secure&lt;/li&gt;
&lt;li&gt;Reliable&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Financial intermediaries
&lt;ol&gt;
&lt;li&gt;Secure&lt;/li&gt;
&lt;li&gt;Low-risk&lt;/li&gt;
&lt;li&gt;Maximizing profit&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Government regulators
&lt;ol&gt;
&lt;li&gt;Secure&lt;/li&gt;
&lt;li&gt;Trust&lt;/li&gt;
&lt;li&gt;Protecting participants and enforcing reporting&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Type of Payment Systems&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cash&lt;/li&gt;
&lt;li&gt;Cheque transfer&lt;/li&gt;
&lt;li&gt;Credit card&lt;/li&gt;
&lt;li&gt;Stored value&lt;/li&gt;
&lt;li&gt;Accumulating balance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;B2C Payment System&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Credit cards&lt;/li&gt;
&lt;li&gt;Financial cybermediaries&lt;/li&gt;
&lt;li&gt;Electronic bill presentment and payment&lt;/li&gt;
&lt;li&gt;Smart cards&lt;/li&gt;
&lt;li&gt;Mobile payment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Features&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make large purchases&lt;/li&gt;
&lt;li&gt;Will not pay with credit card or financial cybermediary&lt;/li&gt;
&lt;li&gt;Use financial EDI (Electronic Data Interchange)&lt;/li&gt;
&lt;li&gt;Pay for many purchases at once&lt;/li&gt;
&lt;li&gt;Likely that cloud-based payment gateway (or other Internet-based technology) will eventually take over completely!&lt;/li&gt;
&lt;li&gt;FPS - HKMA &amp;amp; HKICL Payment Gateway Faster Payment System (FPS)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;E-Commere Payment Systems&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/online_credit_transaction.png&#34; alt=&#34;online_credit_transaction&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Credit cards&lt;/li&gt;
&lt;li&gt;Debit cards&lt;/li&gt;
&lt;li&gt;Digital wallets&lt;/li&gt;
&lt;li&gt;Digital cash&lt;/li&gt;
&lt;li&gt;Digital checking&lt;/li&gt;
&lt;li&gt;Online stored value systems
&lt;ul&gt;
&lt;li&gt;PayPal, AliPay, WeChat Pay&lt;/li&gt;
&lt;li&gt;Smart cards
&lt;ul&gt;
&lt;li&gt;Contact&lt;/li&gt;
&lt;li&gt;Contactless
&lt;ul&gt;
&lt;li&gt;EZPass, Octopus card&lt;/li&gt;
&lt;li&gt;Radio Frequency ID (RFID)&lt;/li&gt;
&lt;li&gt;Near Field Communications (NFC)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Future Payment System&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exporting existing payment systems that work in traditional commerce to E-Commerce causes problems&lt;/li&gt;
&lt;li&gt;Need a payment/financial system designed for the online world
&lt;ul&gt;
&lt;li&gt;Cybercurrencies / digital currency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>ECOM6013 Topic 6 E-Commerce Security</title>
      <link>https://www.pseudoyu.com/zh/2020/09/26/ecom6013_topic6/</link>
      <pubDate>Sat, 26 Sep 2020 15:46:28 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/09/26/ecom6013_topic6/</guid>
      
        <description>&lt;h1 id=&#34;ecom6013-e-commerce-technologies&#34;&gt;ECOM6013 E-Commerce Technologies&lt;/h1&gt;
&lt;h2 id=&#34;topic-6-e-commerce-security&#34;&gt;Topic 6 E-Commerce Security&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Good E-Commerce Security&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Highest degree of security
&lt;ul&gt;
&lt;li&gt;New technologies&lt;/li&gt;
&lt;li&gt;Organizational policies and procedures&lt;/li&gt;
&lt;li&gt;Industry standards and government law&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other factors
&lt;ul&gt;
&lt;li&gt;Cost of security vs. potential loss&lt;/li&gt;
&lt;li&gt;Security often breaks at weakest link&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The Tense Between Security and Other Values&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Security vs. Easy of use
&lt;ul&gt;
&lt;li&gt;More Secure -&amp;gt; More difficult to use + slower&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Security vs. Desire of individuals to act anonmously&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Basic E-Commerce Security Issues and Landscape&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E-Commerce security requirements
&lt;ul&gt;
&lt;li&gt;Authentication (verify the real identity)&lt;/li&gt;
&lt;li&gt;Authorization (determine the entity&amp;rsquo;s access)&lt;/li&gt;
&lt;li&gt;Auditing&lt;/li&gt;
&lt;li&gt;Availability&lt;/li&gt;
&lt;li&gt;Nonrepudiation (assurance that trading partners can&amp;rsquo;t falsely deny their purchase or transaction)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Risk (a vulnerability will be known and used)&lt;/li&gt;
&lt;li&gt;Social engineering (non-technical attack, trick users to do some certain actions)&lt;/li&gt;
&lt;li&gt;Spam&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;E-Commerce of Today&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Threats
&lt;ul&gt;
&lt;li&gt;Money thefts&lt;/li&gt;
&lt;li&gt;Identity thefts&lt;/li&gt;
&lt;li&gt;Malware&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solutions
&lt;ul&gt;
&lt;li&gt;Authentication&lt;/li&gt;
&lt;li&gt;Intrusion checking&lt;/li&gt;
&lt;li&gt;Firewalls&lt;/li&gt;
&lt;li&gt;Education&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Security Threats in the E-Commerce Environment&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Three key points of vulnerability
&lt;ul&gt;
&lt;li&gt;Client&lt;/li&gt;
&lt;li&gt;Server&lt;/li&gt;
&lt;li&gt;Communication pipeline (network channels)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/vulnerable_points_in_ecommerce.png&#34; alt=&#34;vulnerable_points_in_ecommerce&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Most Common Security Threats&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Malicious code
&lt;ul&gt;
&lt;li&gt;Viruses&lt;/li&gt;
&lt;li&gt;Worms&lt;/li&gt;
&lt;li&gt;Ransomeware&lt;/li&gt;
&lt;li&gt;Trojan horses&lt;/li&gt;
&lt;li&gt;Backdoors&lt;/li&gt;
&lt;li&gt;Bots, botnets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unwanted programs
&lt;ul&gt;
&lt;li&gt;Browser parasites&lt;/li&gt;
&lt;li&gt;Adware&lt;/li&gt;
&lt;li&gt;Spyware&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Phishing
&lt;ul&gt;
&lt;li&gt;Deceptive online attack to obtain confidential information&lt;/li&gt;
&lt;li&gt;Social engineering, e-mail scams, spoofing legitimate websites&lt;/li&gt;
&lt;li&gt;Used for identity fraud and theft&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hacking and cybervandalism
&lt;ul&gt;
&lt;li&gt;Hackers vs. Crackers&lt;/li&gt;
&lt;li&gt;Cybervandalism (intentionally disrupting, defacing, destroying websites)&lt;/li&gt;
&lt;li&gt;Hacktivism&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data breach&lt;/li&gt;
&lt;li&gt;Credit card fraud/theft&lt;/li&gt;
&lt;li&gt;Spoofing&lt;/li&gt;
&lt;li&gt;Pharming&lt;/li&gt;
&lt;li&gt;Spam / junk websites&lt;/li&gt;
&lt;li&gt;Denial of sevices (DoS) attack (useless traffic to overwhelm network)&lt;/li&gt;
&lt;li&gt;Distributed denial of service (DDoS) attack (multiple computers to attack target network)&lt;/li&gt;
&lt;li&gt;Sniffing (eavesdropping program that monitors information traveling over a network)&lt;/li&gt;
&lt;li&gt;Insider jobs
&lt;ul&gt;
&lt;li&gt;Single financial threats&lt;/li&gt;
&lt;li&gt;Poorly designed security policy and server / client software&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Social network issues&lt;/li&gt;
&lt;li&gt;Mobile platform issues&lt;/li&gt;
&lt;li&gt;Cloud security issues&lt;/li&gt;
&lt;li&gt;IoT security issues&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The Information Assurance Model and Defense Objectives&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CIA security triad
&lt;ul&gt;
&lt;li&gt;Confidentiality&lt;/li&gt;
&lt;li&gt;Integrity&lt;/li&gt;
&lt;li&gt;Availability&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Three Dimensions in Internet Security&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integrity&lt;/li&gt;
&lt;li&gt;Nonrepudiation&lt;/li&gt;
&lt;li&gt;Authenticity&lt;/li&gt;
&lt;li&gt;Confidentiality&lt;/li&gt;
&lt;li&gt;Privacy&lt;/li&gt;
&lt;li&gt;Availability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Technology Solutions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Protecting internet communications
&lt;ul&gt;
&lt;li&gt;Cryptography&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Securing channels of communication
&lt;ul&gt;
&lt;li&gt;SSL, TLS
&lt;ul&gt;
&lt;li&gt;Establishes a secure, negotiated client-server session in which URL of requested document, along with contents, is encrypted&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/ssl_protect.png&#34; alt=&#34;ssl_protect&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;S-HTTP
&lt;ul&gt;
&lt;li&gt;Provides a secure message-oriented communications protocol designed for use in conjunction with HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VPNs
&lt;ul&gt;
&lt;li&gt;Allows remote users to securely access internal network via the Internet, using Point-to-Point Tunneling Protocol (PPTP)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wi-Fi&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protecting networks
&lt;ul&gt;
&lt;li&gt;Firewalls&lt;/li&gt;
&lt;li&gt;Proxy servers&lt;/li&gt;
&lt;li&gt;Intrusion Detection System (IDS)&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/firewall.png&#34; alt=&#34;firewall&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protecting servers and clients
&lt;ul&gt;
&lt;li&gt;OS security
&lt;ul&gt;
&lt;li&gt;Upgrades&lt;/li&gt;
&lt;li&gt;Patches&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anti-virus software
&lt;ul&gt;
&lt;li&gt;Easiest and least expensive way to prevent threats to system integrity&lt;/li&gt;
&lt;li&gt;Requires daily updates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Managing Risks&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Technology&lt;/li&gt;
&lt;li&gt;Effective management policies&lt;/li&gt;
&lt;li&gt;Public laws and active enforcement&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;A Security Plan: Management Policies&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Risk assessment&lt;/li&gt;
&lt;li&gt;Security policy&lt;/li&gt;
&lt;li&gt;Implementation plan
&lt;ul&gt;
&lt;li&gt;Security organization&lt;/li&gt;
&lt;li&gt;Access controls&lt;/li&gt;
&lt;li&gt;Authentication procedures, including biometrics&lt;/li&gt;
&lt;li&gt;Authorization policies, authorization management systems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Security audit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/security_plan.png&#34; alt=&#34;security_plan&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Basic Concepts of User Authentication&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Something you know
&lt;ul&gt;
&lt;li&gt;Password&lt;/li&gt;
&lt;li&gt;PIN&lt;/li&gt;
&lt;li&gt;OTP&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Something you have
&lt;ul&gt;
&lt;li&gt;Physical key&lt;/li&gt;
&lt;li&gt;Token&lt;/li&gt;
&lt;li&gt;Magnetic card&lt;/li&gt;
&lt;li&gt;Smartcard&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Something you are
&lt;ul&gt;
&lt;li&gt;Fingerprint&lt;/li&gt;
&lt;li&gt;Voice&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Best use 2 Factors Authentication (2FA)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encryption&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transfer data into cipher text readable only by sender and receiver&lt;/li&gt;
&lt;li&gt;Secures stored information and information transmission&lt;/li&gt;
&lt;li&gt;Provide 4/6 key dimensions of E-Commerce security
&lt;ul&gt;
&lt;li&gt;authentication&lt;/li&gt;
&lt;li&gt;Confidentiality&lt;/li&gt;
&lt;li&gt;Message Integrity&lt;/li&gt;
&lt;li&gt;Nonrepudiation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Symmetric Key Cryptography&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sender and receiver use same digital key to encrypt and decrypt message&lt;/li&gt;
&lt;li&gt;Requires different set of keys for each transaction&lt;/li&gt;
&lt;li&gt;Strength of encryption
&lt;ul&gt;
&lt;li&gt;Length of binary key used to encrypt data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Standards
&lt;ul&gt;
&lt;li&gt;Data Encryption Standard (DES, 1977)&lt;/li&gt;
&lt;li&gt;Advanced Encryption Standard (AES, 2000)&lt;/li&gt;
&lt;li&gt;Other standards use keys with up to 2,048 bits&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Public Key Cryptography&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uses two mathematically related digital keys
&lt;ul&gt;
&lt;li&gt;Public key (widely disseminated)&lt;/li&gt;
&lt;li&gt;Private key (kept secret by owner)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Both keys used to encrypt and decrypt message
&lt;ul&gt;
&lt;li&gt;Once key used to encrypt message, same key cannot be used to decrypt message&lt;/li&gt;
&lt;li&gt;Sender uses recipient’s public key to encrypt message&lt;/li&gt;
&lt;li&gt;Recipient uses his/her private key to decrypt it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/public_key_cryptography.png&#34; alt=&#34;public_key_cryptography&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Public Key Encryption Using Digital Signatures and Hash Digests&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hash function
&lt;ul&gt;
&lt;li&gt;Mathematical algorithm (e.g. MD5 and SHA-1) that produces fixed-length number called message or hash digest&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sender applies hash function to the message and then encrypts the message AND the hash digest with recipient’s public key&lt;/li&gt;
&lt;li&gt;Sender then encrypts the whole package with sender’s private key, creating digital signature for authenticity, nonrepudiation&lt;/li&gt;
&lt;li&gt;Recipient first uses sender’s public key to authenticate the message and then the recipient’s private key to decrypt the hash digest and the message&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/public_key_cryptography_digital_signature.png&#34; alt=&#34;public_key_cryptography_digital_signature&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Digital Envelop&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Addresses weaknesses of
&lt;ul&gt;
&lt;li&gt;Public key encryption (computationally slow)&lt;/li&gt;
&lt;li&gt;Symmetric key encryption (insecure transmission lines)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Uses symmetric key encryption to encrypt document&lt;/li&gt;
&lt;li&gt;Uses public key encryption to encrypt and send symmetric key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/digital_envelop.png&#34; alt=&#34;digital_envelop&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Digital Certificates and Public Key Infrastructure (PKI)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Digital certificate
&lt;ul&gt;
&lt;li&gt;Name of subjects/company&lt;/li&gt;
&lt;li&gt;Subject&amp;rsquo;s public key&lt;/li&gt;
&lt;li&gt;Digital certificate serial number&lt;/li&gt;
&lt;li&gt;Expiration date, issuance date&lt;/li&gt;
&lt;li&gt;Digital signature of certification authority (trusted third party institution) that issues certificate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Public Key Infrastructure (PKI)
&lt;ul&gt;
&lt;li&gt;CAs and digital certificate procedures that are accepted by all parties&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/digital_certificate.png&#34; alt=&#34;digital_certificate&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Limits to Encryption Solutions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Doesn’t protect storage of private key&lt;/li&gt;
&lt;li&gt;No guarantee that verifying computer of merchant is secure&lt;/li&gt;
&lt;li&gt;CAs are unregulated, self-selecting organizations&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
  </channel>
</rss>
