<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>notes on Pseudoyu</title>
    <link>https://www.pseudoyu.com/zh/tag/notes/</link>
    <description>Recent content in notes on Pseudoyu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 29 Oct 2020 09:07:17 +0800</lastBuildDate>
    
	<atom:link href="https://www.pseudoyu.com/zh/tag/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Blockchain Ethereum Features</title>
      <link>https://www.pseudoyu.com/zh/2020/10/29/blockchain-ethereum-features/</link>
      <pubDate>Thu, 29 Oct 2020 09:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/29/blockchain-ethereum-features/</guid>
      <description>Blockchain Technology and Applications Ethereum System (Account-based ledger) Feature  Memory hard Mining puzzle ASIC resistance  Account  Threats  Double spending attack Replay attack  Solution: add a nonce to count tx     Type  Externally owned account  Balance Nonce (sequence number)   Smart contract account (can&amp;rsquo;t start a transaction)  Balance Nonce Code Storge      PoW -&amp;gt; PoS Smart contract (decentralized contract) </description>
    </item>
    
    <item>
      <title>Blockchain BitCoin Questions</title>
      <link>https://www.pseudoyu.com/zh/2020/10/28/blockchain-bitcoin-questions/</link>
      <pubDate>Wed, 28 Oct 2020 14:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/28/blockchain-bitcoin-questions/</guid>
      <description>Blockchain Technology and Applications BitCoin System (Transaction-based ledger) Additional questions  Q: In a transaction, the receiver is not connected to the bitcoin network.  A: No need online, just records   Q: Lost private key  A: No solution Exchanges: Mt. Gox   Q: Wrong address  A: No solution   Q: OP_RETURN, return mistake, why it&amp;rsquo;s still executed?  A: OP_RETURN is in the output, so it will be verified in the next TX   Q: How to judge who find the nonce first?</description>
    </item>
    
    <item>
      <title>Blockchain BitCoin Anonymity</title>
      <link>https://www.pseudoyu.com/zh/2020/10/28/blockchain-bitcoin-anonymity/</link>
      <pubDate>Wed, 28 Oct 2020 10:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/28/blockchain-bitcoin-anonymity/</guid>
      <description>Blockchain Technology and Applications BitCoin System (Transaction-based ledger) Anonymity  Pseudonymity Threats  Address generation  Analyze tx Analyze wallets (if used)   Connection to real identity  KYC (Know Your Customer)     Bad use  Silk road (eBay for illegal drugs)   Tips  TOR browser Coin mixing   Zero-knowledge proof  Signature (public key - private key)   Possible solution  Sacrifice  Performance Not absolutely secure   Zerocoin  Base coin Zero coin   Zerocash    </description>
    </item>
    
    <item>
      <title>ICOM6012 Topic 4 Transport Layer</title>
      <link>https://www.pseudoyu.com/zh/2020/10/28/icom6012-topic-4-transport-layer/</link>
      <pubDate>Wed, 28 Oct 2020 09:37:44 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/28/icom6012-topic-4-transport-layer/</guid>
      <description>ICOM6012 Internet Infrastructure Technologies Topic 4 Transport Layer Actions Sender  Get application layer message Determine segment header fields values Create segment Pass segment to IP  Receiver  Receive segment from IP Check header values Extract application layer message Demultiplexes message up to application via socket  Services Provide logical communication between processes Run in end system  Send side  Break app messages into segment Pass to network layer   Receive side  Reassembles segments into messages Pass to application layer    Protocols TCP  Features  Point-to-point  One sender, one receiver   Reliable, in-order byte system  No message boundaries   Full duplex data  Bi-directional data flow in same connection MSS: maximum segment size (excluding header)   Cumulative ACKs Pipelining  TCP congestion and flow control set window size   Flow Control  Sender will not overwhelm receiver   Congestion control   Concepts  Segment structure Sequence numbers  Byte stream &amp;ldquo;number&amp;rdquo; of first byte in segment&amp;rsquo;s data   Acknowledgements (ACKs)  Seq # of next byte expected from other side Cumulative ACKs     Procedure  Connection-oriented  Handshaking initializes sender, receiver state before data exchange TCP socket identified by 4-tuple  Source IP Source Port # Dest IP Dest Port #   Server host may support many simultaneous TCP sockets Web servers have different sockets for each connecting client (Non-persistent HTTP will have different socket for each request) Demux  Receiver uses all four values to direct segment to appropriate socket     3-way handshake  Connection setup   Connection management  Handshake  Agree to establish connection Agree on connection parameters     Retransmission Closing a connection   Events  Data received from application  Create segment with seq # (a byte-stream number of first data byte in segment) Start timer if not already running  Think of timer as for oldest unACKed segment Expiration interval: TimeOutInterval     Timeout  Retransmit segment that caused timeout Restart timer   ACK received  Update what is known to ACKed Start timer if there are still unACKed segment     Shortcomings  SYN DoS Attack  Half-open TCP connections consume all the TCP connection resources SYN packet with a spoofed source address      UDP   Features</description>
    </item>
    
    <item>
      <title>Java Basics</title>
      <link>https://www.pseudoyu.com/zh/2020/10/28/java-basics/</link>
      <pubDate>Wed, 28 Oct 2020 08:50:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/28/java-basics/</guid>
      <description>Java Basics Java Basics Data Type Primitive type  byte/8 char/16 short/16 int/32 float/32 long/64 double/64 boolean/~  Value  true(1) false(0)   JVM will convert it to int when compiling    Types &amp;lt;-&amp;gt; Warpper class  boolean - Boolean byte - Byte char - Character float - Float int - Integer long - Long short - Short double - Double  Autoboxing  Use valueOf() method primitive types -&amp;gt; corresponding object wrapper classes (e.</description>
    </item>
    
    <item>
      <title>Blockchain BitCoin Scripts</title>
      <link>https://www.pseudoyu.com/zh/2020/10/24/blockchain-bitcoin-scripts/</link>
      <pubDate>Sat, 24 Oct 2020 09:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/24/blockchain-bitcoin-scripts/</guid>
      <description>Blockchain Technology and Applications BitCoin System (Transaction-based ledger) Scripts (stack based language)  TX structure  txid hash version (of bitcoin) size locktime (take effect time) vin  txid vout scriptSig (input script)  asm hex     vout  value n scriptPubKey (output script) value   blockhash confirmations time (tx time) blocktime   Transaction  P2PK (Pay to Public Key)  input script  PUSHDATA (Sig) (signed by provate key)   output script  PUSHDATA (PubKey) CHECKSIG     P2PKH (Pay to Public Key Hash)  input script  PUSHDATA (Sig) (signed by provate key) PUSHDATA (PubKey)   output script  DUP (duplicate a PubKey) HASH160 (calculate the PubKey&amp;rsquo;s hash) PUSHDATA (PubKeyHash) EQUALVERIFY CHECKSIG     P2SH (Pay to Script Hash)  redeemScript  PUSHDATA (PubKey) CHECKSIG   input script  PUSHDATA (Sig) PUSHDATA (serialized redeemScript)   output script  HASH160 PUSHDATA (redeemScriptHash) EQUAL     Proof of Burn  Destroy bitcoin      </description>
    </item>
    
    <item>
      <title>Blockchain BitCoin Fork</title>
      <link>https://www.pseudoyu.com/zh/2020/10/23/blockchain-bitcoin-fork/</link>
      <pubDate>Fri, 23 Oct 2020 09:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/23/blockchain-bitcoin-fork/</guid>
      <description>Blockchain Technology and Applications BitCoin System (Transaction-based ledger) Fork  State fork  Forking attack (deliberate fork)   Protocol fork  Hard fork (permanent)  Block size limit (1M -&amp;gt; 4M)   Soft fork (&amp;gt; 50%, temporary)  Block size limit (1M -&amp;gt; 0.5M) coinbase  As extra nonce 2^32 -&amp;gt; 2^96 (adding 8 bytes) As root hash of UTXO   P2SH(Pay to Script Hash)      </description>
    </item>
    
    <item>
      <title>Blockchain BitCoin Mining</title>
      <link>https://www.pseudoyu.com/zh/2020/10/22/blockchain-bitcoin-mining/</link>
      <pubDate>Thu, 22 Oct 2020 09:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/22/blockchain-bitcoin-mining/</guid>
      <description>Blockchain Technology and Applications BitCoin System (Transaction-based ledger) Mining  Solve puzzles  Average block time  10 minutes   Difficulty  Target = target * (actual time / expected time) Adjust every 2 weeks Ar most 4 times, at least 1/4     Bernoulli process (nearly poisson process in BitCoin mining)  Bernoulli trial  A random experiment with binary outcome   A sequence of independent Bernoulli trial   Feature  Memoryless Progress free  Ensure the fairness of mining   Exponential distribution   Device (Universal -&amp;gt; Specific)  CPU GPU ASIC (Application Specific Integrated Circuit)) Mining pool (on demand mining)  Pool manager (risks of 51% attack) miners      </description>
    </item>
    
    <item>
      <title>Blockchain BitCoin Features</title>
      <link>https://www.pseudoyu.com/zh/2020/10/21/blockchain-bitcoin-features/</link>
      <pubDate>Wed, 21 Oct 2020 22:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/21/blockchain-bitcoin-features/</guid>
      <description>Blockchain Technology and Applications BitCoin System (Transaction-based ledger) UTXO (Unspent Transaction Output)  Total inputs = total outputs  Quantity  21,000,000  Block reward  Coinbase transaction Cut half every 4 year  Transaction fee BitCoin network  Structure  Application layer  BitCoin blockchain   Network layer  P2P overlay network     Node  Seed node   Feature  Simple Robust Not efficient &amp;ldquo;Best effort&amp;rdquo;   Message transport  Flooding    Security  Problem  Sybil attack Forking attack Boycott Selfish mining  Reduce competition     Solution  Based on computing power (large cost) Require 6 confirmation by nodes (long time, about 1 hour)    </description>
    </item>
    
    <item>
      <title>ICOM6045 Topic 1 Cryptography</title>
      <link>https://www.pseudoyu.com/zh/2020/10/21/icom6045-topic-1-cryptography/</link>
      <pubDate>Wed, 21 Oct 2020 19:53:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/21/icom6045-topic-1-cryptography/</guid>
      <description>ICOM6045 Fundamentals of E-Commerce Security Topic 1 Cryptography </description>
    </item>
    
    <item>
      <title>Blockchain Protocol</title>
      <link>https://www.pseudoyu.com/zh/2020/10/21/blockchain-protocol/</link>
      <pubDate>Wed, 21 Oct 2020 12:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/21/blockchain-protocol/</guid>
      <description>Blockchain Technology and Applications Protocol Distributed consensus  &amp;ldquo;Impossibility result&amp;rdquo;  FLP  In an asynchronous system, if one faulty exists, there is no consensus   CAP Theorem  Consistency Availability Partition tolerance     Example  Distributed hash table    Consensus in BitCoin  Membership (decide who can vote)  Hyperledger  Fabric     Vote by computing power (based on puzzle friendly) Increasing concern  Win  Longest valid chain   Lose  Orphan block      </description>
    </item>
    
    <item>
      <title>Blockchain Cryptography</title>
      <link>https://www.pseudoyu.com/zh/2020/10/21/blockchain-cryptography/</link>
      <pubDate>Wed, 21 Oct 2020 09:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/21/blockchain-cryptography/</guid>
      <description>Blockchain Technology and Applications Cryptography Cryptographic hash function  Application  Digital commitment (digital equivalent of a sealed envelop)  H(x || nonce)   SHA-256 (used in bitcoin)   Features  Collision resistance  x != y, H(x) = H(y) MD5 (proved bad)   Hiding  x -&amp;gt; H(x), H(x) !-&amp;gt; x   Puzzle friendly  H(block header) &amp;lt;= target Keep trying nonce, no shortcuts Difficult to solve, but easy to verify Application  PoW (Proof of Work)        Encryption  Symmetric encryption  Use the same one key Not secure to transport encryption key   Asymmetric encryption (public key encryption)  Use two keys (one for encryption, another for decryption) A good source of randomness (assume) Application  Signature (used in bitcoin)      </description>
    </item>
    
    <item>
      <title>Blockchain Data Structure</title>
      <link>https://www.pseudoyu.com/zh/2020/10/21/blockchain-data-structure/</link>
      <pubDate>Wed, 21 Oct 2020 09:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/21/blockchain-data-structure/</guid>
      <description>Blockchain Technology and Applications Data Structure Hash pointer (blockchain is a linked list using hash pointers)
 Genesis block &amp;lt;- block1 &amp;lt;- block2 &amp;lt;-&amp;hellip;&amp;lt;- recent block (every block has a hash pointer) Tamper-event log  Merkle tree (using hash pointer instead of pointer)  Merkle proof (proof of membership/inclusion)  O(log(n))   Think: proof of non-membership  O(n) Sorted merkle tree: O(log(n))    Application (blockchain)  Node  Full node (fully validating node)  Block header  Version Hash of previous block header Merkle root hash (protect all nodes) Target Nonce   Block body  Transaction lists     Light node (light weight node)  Only store block headers     Problem  Double spending    </description>
    </item>
    
    <item>
      <title>ICOM6012 Topic 3 Application Layer</title>
      <link>https://www.pseudoyu.com/zh/2020/10/19/icom6012-topic-3-application-layer/</link>
      <pubDate>Mon, 19 Oct 2020 17:50:44 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/19/icom6012-topic-3-application-layer/</guid>
      <description>ICOM6012 Internet Infrastructure Technologies Topic 3 Application Layer Creating a Network App Run on different end systems Communication over network No need to write for network-core devices Client-Server Architecture (The Centralized Internet) Server Always-on host Permanent IP address Often in data centers (for scaling) Clients Contact, communicate with server May be intermittently connected May have dynamic IP addresses Don&amp;rsquo;t communicate directly with each other Peer-to-Peer (P2P) Architecture No always-on server</description>
    </item>
    
    <item>
      <title>区块链学习路径</title>
      <link>https://www.pseudoyu.com/zh/2020/10/18/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Sun, 18 Oct 2020 09:20:31 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/18/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/</guid>
      <description>区块链学习计划 学习路径 10月 学习Java基础 CS61B - UC Berkley Java笔记 - GitHub 学习区块链基础 区块链原理 区块链技术与应用 - 肖臻 整理知识体系 Bitcoin and Cryptocurrency Technology - Coursera 完</description>
    </item>
    
    <item>
      <title>区块链知识体系</title>
      <link>https://www.pseudoyu.com/zh/2020/10/18/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</link>
      <pubDate>Sun, 18 Oct 2020 09:20:31 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/18/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</guid>
      <description>区块链学习计划 知识结构 算法刷题 剑指Offer LeetCode 笔试面试题库 编程语言 Java相关 基础 CS61B - UC Berkley Java学习笔记 - GitHub 容器 并发 多线程编程（threa</description>
    </item>
    
    <item>
      <title>ECOM6013 Topic 8 Blockchain and Cybercurrency</title>
      <link>https://www.pseudoyu.com/zh/2020/10/09/ecom6013-topic-8-blockchain-and-cybercurrency/</link>
      <pubDate>Fri, 09 Oct 2020 11:01:28 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/09/ecom6013-topic-8-blockchain-and-cybercurrency/</guid>
      <description>ECOM6013 E-Commerce Technologies Topic 8 Blockchain and Cybercurrency Form of Money
 Token money  Physical token Value is lost without the token No intermediary is required for spending Requires faith in the issuer (a government or a bank)   Notationary money  Notation/entry in a ledger, passbook, or database Can&amp;rsquo;t be lost Requires an intermediary Requires faith in the maintainer of the ledger   Hybrid money  Requires both a token and a ledger account Can be lost Requires an intermediary Requires faith in the issuer   Virtual money  No token/ledger Can be lost No intermediary required No issuer, no government backing   Digital money  String of bytes (data) stored on a device Value is lost/stolen when devices fail/invaded   Cybercurrency  Bitcoin is the most influential one Based on blockchain    Bitcoin</description>
    </item>
    
    <item>
      <title>ICOM6012 Topic 2 The Big Picture</title>
      <link>https://www.pseudoyu.com/zh/2020/10/05/icom6012-topic-2-the-big-picture/</link>
      <pubDate>Mon, 05 Oct 2020 09:06:09 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/05/icom6012-topic-2-the-big-picture/</guid>
      <description>ICOM6012 Internet Infrastructure Technologies Topic 2 The Big Picture The Internet: &amp;ldquo;nuts and bolts&amp;rdquo; view
 Billions of connected computing devices  Host = end system Running network apps Internet of things (IoT)   Packet switches  routers switchers   Communication links  Fiber, copper, radio, satellite Transmission rate: bandwidth   Networks  Collection of devices, routers, switches, links Managed by an organization   Internet: &amp;ldquo;network of networks&amp;rdquo;  Interconnected ISPs   Protocols  Control sending, receiving of messages   Internet standards  RFC: Requests for Comments IETF: Internet Engineering Task Force IEEE: Institute of Electronical &amp;amp; Electronic Engineering    The Internet: a &amp;ldquo;service&amp;rdquo; view</description>
    </item>
    
    <item>
      <title>COMP7404 Topic 3 Adversarial Search</title>
      <link>https://www.pseudoyu.com/zh/2020/10/05/comp7404-topic-3-adversarial-search/</link>
      <pubDate>Mon, 05 Oct 2020 00:30:11 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/05/comp7404-topic-3-adversarial-search/</guid>
      <description>COMP7404 Computational Intelligence and Machine Learning Topic 3 Adversarial Search A Multi-agent Competitive Environment
 Other agents are planning against us Goals are in conflict (not necessarily)  Game Definition
 A game can be defined as  s : States s0: Initial state Player(s) : Defines which player has the move Actions(s) : Returns a set of legal moves Result(s,a) : Defines the result of a move TerminalTest(s) : True when game is over, false otherwise Utility(s,p) : Defines the final numeric value for a game that ends in terminal state s for player p   A game tree can be constructed  Nodes are game states and edges are moves    Tic-Tac-Toe Game Tree</description>
    </item>
    
    <item>
      <title>COMP7404 Topic 2 Beyond Classical Search</title>
      <link>https://www.pseudoyu.com/zh/2020/10/04/comp7404-topic-2-beyond-classical-search/</link>
      <pubDate>Sun, 04 Oct 2020 21:30:11 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/04/comp7404-topic-2-beyond-classical-search/</guid>
      <description>COMP7404 Computational Intelligence and Machine Learning Topic 2 Beyond Classical Search Planning vs Identification
 Planing: sequence of actions  The path to the goal is the important thing Paths have various costs, depths Heuristics to guide, frontier to keep backups   Identification: assignments to variables  The goal itself is important, not the path    Local Search can find solutions faster for specific types of identification problems</description>
    </item>
    
  </channel>
</rss>