<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0">
  <channel>
    <title>Pseudoyu</title>
    <link>https://www.pseudoyu.com/zh/</link>
    <description>Recent content on Pseudoyu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 17 Feb 2021 00:00:00 +0800</lastBuildDate>
    
    <atom:link href="https://www.pseudoyu.com/zh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>https://www.pseudoyu.com/zh/about/</link>
      <pubDate>Thu, 04 Mar 2021 16:03:46 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/about/</guid>
      
        <description>&lt;h2 id=&#34;hi我是-yu-zhanghttpswwwpseudoyucom&#34;&gt;Hi，我是 &lt;a href=&#34;https://www.pseudoyu.com&#34;&gt;Yu Zhang&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在香港大学计算机系读研，正在学习区块链，空闲也折腾Notion等效率工具，欢迎交流。&lt;/p&gt;
&lt;p&gt;希望不断学习，不断成长。现阶段的目标是能够在忙碌的闲隙里不断思考，多阅读写作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/dino.gif&#34; alt=&#34;picture&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;个人希望&#34;&gt;个人希望&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;生活方面&lt;/strong&gt;&lt;/em&gt;，希望能够和现在的挚友一直相互支持走下去，和家人保持现在这样亦亲亦友的关系，和在意的人一起面对人生的挑战，同时也能认识更多有趣的人。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;专业方面&lt;/strong&gt;&lt;/em&gt;，希望一直有所进步，能够在开源世界留下一些痕迹。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;经济方面&lt;/strong&gt;&lt;/em&gt;，希望能自主无虞，足够支撑做自己想做的事，探索更多元的未来生活。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;社会方面&lt;/strong&gt;&lt;/em&gt;，希望有机会做参与一些公益活动或其他形式的善举，为世界带来一些微小的改变。&lt;/p&gt;
&lt;h2 id=&#34;关于网站&#34;&gt;关于网站&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Pseudoyu&lt;/strong&gt; 是我的第一个网站，主要用来记录生活、学习与零碎的一些想法。最早基于WordPress并放在自己的个人服务器上，后又迁移至同名微信公众号，最后出于稳定性和自由度考虑还是决定用Hugo生成自己的静态网页，托管于GitHub并绑定 &lt;a href=&#34;https://www.pseudoyu.com/zh/&#34;&gt;pseudoyu.com&lt;/a&gt; 域名。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pseudoyu&lt;/strong&gt; 的命名很巧合，在HKU入学注册时因为自己名字过于常见而很难抉择使用什么uid，后取用了一个前缀「&lt;a href=&#34;https://www.oxfordlearnersdictionaries.com/definition/english/pseudo&#34;&gt;pseudo&lt;/a&gt;」，&lt;a href=&#34;https://www.oxfordlearnersdictionaries.com/definition/english/pseudonym&#34;&gt;pseudonym&lt;/a&gt; 有「笔名、假名」的含义，编程里常用到的 &lt;a href=&#34;https://www.lexico.com/definition/pseudocode&#34;&gt;pseudocode&lt;/a&gt; 是「伪码」的含义，而很喜欢的日漫 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%81%BD%E7%89%A9%E8%AA%9E&#34;&gt;&lt;em&gt;物语系列 - 伪物语&lt;/em&gt;&lt;/a&gt; 中也不乏对「真物」与「伪物」的探究，那为什么不能有一个 pseudo 的 yu（我）呢？&lt;/p&gt;
&lt;p&gt;我常辗转于自我怀疑之中，在与挚友聊天时谈及「初心」或是「意义」时总是选择逃避，即使取得一些世俗的小成就也很难从心底感受到喜悦或满足，总觉得一切都如同「伪物」一样毫无意义。而随着年岁与经历的增长，我在另一篇文章 &lt;a href=&#34;https://www.pseudoyu.com/zh/2020/06/06/23%E5%B2%81%E7%9A%84%E8%87%AA%E7%99%BD%E5%8E%BB%E8%BF%BD%E5%AF%BB%E6%84%8F%E4%B9%89/&#34;&gt;&lt;em&gt;23岁的自白：去追寻意义&lt;/em&gt;&lt;/a&gt; 中写道，「&lt;em&gt;也许思考本身就是建构意义的过程，让我不再期待某个瞬间能够顿悟，只是希望继续向前，体验和追寻着自己的人生.&lt;/em&gt;」&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pseudoyu&lt;/strong&gt; 这个名字也是寓意自己不应该再时常纠结意义，而是要不断去学习、体验与挑战新的事物，即使被评价「变了」、「不像自己」也能欣然接受。&lt;/p&gt;
&lt;p&gt;希望自己能多输入一些新的知识和想法，多写一些小文章。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>用OKR的方式梳理自己的学习计划</title>
      <link>https://www.pseudoyu.com/zh/2021/02/17/learning_plan_okr/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2021/02/17/learning_plan_okr/</guid>
      
        <description>&lt;h2 id=&#34;用一句话形容理想情况下自己想要达到的状态&#34;&gt;用一句话形容理想情况下，自己想要达到的状态&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;具体目标范围&lt;/strong&gt;：提升编程技术能力&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间周期&lt;/strong&gt;：2个月&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;描述&lt;/strong&gt;：我想要成为一名具备过硬的编程能力的开发者，并对技术有持续学习的开放心态 &lt;em&gt;&lt;strong&gt;— 目标O&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;寻找关键词拆解状态为目标&#34;&gt;寻找关键词，拆解状态为目标&lt;/h2&gt;
&lt;h3 id=&#34;我需要提升解决的部分&#34;&gt;我需要提升解决的部分&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;过硬的编程能力&lt;/li&gt;
&lt;li&gt;持续学习的开放心态&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;想要达到的程度&#34;&gt;想要达到的程度&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;能够通过技术创造价值&lt;/li&gt;
&lt;li&gt;对技术有热爱和追求&lt;/li&gt;
&lt;li&gt;B站Up主“是落拓呀”的持续学习状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;制定每一个关键词目标的指标&#34;&gt;制定每一个关键词/目标的指标&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;过硬的编程能力&lt;/strong&gt;：能够满足目前香港/内地区块链公司，如蚂蚁链、腾讯区块链、杭州趣链科技等目标公司的技术面试要求，并主导完成1-2个完整的项目，深入技术细节 &lt;strong&gt;— KR1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持续学习的开放心态&lt;/strong&gt;：提升对于热门区块链技术平台（Ethereum、Hyperledger）与Java后端技术的理解与学习，并完成多篇原创技术博客 &lt;strong&gt;— KR2&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;填充每一个关键指标的todo-list&#34;&gt;填充每一个关键指标的todo list&lt;/h2&gt;
&lt;h3 id=&#34;过硬的编程能力&#34;&gt;过硬的编程能力&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;每天按照分类与难度刷LeetCode算法题
&lt;ol&gt;
&lt;li&gt;白天刷5-10题&lt;/li&gt;
&lt;li&gt;晚上按照节奏复习之前刷过的题的思路&lt;/li&gt;
&lt;li&gt;看关于算法框架思路的书籍，完善&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;完成区块链音乐版权项目毕业设计
&lt;ol&gt;
&lt;li&gt;每天至少2小时学习Ethereum智能合约编写相关&lt;/li&gt;
&lt;li&gt;按照项目进度进行开发&lt;/li&gt;
&lt;li&gt;与导师和同学定期交流，优化项目&lt;/li&gt;
&lt;li&gt;调研市场上区块链产品，思考运营与商业化相关&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;完成开源项目RPC框架的学习
&lt;ol&gt;
&lt;li&gt;每天至少1小时学习课程并实践代码&lt;/li&gt;
&lt;li&gt;撰写关于RPC框架原理和核心知识点的技术博文&lt;/li&gt;
&lt;li&gt;将此作为亮点项目，添加至简历并与同学进行模拟面试&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;针对GitHub与一些书籍的面试经验，学习掌握计算机基础面试知识，和同学每周模拟面试，现场写算法题并讲解，找到问题并提出建议&lt;/li&gt;
&lt;li&gt;参加春招面试，积攒面试经验查漏补缺，总结心得&lt;/li&gt;
&lt;li&gt;和落拓学长交流区块链学习心得和路径，寻求建议&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;持续学习的开放心态&#34;&gt;持续学习的开放心态&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;完成学校COMP7408区块链与分布式账本课程（共计30学时，每周一节3小时的课程）
&lt;ol&gt;
&lt;li&gt;每周一晚上参加线下课程&lt;/li&gt;
&lt;li&gt;课程第二天花3-6小时整理当周课程的知识点与拓展部分&lt;/li&gt;
&lt;li&gt;每周2-3小时将课程中的理论部分通过代码实践&lt;/li&gt;
&lt;li&gt;每天至少3天对之前所有知识点进行复习和查漏补缺（每次30分钟左右）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Udacity 区块链开发课程并整理笔记（共计约40学时）
&lt;ol&gt;
&lt;li&gt;每天至少2小时学习课程并实践代码&lt;/li&gt;
&lt;li&gt;每天至少3天对之前所有知识点进行复习和查漏补缺（每次30分钟左右）&lt;/li&gt;
&lt;li&gt;阶段性对课程里的项目进行详细整理，添加至简历并针对面试进行准备&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;每天学习间隙整理基础理论知识，并了解一些前沿技术和产品&lt;/li&gt;
&lt;li&gt;完成CSDN关于Spring Boot和其他框架的入门视频并整理&lt;/li&gt;
&lt;li&gt;完成Udacity关于Java开发相关框架的介绍并进行项目实践&lt;/li&gt;
&lt;li&gt;结合自己的理解与学习笔记，撰写针对特定技术的原创博客&lt;/li&gt;
&lt;li&gt;定期和目前从事区块链的同学进行交流讨论，补充项目经验至简历与面试准备&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>COMP7103 Topic 1 Introduction</title>
      <link>https://www.pseudoyu.com/zh/2021/01/28/comp7103_topic1/</link>
      <pubDate>Thu, 28 Jan 2021 01:18:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2021/01/28/comp7103_topic1/</guid>
      
        <description>&lt;h1 id=&#34;comp7103-data-mining&#34;&gt;COMP7103 Data Mining&lt;/h1&gt;
&lt;h2 id=&#34;topic-1-introduction&#34;&gt;Topic 1 Introduction&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Decision-Support System (DSS)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A decision-support system (DSS) is a system that assists decision makers to make important decisions for an organization or business&lt;/li&gt;
&lt;li&gt;KDD and data mining are important components in many DSS&amp;rsquo;s&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Data and Knowledge&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data
&lt;ul&gt;
&lt;li&gt;A collecion of facts about certain group of objects&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pattern
&lt;ul&gt;
&lt;li&gt;Certain characteristics of data that are frequently observed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Knowledge
&lt;ul&gt;
&lt;li&gt;Some general rules about the objects&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Data Warehouse&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An integration of various departmental databases (organization-wide data)&lt;/li&gt;
&lt;li&gt;Avoids overloading local operational databases&lt;/li&gt;
&lt;li&gt;A convenient place where KDD and data mining applications are performed&lt;/li&gt;
&lt;li&gt;Provide data mining algorithms an easy access to the required data&lt;/li&gt;
&lt;li&gt;Wrappers
&lt;ul&gt;
&lt;li&gt;Extract&lt;/li&gt;
&lt;li&gt;Transform&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can also be used to support other DSS tools, e.g. On-Line Analytical Processing (OLAP) - analyze large amount of data, Online Transaction Processing (OLTP)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Data Mining and KDD&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KDD (Knowledge Discovery in Databases)
&lt;ul&gt;
&lt;li&gt;A process of discovering useful knowledge from big collection of data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Mining
&lt;ul&gt;
&lt;li&gt;A step within the KDD process in which interesting patterns are found. Some of these patterns are then interpreted and transformed into useful knowledge.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Data Mining is a step in the whole KDD process&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;KDD is a process of identifying patterns in data and deriving knowledge from them&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;valid&lt;/li&gt;
&lt;li&gt;novel&lt;/li&gt;
&lt;li&gt;potentially useful&lt;/li&gt;
&lt;li&gt;understandable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Data Mining&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/data_mining_system.png&#34; alt=&#34;data_mining_system&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Databases&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bottom layer of the architecture&lt;/li&gt;
&lt;li&gt;Contains data sources (raw data)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Traditional Database usually only provides the functions of storing and retrieving facts&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The knowledge resulting from data mining should carry certain degree of predictive ability or descriptive (explanatory) ability (or both)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data Mining Engine&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Applies data mining algorithms on data&lt;/li&gt;
&lt;li&gt;Provides multiple functionality&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Evaluation Module&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allow users to specify what is/isn&amp;rsquo;t interesting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Knowledge Base&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Capture domain specific knowledge&lt;/li&gt;
&lt;li&gt;Stores the rules generated by data mining&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Graphical User Interface&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Presents mined patterns and rules to users in an easy-to-visualize way&lt;/li&gt;
&lt;li&gt;Provides feedback mechanisms for the users to specify the criteria of interestingness&lt;/li&gt;
&lt;li&gt;Provides a query language or query interface for users to select and retrieve&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Challenges of Data Mining&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Technical
&lt;ul&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Dimensionality&lt;/li&gt;
&lt;li&gt;Data stream&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data
&lt;ul&gt;
&lt;li&gt;Complex and heterogeneous data&lt;/li&gt;
&lt;li&gt;Data quality&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Privacy
&lt;ul&gt;
&lt;li&gt;Data ownership and distribution&lt;/li&gt;
&lt;li&gt;Privacy preservation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Results
&lt;ul&gt;
&lt;li&gt;Interpretation of patterns&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The KDD Process&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/kdd_process.png&#34; alt=&#34;kdd_process&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step 1: Goal Setting
&lt;ul&gt;
&lt;li&gt;Understand your application domain&lt;/li&gt;
&lt;li&gt;Obtain prior known knowledge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Step 2: Data Collection
&lt;ul&gt;
&lt;li&gt;Characteristics&lt;/li&gt;
&lt;li&gt;Where to find&lt;/li&gt;
&lt;li&gt;How to store&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Step 3: Data Cleaning and Preprocessing
&lt;ul&gt;
&lt;li&gt;Missing data&lt;/li&gt;
&lt;li&gt;Incorrect data (noise)&lt;/li&gt;
&lt;li&gt;Outliers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Step 4: Data Reduction and Transformation (or Preparation)
&lt;ul&gt;
&lt;li&gt;Compact data into a form&lt;/li&gt;
&lt;li&gt;Improve data mining algorithms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Step 5: Data Mining
&lt;ul&gt;
&lt;li&gt;Pick a data mining model&lt;/li&gt;
&lt;li&gt;Pick a data mining algorithm&lt;/li&gt;
&lt;li&gt;Apply the algorithm to the data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Step 6: Result Evaluation
&lt;ul&gt;
&lt;li&gt;Check the results and goals&lt;/li&gt;
&lt;li&gt;Refine and re-run (if not)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Step 7: Knowledge Consolidation
&lt;ul&gt;
&lt;li&gt;Document&lt;/li&gt;
&lt;li&gt;Report&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Iterative and Interactive&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some steps of the process need to be refined, and the whole process be repeated&lt;/li&gt;
&lt;li&gt;Certain amount of human involvement is needed to monitor and to fine tune the steps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Prediction&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uses database records that describe information about past behavior to automatically generate a model (or rule) that can predict future behavior&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Derive patterns that summarize the underlying relationships in data and to describe the characteristics of data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;OLAP (On-Line Analytical Processing)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;View data in a multi-dimensional model (a data cube)&lt;/li&gt;
&lt;li&gt;Fast aggregation&lt;/li&gt;
&lt;li&gt;Summarization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Selection -&amp;gt; Group-by -&amp;gt; Summarization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Classification&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Supervised learning&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Goal
&lt;ul&gt;
&lt;li&gt;Unseen records should be assigned a class (accuracy)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Approach
&lt;ul&gt;
&lt;li&gt;Given a training set&lt;/li&gt;
&lt;li&gt;Learn classifier&lt;/li&gt;
&lt;li&gt;Find a model&lt;/li&gt;
&lt;li&gt;Test the model using test set&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Direct Marketing
&lt;ul&gt;
&lt;li&gt;Reduce cost of mailing by targeting a set of consumers likely to buy a new cell-phone product&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regression&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Goal
&lt;ul&gt;
&lt;li&gt;Preduct a value of numerical variable based on the values of other variables&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Predicting sales amounts of new product based on advertising expenditure&lt;/li&gt;
&lt;li&gt;Predicting wind velocities as a function of temperature, humidity, air pressure, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Clustering&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given a set of data objects with a set of attributes and similarity measure&lt;/li&gt;
&lt;li&gt;Find clusters (e.g. distance-based clustering)
&lt;ul&gt;
&lt;li&gt;Maximize the intra-cluster similarity&lt;/li&gt;
&lt;li&gt;Minimize the inter-cluster similarity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Objects in one cluster are more similiar to one another&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/illustrating_cluster.png&#34; alt=&#34;illustrating_cluster&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Document Clustering
&lt;ul&gt;
&lt;li&gt;To find groups of documents that are similar to each other based on the important terms they contain&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Association Rule Discovery&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given a set of records each of which contains some items from a given collection&lt;/li&gt;
&lt;li&gt;Goal
&lt;ul&gt;
&lt;li&gt;Produce dependency rules which predict occurrence of an item based on occurrences of other items&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Marketing and Sales Promotion&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sequence Analysis&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given a sequence database contains sequences of events&lt;/li&gt;
&lt;li&gt;Find sequences
&lt;ul&gt;
&lt;li&gt;Interesting&lt;/li&gt;
&lt;li&gt;Frequently occurring&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Predict future behavior.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Renting movies&lt;/li&gt;
&lt;li&gt;Buying habits&lt;/li&gt;
&lt;li&gt;Web serving behavior&lt;/li&gt;
&lt;li&gt;Web log analysis&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Blockchain学习 - Bitcoin Core客户端</title>
      <link>https://www.pseudoyu.com/zh/2020/12/15/blockchain_note_bitcoin_core/</link>
      <pubDate>Tue, 15 Dec 2020 03:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/12/15/blockchain_note_bitcoin_core/</guid>
      
        <description>&lt;h3 id=&#34;bitcoin-core客户端&#34;&gt;Bitcoin Core客户端&lt;/h3&gt;
&lt;p&gt;比特币的实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bitcoin-QT&lt;/li&gt;
&lt;li&gt;Satoshi-client&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连接至比特币网络&lt;/li&gt;
&lt;li&gt;可验证区块链&lt;/li&gt;
&lt;li&gt;可以发送与接收区块链&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;网络&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mainnet&lt;/li&gt;
&lt;li&gt;Testnet&lt;/li&gt;
&lt;li&gt;Regnet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/blockchain_bitcoin_core_network.png&#34; alt=&#34;blockchain_bitcoin_core_network&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/blockchain_bitcoin_core_mainnet_testnet.png&#34; alt=&#34;blockchain_bitcoin_core_mainnet_testnet&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/blockchain_bitcoin_core_regnet_testnet.png&#34; alt=&#34;blockchain_bitcoin_core_regnet_testnet&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;debug-console&#34;&gt;Debug Console&lt;/h3&gt;
&lt;p&gt;与比特币区块链交互的工具&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Blockchain&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getblockchaininfo: 返回有关区块链处理的各种状态信息&lt;/li&gt;
&lt;li&gt;getblockcount: 返回区块链中的块数&lt;/li&gt;
&lt;li&gt;verifychain: 验证区块链数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hash&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getblockhash: 返回所提供的区块哈希值&lt;/li&gt;
&lt;li&gt;getnetworkhashps: 基于指定数量的最近块，返回每秒网络哈希数&lt;/li&gt;
&lt;li&gt;getbestblockhash: 返回最佳块的哈希值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Blocks&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getblock: 返回块信息的详细信息&lt;/li&gt;
&lt;li&gt;getblockheader: 返回有关区块头信息&lt;/li&gt;
&lt;li&gt;generate: 立即将指定数量的块挖矿到钱包中的一个地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Wallet&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getwalletinfo: 返回一个对象，该对象包含有关钱包状态的各种信息&lt;/li&gt;
&lt;li&gt;listwallets: 返回当前加载的钱包列表&lt;/li&gt;
&lt;li&gt;walletpassphrasechange: 更改钱包密码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Mempool&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getmempoolinfo: 返回内存池活动状态的详细信息&lt;/li&gt;
&lt;li&gt;getrawmempool: 返回内存池中的所有交易详细信息&lt;/li&gt;
&lt;li&gt;getmempoolentry: 返回给定交易的内存池数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Transaction&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getchaintxstats: 计算关于链中交易总数和速率的统计数据&lt;/li&gt;
&lt;li&gt;getrawtransaction: 返回原始交易数据&lt;/li&gt;
&lt;li&gt;listtransactions: 返回给定帐户的交易列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Signature&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;signrawtransaction: 签署原始交易的输入&lt;/li&gt;
&lt;li&gt;signmessage: 使用地址的私钥对信息进行签名&lt;/li&gt;
&lt;li&gt;dumpprivkey: 获取私钥&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Network&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getnetworkinfo: 返回P2P网络的状态信息&lt;/li&gt;
&lt;li&gt;getpeerinfo: 返回每个连接网络节点的数据&lt;/li&gt;
&lt;li&gt;getconnectioncount: 返回节点的连接数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Mining&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getmininginfo: 返回包含挖掘相关信息的对象&lt;/li&gt;
&lt;li&gt;getblocktemplate: 返回构造块所需的数据&lt;/li&gt;
&lt;li&gt;prioritisetransaction: 以较高或较低的优先级接受交易进入挖掘的块&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Blockchain学习 - 比特币</title>
      <link>https://www.pseudoyu.com/zh/2020/12/13/blockchain_note_bitcoin/</link>
      <pubDate>Sun, 13 Dec 2020 03:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/12/13/blockchain_note_bitcoin/</guid>
      
        <description>&lt;h2 id=&#34;比特币的数据结构&#34;&gt;比特币的数据结构&lt;/h2&gt;
&lt;h3 id=&#34;哈希指针-hash-pointers&#34;&gt;哈希指针 Hash Pointers&lt;/h3&gt;
&lt;p&gt;哈希指针指向一个结构体的哈希值（整个区块+其H()一起算出下一个值）&lt;/p&gt;
&lt;p&gt;特征&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tamper-evident log&lt;/li&gt;
&lt;li&gt;如果这个区块被篡改，则会影响后续所有区块，最终导致和本地存储的哈希指针对不上&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;默克尔树-merkle-tree&#34;&gt;默克尔树 Merkle Tree&lt;/h3&gt;
&lt;p&gt;比特币中，每个数据块其实是一种交易transaction&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;区块
&lt;ul&gt;
&lt;li&gt;Block header 块头：有根哈希值，没有交易具体内容&lt;/li&gt;
&lt;li&gt;Block body 块身：有交易列表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Merkle Tree&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点类型
&lt;ul&gt;
&lt;li&gt;Full Node 全节点：保存Block header和Block body&lt;/li&gt;
&lt;li&gt;Light Node 轻节点：只保存Block Header，如手机上的比特币钱包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;只要存放root hash，就能检测出树中任意节点的修改&lt;/li&gt;
&lt;li&gt;Merkle proof：如何向轻节点证明某个交易写入区块链（复杂度为O(logN)，Proof of Membership）&lt;/li&gt;
&lt;li&gt;Proof of non-membership
&lt;ul&gt;
&lt;li&gt;遍历验证，复杂度为O(n)&lt;/li&gt;
&lt;li&gt;可以对叶节点按哈希值大小进行排序，用二分法对相邻的数据块分别向上取哈希值，直到root hash验证，复杂度为O(logN)，称为sorted merkle tree，比特币没有采用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;问题央行如何发行数字货币&#34;&gt;问题：央行如何发行数字货币&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;谁有权力发行&lt;/li&gt;
&lt;li&gt;怎么验证交易有效性，防止双花攻击
&lt;ul&gt;
&lt;li&gt;数字货币交易
&lt;ul&gt;
&lt;li&gt;Input：说明币的来源和支付人的公钥&lt;/li&gt;
&lt;li&gt;Output：说明接收者的公钥Hash（即地址）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;交易信息写进区块链
&lt;ul&gt;
&lt;li&gt;账本的内容需要取得分布式共识（Distributed consensus）&lt;/li&gt;
&lt;li&gt;分布式哈希表，即系统里许多节点共同维护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FLP Impossibility：在一个异步系统里，网络传输延迟没有上限，哪怕系统中有一个进程失败，无法达成共识&lt;/p&gt;
&lt;p&gt;CAP Theorem，三个要素最多只能同时实现两点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一致性 Consistency&lt;/li&gt;
&lt;li&gt;可用性 Availability&lt;/li&gt;
&lt;li&gt;分区容错性 Partition tolerance&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;比特币共识协议&#34;&gt;比特币共识协议&lt;/h3&gt;
&lt;p&gt;解决系统中有部分节点是恶意的，解决思路为过半数同意，其中谁有投票权&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;风险：Sybil attack 女巫攻击，利用少数节点控制多个虚假身份&lt;/li&gt;
&lt;li&gt;比特币解决方案：工作量证明机制（算力投票机制）
&lt;ul&gt;
&lt;li&gt;全网广播新的数据记录&lt;/li&gt;
&lt;li&gt;全网执行共识算法，即暴力求解数学难题&lt;/li&gt;
&lt;li&gt;率先解出难题的矿工获得记账权，产生新区块&lt;/li&gt;
&lt;li&gt;对外广播新区块，其他节点验证通过后加至主链&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最长合法链
&lt;ul&gt;
&lt;li&gt;分叉攻击&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同时挖到矿，出现两个等长区块，则会维持一段时间，看哪个区块先被接上&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;比特币系统的实现&#34;&gt;比特币系统的实现&lt;/h2&gt;
&lt;p&gt;基于交易的账本模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UTXO: Unspent Transaction Outputs，未花费交易输出&lt;/li&gt;
&lt;li&gt;比特币系统中，要确认一个地址的余额需要回顾以前所有的交易，并且找到所有给自己的比特币并相加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;预防双花的机制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设Alice收了了两笔交易，共计5 BTC（2+3）&lt;/li&gt;
&lt;li&gt;Alice拥有了两笔UTXO，可作为未来转钱给别人的input&lt;/li&gt;
&lt;li&gt;当Alice想要转账给别人，矿工需要验证的是有没有在其他交易在先前的区块中已经使用过这笔Unspent Output&lt;/li&gt;
&lt;li&gt;如果同一笔输出已经被发送过，就不是Unspent了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;区块链是不可篡改的账本的特性只是概率上的保证，刚写入block的区块是容易篡改的，比特币采用6个confirmation来保障。&lt;/p&gt;
&lt;h2 id=&#34;比特币网络工作原理&#34;&gt;比特币网络工作原理&lt;/h2&gt;
&lt;h3 id=&#34;设计原则&#34;&gt;设计原则&lt;/h3&gt;
&lt;p&gt;simple, robust but not efficient&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用层 - 运行Bitcoin Blockchain&lt;/li&gt;
&lt;li&gt;网络层 - 运行P2P Overlay Network&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;节点工作流程&#34;&gt;节点工作流程&lt;/h3&gt;
&lt;p&gt;每个节点都要维护一个等待上链的交易的集合，一个区块大小为1M，需要几秒才能传到大多数节点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监听到A→B的交易，就将其写入集合&lt;/li&gt;
&lt;li&gt;如果同时有A→C的双花攻击，该节点不会再写入&lt;/li&gt;
&lt;li&gt;如果监听到有同样一笔A→B交易，会将该集合中的该笔交易删除&lt;/li&gt;
&lt;li&gt;如果监听到有一笔A→C的交易（同一个币来源），也会将该集合中A→这笔交易删除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;比特币挖矿&#34;&gt;比特币挖矿&lt;/h2&gt;
&lt;p&gt;为什么要挖矿&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Block reward 出块奖励：coinbase tx是唯一一个产生新币的途径&lt;/li&gt;
&lt;li&gt;矿工费&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;挖矿：不断尝试nonce值，是Block header立德hash值≤给定的目标阈值&lt;/p&gt;
&lt;p&gt;H(block header) ≤ target （target是难度为1的时候所对应的阈值，target越小，挖矿难度越大）&lt;/p&gt;
&lt;p&gt;difficulty = (difficulty - 1 - target) / target&lt;/p&gt;
&lt;p&gt;挖矿过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一次挖矿过程都是随机测试&lt;/li&gt;
&lt;li&gt;每次试nonce构成了无记忆性&lt;/li&gt;
&lt;li&gt;次数很多，但是成功率很低&lt;/li&gt;
&lt;li&gt;出块时间服从指数分布&lt;/li&gt;
&lt;li&gt;从任何一点开始，成功概率不变，所以给予算力成比例优势&lt;/li&gt;
&lt;li&gt;挖矿并不是解数学题，挖矿难度是人为设定的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为什么要调整难度&#34;&gt;为什么要调整难度&lt;/h3&gt;
&lt;p&gt;出块时间太短容易出现分叉，分叉过多则会影响系统达成共识，危害系统安全性&lt;/p&gt;
&lt;p&gt;BTC的储廥速度是10分钟，ETH出块速度是15秒（意味着ETH需要新的协议，ghost → orphan block不能简单丢弃，而是要给奖励，uncle reward）&lt;/p&gt;
&lt;h3 id=&#34;如何调整挖矿难度&#34;&gt;如何调整挖矿难度&lt;/h3&gt;
&lt;p&gt;每2016个区块（约两周）调整一次目标阈值，存在Block header中，有个nbits，是编码的版本&lt;/p&gt;
&lt;p&gt;target = target * (actual time / expected time)&lt;/p&gt;
&lt;p&gt;actual time → 系统中产生2016个区块花费的时间&lt;/p&gt;
&lt;p&gt;expected time → 产生2016个区块预计花费的时间（约14天）&lt;/p&gt;
&lt;p&gt;恶意节点不调整代码中的target的话，诚实的矿工则不会认可&lt;/p&gt;
&lt;p&gt;全节点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一直在线&lt;/li&gt;
&lt;li&gt;在本地硬盘上维护完整的区块链信息&lt;/li&gt;
&lt;li&gt;在内存里维护UTXO集合，以便于快速检验交易的正确性&lt;/li&gt;
&lt;li&gt;监听比特币网络上的交易信息，验证每个交易的合法性&lt;/li&gt;
&lt;li&gt;决定哪些交易会被打包到区块里&lt;/li&gt;
&lt;li&gt;监听别的矿工挖出来的区块，验证其合法性&lt;/li&gt;
&lt;li&gt;挖矿
&lt;ul&gt;
&lt;li&gt;决定沿着哪条链挖下去&lt;/li&gt;
&lt;li&gt;当出现等长的分叉时，选择哪一个分叉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;轻节点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不是一直在线&lt;/li&gt;
&lt;li&gt;不用保存整个区块链，只需要保存每个区块的块头&lt;/li&gt;
&lt;li&gt;不用保存全部交易，只需要保存与自己有关的交易&lt;/li&gt;
&lt;li&gt;无法检验大多交易的合法性，只能检验与自己相关的那些交易的合法性&lt;/li&gt;
&lt;li&gt;无法检测网上发布区块的正确性&lt;/li&gt;
&lt;li&gt;可以验证挖矿的难度&lt;/li&gt;
&lt;li&gt;只能检测哪个是最长链，不知道哪个是最长合法链&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;挖矿设备&#34;&gt;挖矿设备&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;li&gt;GPU → 主要用于通用并行计算&lt;/li&gt;
&lt;li&gt;ASIC → Application Specific Integrated circuit&lt;/li&gt;
&lt;li&gt;大型矿池
&lt;ul&gt;
&lt;li&gt;Pool Manager：负责全节点要做的事&lt;/li&gt;
&lt;li&gt;Miner：计算hash值，通过POW分配收益&lt;/li&gt;
&lt;li&gt;如矿池达到51%以上算力
&lt;ul&gt;
&lt;li&gt;Forking attack，回滚交易&lt;/li&gt;
&lt;li&gt;Boycott，全网抵制与B有关的任何交易&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;比特币分叉&#34;&gt;比特币分叉&lt;/h2&gt;
&lt;h3 id=&#34;分叉类型&#34;&gt;分叉类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;state fork
&lt;ul&gt;
&lt;li&gt;forking attack (deliberate fork)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;protocol fork（因为对BTC协议产生分歧而造成的分叉）
&lt;ul&gt;
&lt;li&gt;hard fork
&lt;ul&gt;
&lt;li&gt;例如对block size limit的变化 1M  → 4M&lt;/li&gt;
&lt;li&gt;产生了永久性分叉&lt;/li&gt;
&lt;li&gt;两条链平行发展，各挖各的，互不认可，形成两种币&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;soft fork
&lt;ul&gt;
&lt;li&gt;例如对block size limit的变化 1M  → 0.5M&lt;/li&gt;
&lt;li&gt;新节点挖小区块，即使旧节点挖出了大区块，也会被放弃，再次出现分叉&lt;/li&gt;
&lt;li&gt;旧节点挖大区块&lt;/li&gt;
&lt;li&gt;出现软分叉的情况
&lt;ul&gt;
&lt;li&gt;coinbase内容修改&lt;/li&gt;
&lt;li&gt;P2SH: Pay to Script Hash&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;比特币的匿名性&#34;&gt;比特币的匿名性&lt;/h2&gt;
&lt;h3 id=&#34;破坏匿名性的方法&#34;&gt;破坏匿名性的方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;即使一笔交易生成多个inputs和outputs，这些inputs和outputs的地址也可能被人关联&lt;/li&gt;
&lt;li&gt;地址账户和现实世界中的真实身份也可能产生关联
&lt;ul&gt;
&lt;li&gt;防范比特币洗钱：盯住资金转入转出链&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;提高匿名性的方法&#34;&gt;提高匿名性的方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Application Layer: coin mixing 把各种人混在一起&lt;/li&gt;
&lt;li&gt;Network Layer: 多路径转发以避免从节点的ip地址推算出真实身份&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;零知识证明&#34;&gt;零知识证明&lt;/h3&gt;
&lt;p&gt;一方（证明者）向另一方（验证者）证明一个陈述是正确的，而无需透露除该陈述是正确的以外的人和信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同态隐藏
&lt;ul&gt;
&lt;li&gt;给定E(x)和E(y)，可以很容易计算出某些关于x,y的加密函数值（同态运算）
&lt;ul&gt;
&lt;li&gt;Alice把E(x)和E(y)发给Bob&lt;/li&gt;
&lt;li&gt;Bob通过收到的E(x)和E(y)计算出E(x+y)的值&lt;/li&gt;
&lt;li&gt;Bob同时计算E(7)的值，如果E(x+y)和E(7)相等，验证通过&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;盲签
&lt;ul&gt;
&lt;li&gt;用户提供SerialNum（暗文），银行在不知道SerialNum的情况下返回签名Token，减少A的存款&lt;/li&gt;
&lt;li&gt;用户A把SerialNum和Token交给B完成交易&lt;/li&gt;
&lt;li&gt;用户B拿SerialNum和Token给银行验证，银行验证通过，增加B的存款&lt;/li&gt;
&lt;li&gt;银行无法把A和B联系起来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;例如：证明某个比特币账户是我的（不泄露私钥） - 由私钥产生一个签名来证明所有权&lt;/li&gt;
&lt;li&gt;BTC的每一笔转账交易都要说明币的来源&lt;/li&gt;
&lt;li&gt;Zerocoin可以证明花的币是合法存在的，但不知道具体是哪一个&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结思考&#34;&gt;总结思考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;转账交易不需要接收者在线&lt;/li&gt;
&lt;li&gt;私钥丢失则失去对币的所有权，除非存在交易所中，但交易所有风险&lt;/li&gt;
&lt;li&gt;私钥泄漏需要立即将账户中的钱转到另外的账户&lt;/li&gt;
&lt;li&gt;转账时写错地址无法取消交易，也没办法追回&lt;/li&gt;
&lt;li&gt;既然所有要写入区块链的交易都需要被验证正确性，为什么proof of burn中OP_RETURN会被区块接收：
&lt;ul&gt;
&lt;li&gt;对于某个交易，我们需要验证输入脚本和输出脚本，而OP_RETURN是写在当前交易的输出脚本的，因此在本次验证中不会被检查到&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在coinbase transaction中有收款人的地址，矿工如果想要偷答案则需要修改地址，会导致merkle tree发生改变，从而改变root hash，block header会发生改变，nonce也作废了&lt;/li&gt;
&lt;li&gt;比特币系统里并没有取得严格意义上的共识，如分叉&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Blockchain学习 - 区块链框架</title>
      <link>https://www.pseudoyu.com/zh/2020/12/12/blockchain_note_framework/</link>
      <pubDate>Sat, 12 Dec 2020 08:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/12/12/blockchain_note_framework/</guid>
      
        <description>&lt;h2 id=&#34;区块链框架&#34;&gt;区块链框架&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;交易&lt;/li&gt;
&lt;li&gt;钱包&lt;/li&gt;
&lt;li&gt;签名&lt;/li&gt;
&lt;li&gt;内存池&lt;/li&gt;
&lt;li&gt;网络&lt;/li&gt;
&lt;li&gt;共识机制&lt;/li&gt;
&lt;li&gt;哈希&lt;/li&gt;
&lt;li&gt;区块&lt;/li&gt;
&lt;li&gt;区块链&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;哈希&#34;&gt;哈希&lt;/h3&gt;
&lt;p&gt;区块链使用的是SHA256(Secure Hashing Algorithm 256 bits)
&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/blockchain_sha256.png&#34; alt=&#34;blockchain_sha256&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SHA256&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;crypto-js/sha256&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Blockchain Rock!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dataObject&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;With Object Works too&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;generateHash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SHA256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`SHA256 Hash: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;generateHash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;************************************&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`SHA256 Hash: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;generateHash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dataObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;区块&#34;&gt;区块&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;区块头&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前一个区块的Hash&lt;/li&gt;
&lt;li&gt;时间戳&lt;/li&gt;
&lt;li&gt;Merkle Root&lt;/li&gt;
&lt;li&gt;Nonce
&lt;ul&gt;
&lt;li&gt;Block Data + Nonce = Hash value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;挖矿难度&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;000000HASHVALUE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;区块大小&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1MB (Bitcoin)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;哈希&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即使数据产生很微小的变化，哈希值也会截然不同，如以下Demo所示&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SHA256&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;crypto-js/sha256&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Block&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nonce&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;144444&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;generateHash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;promise&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SHA256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

          &lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SOMETHING WRONG!!!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Block&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;BlockClass&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./block.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;block&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;BlockClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Test Block&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;generateHash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Block Hash: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Block: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;区块链&#34;&gt;区块链&lt;/h3&gt;
&lt;p&gt;存储网络中所有交易历史记录的账本
&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/blockchain_overview.png&#34; alt=&#34;blockchain_overview&#34;&gt;
&lt;a href=&#34;https://andersbrownworth.com/blockchain/blockchain&#34;&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;network&#34;&gt;Network&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;P2P网络：不同用户之间共享信息和资源的一种分布式网络&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分布式网络：分布在不同地域的网络互相连接
&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/blockchain_network.png&#34; alt=&#34;blockchain_network&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中心化网络：所有人都连接至一个（或一组）中心化网络&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;去中心化网络：没有一个单点网络可以拥有所有的信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分布式网络：每个人都得到一份信息备份，且都拥有访问权限&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;内存池&#34;&gt;内存池&lt;/h3&gt;
&lt;p&gt;交易脱离内存池的原因&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;交易过期（14天）&lt;/li&gt;
&lt;li&gt;在以交易费排序的结构中交易处于内存池底部&lt;/li&gt;
&lt;li&gt;交易已经被一个区块包含&lt;/li&gt;
&lt;li&gt;交易有未确认的祖先区块被区块包含&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;共识机制&#34;&gt;共识机制&lt;/h3&gt;
&lt;p&gt;网络如何对交易达成信任/一致&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PoW(Proof of Work)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算消耗大（算力），但是很容易检验正确性&lt;/li&gt;
&lt;li&gt;比特币网络
&lt;ul&gt;
&lt;li&gt;10分钟左右（6个确认）&lt;/li&gt;
&lt;li&gt;动态调整难度&lt;/li&gt;
&lt;li&gt;消耗大量能源&lt;/li&gt;
&lt;li&gt;如果矿工（矿池）拥有大量资源则有中心化风险&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;PoS (Proof of Stake)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过与系统相关的用户（权益持有者）投票来达成共识&lt;/li&gt;
&lt;li&gt;Nothing at Stake问题：在所有区块都投注
&lt;ul&gt;
&lt;li&gt;同时在多个链上创建区块的用户会遭到惩罚&lt;/li&gt;
&lt;li&gt;在错误链上创建区块的用户会遭到惩罚&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以太坊正在向PoS转变&lt;/li&gt;
&lt;li&gt;DASH&lt;/li&gt;
&lt;li&gt;LISK
&lt;ul&gt;
&lt;li&gt;DPoS (Delegated Proof of Stake)委任权益证明&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;DBFT (Delegated Byzantine Fault Tolerance)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过对节点分配不同的角色来达成共识&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;降低开销&lt;/li&gt;
&lt;li&gt;避免分叉&lt;/li&gt;
&lt;li&gt;问题
&lt;ul&gt;
&lt;li&gt;不诚实的发言者&lt;/li&gt;
&lt;li&gt;不诚实的委任者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;钱包&#34;&gt;钱包&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;私钥&lt;/li&gt;
&lt;li&gt;公钥&lt;/li&gt;
&lt;li&gt;钱包地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ECDSA (One-way Elliptic Curve Digital Signature Algorithm)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过私钥生成公钥&lt;/li&gt;
&lt;li&gt;单向，不能逆推&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;生成钱包地址&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过SHA256和RIPEMD160来生成钱包地址&lt;/li&gt;
&lt;li&gt;通过Base58Check来保障其可读性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;流程&lt;/strong&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/blockchain_wallet_generate1.png&#34; alt=&#34;blockchain_wallet_generate1&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/blockchain_wallet_generate2.png&#34; alt=&#34;blockchain_wallet_generate2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;钱包类型&lt;/strong&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/blockchain_wallet_type.png&#34; alt=&#34;blockchain_wallet_type&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Non-Deterministic Wallet&lt;/li&gt;
&lt;li&gt;Deterministic Wallet
&lt;ul&gt;
&lt;li&gt;Sequential Deterministic Wallet&lt;/li&gt;
&lt;li&gt;Hierarchical Deterministic (HD) Wallet
&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/blockchain_wallet_hd.png&#34; alt=&#34;blockchain_wallet_hd&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;私钥&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个256位随机数，介于1和2^256之间&lt;/li&gt;
&lt;li&gt;格式
&lt;ul&gt;
&lt;li&gt;Hex&lt;/li&gt;
&lt;li&gt;WIF(Base58Check)&lt;/li&gt;
&lt;li&gt;WIF-Compressed(Base58Check added suffix 0x01 before encoding)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Entropy 熵&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;混乱与不可预测状态&lt;/li&gt;
&lt;li&gt;应用
&lt;ul&gt;
&lt;li&gt;Python: Random&lt;/li&gt;
&lt;li&gt;Java: SecureRandom&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;签名&#34;&gt;签名&lt;/h3&gt;
&lt;p&gt;为区块链上每笔交易提供证明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;私钥签名&lt;/li&gt;
&lt;li&gt;公钥验证&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;交易周期&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Inputs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Outputs
&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/blockchain_transaction_lifecycle.png&#34; alt=&#34;blockchain_transaction_lifecycle&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTXO (Unspent transaction output in bitcoin)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;广播到区块链&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Blockchain学习 - 区块链概念</title>
      <link>https://www.pseudoyu.com/zh/2020/12/12/blockchain_note_concept/</link>
      <pubDate>Sat, 12 Dec 2020 05:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/12/12/blockchain_note_concept/</guid>
      
        <description>&lt;h2 id=&#34;区块链概念&#34;&gt;区块链概念&lt;/h2&gt;
&lt;h3 id=&#34;传统数据库-vs-区块链数据库&#34;&gt;传统数据库 vs. 区块链数据库&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;传统数据库&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络
&lt;ul&gt;
&lt;li&gt;中心化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;功能
&lt;ul&gt;
&lt;li&gt;Create 创建&lt;/li&gt;
&lt;li&gt;Read 读取&lt;/li&gt;
&lt;li&gt;Update 更新&lt;/li&gt;
&lt;li&gt;Delete 删除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可变性
&lt;ul&gt;
&lt;li&gt;可变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;权限
&lt;ul&gt;
&lt;li&gt;中心化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;透明度
&lt;ul&gt;
&lt;li&gt;低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;区块链数据库&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络
&lt;ul&gt;
&lt;li&gt;去中心化
&lt;ul&gt;
&lt;li&gt;给予节点控制权&lt;/li&gt;
&lt;li&gt;必须达成共识&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;功能
&lt;ul&gt;
&lt;li&gt;Read，Append，Validate
&lt;ul&gt;
&lt;li&gt;具有准确的历史记录&lt;/li&gt;
&lt;li&gt;读取和写入更快&lt;/li&gt;
&lt;li&gt;必须达成共识&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可变性
&lt;ul&gt;
&lt;li&gt;不可变
&lt;ul&gt;
&lt;li&gt;永久保存历史记录&lt;/li&gt;
&lt;li&gt;占据较大存储空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;权限
&lt;ul&gt;
&lt;li&gt;分布式
&lt;ul&gt;
&lt;li&gt;安全性高&lt;/li&gt;
&lt;li&gt;不能撤回交易&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;透明度
&lt;ul&gt;
&lt;li&gt;高
&lt;ul&gt;
&lt;li&gt;每个人都能看到&lt;/li&gt;
&lt;li&gt;没有权限控制机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;是否需要区块链&#34;&gt;是否需要区块链&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;是否需要数据库？&lt;/li&gt;
&lt;li&gt;是否需要共享写入权限？&lt;/li&gt;
&lt;li&gt;是否需要多方达成信任？&lt;/li&gt;
&lt;li&gt;能否脱离第三方机构运作？&lt;/li&gt;
&lt;li&gt;能否脱离权限控制机制运作？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;区块链类型&#34;&gt;区块链类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;公链：交易是否要公开&lt;/li&gt;
&lt;li&gt;私链：是否需要其他公司（机构）访问数据&lt;/li&gt;
&lt;li&gt;联盟链：权限控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;p2p网络-vs-client-server网络&#34;&gt;P2P网络 vs. Client-Server网络&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Client-Server
&lt;ul&gt;
&lt;li&gt;Client发出请求&lt;/li&gt;
&lt;li&gt;Server响应请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;P2P网络
&lt;ul&gt;
&lt;li&gt;网络中多个节点共享信息和资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;区块链数据&#34;&gt;区块链数据&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/blockchain_btc_data.png&#34; alt=&#34;blockchain_btc_data&#34;&gt;&lt;/p&gt;
&lt;p&gt;Bitcoin Improvement Proposal (BIP)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对Bitcoin core客户端做出改变的提案文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分叉&#34;&gt;分叉&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/blockchain_fork_type.png&#34; alt=&#34;blockchain_fork_type&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬分叉：永久性改变
&lt;ul&gt;
&lt;li&gt;Bitcoin Cash：提升了比特币区块链大小至2M&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软分叉：暂时性改变
&lt;ul&gt;
&lt;li&gt;Segregated Witness（Segwit）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;源码分叉
&lt;ul&gt;
&lt;li&gt;源程序的一个副本，无关联，一般用于山寨币
&lt;ul&gt;
&lt;li&gt;Litecoin&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Blockchain学习 - 密码学原理</title>
      <link>https://www.pseudoyu.com/zh/2020/12/12/blockchain_note_cryptography/</link>
      <pubDate>Sat, 12 Dec 2020 03:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/12/12/blockchain_note_cryptography/</guid>
      
        <description>&lt;h2 id=&#34;密码学原理&#34;&gt;密码学原理&lt;/h2&gt;
&lt;h3 id=&#34;哈希&#34;&gt;哈希&lt;/h3&gt;
&lt;p&gt;重要特征&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;collision resistance 抗碰撞性
&lt;ul&gt;
&lt;li&gt;哈希碰撞是指当x≠y时，存在H(x)=H(y)，不同的输入映射到哈希表的同一个位置&lt;/li&gt;
&lt;li&gt;很难人工创造哈希碰撞&lt;/li&gt;
&lt;li&gt;常用于文件校验&lt;/li&gt;
&lt;li&gt;MD5是一个流行的哈希函数，但目前已经知道如何制造哈希碰撞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hiding 单向不可逆性
&lt;ul&gt;
&lt;li&gt;x → H(x), H(x)很难逆推出x&lt;/li&gt;
&lt;li&gt;条件
&lt;ul&gt;
&lt;li&gt;输入空间足够大&lt;/li&gt;
&lt;li&gt;分布尽可能均匀&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;puzzle friendly 哈希值计算不可预测
&lt;ul&gt;
&lt;li&gt;很难解决哈希值推导&lt;/li&gt;
&lt;li&gt;易于验证结果正确性&lt;/li&gt;
&lt;li&gt;如POW工作量证明，挖矿试随机数nonce，使得H(block header) ≤ target&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;加密&#34;&gt;加密&lt;/h3&gt;
&lt;p&gt;对称加密&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A使用私钥加密，B使用同一个私钥解密&lt;/li&gt;
&lt;li&gt;私钥的分发存在风险&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;非对称加密&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A使用B的公钥进行加密，B使用自己的私钥进行解密&lt;/li&gt;
&lt;li&gt;C也可以使用B的公钥进行加密&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数字签名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A使用自己的私钥给信息加密&lt;/li&gt;
&lt;li&gt;大家都可以用A的公钥进行验证，防止其他人假冒A&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用（比特币区块链）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;私钥代表了对比特币的控制权&lt;/li&gt;
&lt;li&gt;交易发起方用私钥对交易（包括转账金额和转账地址）签名，并将签名后的交易和公钥广播&lt;/li&gt;
&lt;li&gt;各节点接收到交易后可以用公钥验证交易是否合法&lt;/li&gt;
&lt;li&gt;整个过程中无需暴露私钥，实现保密&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Java学习 - 线程状态及转化方法</title>
      <link>https://www.pseudoyu.com/zh/2020/12/09/java_note_concurrent_state/</link>
      <pubDate>Wed, 09 Dec 2020 03:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/12/09/java_note_concurrent_state/</guid>
      
        <description>&lt;h2 id=&#34;线程状态及转化方法&#34;&gt;线程状态及转化方法&lt;/h2&gt;
&lt;h3 id=&#34;操作系统中的线程状态转换&#34;&gt;操作系统中的线程状态转换&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/java_state.png&#34; alt=&#34;java_state&#34;&gt;&lt;/p&gt;
&lt;p&gt;操作系统线程主要有以下三个状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;就绪状态 READY：线程正在等待使用CPU，经调度程序调用之后可进入RUNNING状态&lt;/li&gt;
&lt;li&gt;执行状态 RUNNING：线程正在使用CPU&lt;/li&gt;
&lt;li&gt;等待状态 WAITING：县城经过等待事件的调用或者正在等待其他资源（如I/O）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java线程的六个状态&#34;&gt;Java线程的六个状态&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Thread.State 源码
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;NEW&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;RUNNABLE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;BLOCKED&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;WAITING&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;TIMED_WAITING&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;TERMINATED&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;new&#34;&gt;NEW&lt;/h4&gt;
&lt;p&gt;处于NEW状态的线程此时尚未启动（未调用Thread实例的start()方法）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反复调用一个线程的start()方法是否可行&lt;/li&gt;
&lt;li&gt;假如一个线程执行完毕（此时处于TERMINATED状态），再次调用这个线程的start()方法是否可行&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;threadStatus&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IllegalThreadStateException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;started&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;start0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;started&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;started&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;threadStartFailed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Throwable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ignore&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在start()内部有一个threadStatus变量，如果不等于0则调用start()会直接抛出异常。在调用一次start()后，threadStatus的值会改变，此时调用会抛出IllegalThreadStateException异常，比如threadStatus为2代表当前状态为TERMINATED。&lt;/p&gt;
&lt;h4 id=&#34;runnable&#34;&gt;RUNNABLE&lt;/h4&gt;
&lt;p&gt;表示当前线程正在运行中（在虚拟机中运行或等待CPU分配资源），包含了传统操作系统线程的ready和running两个状态&lt;/p&gt;
&lt;h4 id=&#34;blocked&#34;&gt;BLOCKED&lt;/h4&gt;
&lt;p&gt;阻塞状态，等待锁的释放以进入同步区&lt;/p&gt;
&lt;h4 id=&#34;waiting&#34;&gt;WAITING&lt;/h4&gt;
&lt;p&gt;等待状态，需要其他线程唤醒才能变成RUNNABLE状态&lt;/p&gt;
&lt;p&gt;进入等待状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Object.wait()：使当前线程处于等待状态，知道另一个线程唤醒它&lt;/li&gt;
&lt;li&gt;Thread.join()：等待线程执行完毕，底层调用的Object的wait()方法&lt;/li&gt;
&lt;li&gt;LockSupport.park()：除非获得调用许可，否则禁用当前线程进行线程调度&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;timed_waiting&#34;&gt;TIMED_WAITING&lt;/h4&gt;
&lt;p&gt;超时等待状态。线程等待一个具体的时间后被自动唤醒&lt;/p&gt;
&lt;p&gt;进入超时等待状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thread.sleep(long millis)：使当前线程睡眠指定时间&lt;/li&gt;
&lt;li&gt;Object.wait(long timeout)：线程休眠指定时间，可以通过notify()/notifyAll()唤醒&lt;/li&gt;
&lt;li&gt;Thread.join(long mills)：等待当前线程最多执行millis毫秒，如果millis为0则会一直执行&lt;/li&gt;
&lt;li&gt;LockSupport.parkNanos(long nanos)：除非获得调用许可，否则禁用当前线程进行线程调度指定时间&lt;/li&gt;
&lt;li&gt;LockSupport.parkUntil(long deadline)：禁止线程进行调度指定时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;terminated&#34;&gt;TERMINATED&lt;/h4&gt;
&lt;p&gt;终止状态，此时线程执行完毕&lt;/p&gt;
&lt;h3 id=&#34;线程状态的转换&#34;&gt;线程状态的转换&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/java_state_convert.png&#34; alt=&#34;java_state_convert&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;blocked和runnable状态的转换&#34;&gt;BLOCKED和RUNNABLE状态的转换&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;blockedTest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;testMethod&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;testMethod&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1000L&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 需要注意这里main线程休眠了1000毫秒，而testMethod()里休眠了2000毫秒
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getState&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 输出？
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getState&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 输出？
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 同步方法争夺锁
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;testMethod&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2000L&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InterruptedException&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两个线程的状态转换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a：RUNNABLE（a.start()） -&amp;gt; TIMED_WATING（Thread.sleep()）-&amp;gt;RUNABLE（sleep()时间到）-&amp;gt; &lt;em&gt;BLOCKED(未抢到锁)&lt;/em&gt; -&amp;gt; TERMINATED&lt;/li&gt;
&lt;li&gt;b：RUNNABLE（b.start()) -&amp;gt; &lt;em&gt;BLOCKED(未抢到锁)&lt;/em&gt; -&amp;gt;TERMINATED&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;waiting和runnable状态的转换&#34;&gt;WAITING和RUNNABLE状态的转换&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Object.wait()
&lt;ul&gt;
&lt;li&gt;调用wait()前必须持有对象的锁&lt;/li&gt;
&lt;li&gt;调用wait()方法时，会释放当前的锁，知道有其他线程调用notify()/notifyAll()方法唤醒等待锁的线程。notify()方法只会唤醒单个等待锁的线程，如有多个线程都在等待这个锁的话不一定会唤醒到之前调用wait()方法的线程；notifyAll()唤醒所有等待锁的线程后，也不一定马上把时间片分给刚放弃锁的线程，具体要看系统调度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Thread.join()
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;调用join()方法不会释放锁，会一直等待当前线程执行完毕（转变为TERMINATED状态），在Demo中，a线程一定会执行完毕，所以会打印TERMINATED状态；b线程可能打印RUNNABLE（尚未进入同步方法），也可能打印TIMED_WAITING（进入同步方法）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;blockedTest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;······&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getState&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 输出 TERMINATED
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getState&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;timed_waiting和runnable状态的转换&#34;&gt;TIMED_WAITING和RUNNABLE状态的转换&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Thread.sleep(long)
&lt;ul&gt;
&lt;li&gt;使当前线程睡眠指定时间，暂时停止执行但是不释放锁，时间到后线程重新进入RUNNABLE状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Object.wait(long)
&lt;ul&gt;
&lt;li&gt;使线程进入TIMED_WAITING状态&lt;/li&gt;
&lt;li&gt;可以通过notify()和notifyAll()来唤醒&lt;/li&gt;
&lt;li&gt;即使不被唤醒，经过指定时间long之后也会自动唤醒，拥有争夺锁的资格&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Thread.join(long)
&lt;ul&gt;
&lt;li&gt;使当前线程执行指定时间，并且进入TIMED_WAITING状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;线程中断&#34;&gt;线程中断&lt;/h4&gt;
&lt;p&gt;Java提供了线程中断机制来处理需要中断线程的情况，是一种协作机制。通过中断操作并不能直接终止一个线程，而是通知需要被中断的线程自行处理。&lt;/p&gt;
&lt;p&gt;当其他线程通知需要被中断的线程后，线程中断的状态被设置为true，但是具体被要求中断的线程要怎么处理看，完全由被中断的县城自己而定，可以在合适的实际处理中断请求，也可以完全不处理继续执行下去&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thread.interrupt()：中断线程，并不会直接停止线程，而是设置线程的中断状态为true（默认false）&lt;/li&gt;
&lt;li&gt;Thread.interrupted()：测试当前线程是否被中断，线程的中断状态受这个方法的影响，调用一次使线程中断状态设置为true，连续调用两次会使这个线程的中断状态重新转为false&lt;/li&gt;
&lt;li&gt;Thread.isInterrupted()：测试当前线程是否被中断，调用这个方法不会影响线程的中断状态&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Java学习 - 线程组和线程优先级</title>
      <link>https://www.pseudoyu.com/zh/2020/12/07/java_note_concurrent_threadgroup/</link>
      <pubDate>Mon, 07 Dec 2020 03:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/12/07/java_note_concurrent_threadgroup/</guid>
      
        <description>&lt;h2 id=&#34;线程组和线程优先级&#34;&gt;线程组和线程优先级&lt;/h2&gt;
&lt;h3 id=&#34;线程组&#34;&gt;线程组&lt;/h3&gt;
&lt;p&gt;Java中的ThreadGroup表示线程组，可使用线程组对线程进行批量控制；每个线程必须存在于一个线程组中，不能独立存在；执行main()方法线程的名字是main，如果在new Thread时没有显式指定，那么默认将父线程的线程组设置为自己的线程组。&lt;/p&gt;
&lt;p&gt;ThreadGroup管理其下面的Thread，ThreadGroup是一个标准的向下引用的树状结构，目的是防止“上级”线程被“下级”线程引用而无法有效地被GC回收。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Demo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;testThread&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;testThread当前线程组名字：&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getThreadGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;testThread线程名字：&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;});&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;testThread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;执行main所在线程的线程组名字： &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getThreadGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;执行main方法线程名字：&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Output
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;执行main所在线程的线程组名字&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;执行main方法线程名字&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;testThread当前线程组名字&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;testThread线程名字&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;线程的优先级&#34;&gt;线程的优先级&lt;/h3&gt;
&lt;p&gt;线程的执行顺序由调度程序来决定，线程的优先级会在线程被调用之前设定，用Thread类的setPriority()方法设定范围1-10，默认为5（不是所有操作系统都支持十级划分，有的只支持低、中、高），这只是java给操作系统一个优先级的参考值，线程最终在操作系统的优先级是多少还是由操作系统决定，通常情况下高优先级线程会比低优先级线程有更高的几率得到执行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Demo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;我是默认线程优先级：&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPriority&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setPriority&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;我是设置过的线程优先级：&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPriority&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Output
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;我是默认线程优先级&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;我是设置过的线程优先级&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Java提供一个线程调度器来监视和控制处于RUNNABLE状态的线程。线程的调度策略采取抢占式，优先级高的线程比优先级低的线程会有更大的几率优先执行。在优先级相同的情况下，按照“先到先得”的原则。&lt;/p&gt;
&lt;p&gt;如果某个线程优先级大于线程所在线程组的最大优先级，那么该优先级将会失效。&lt;/p&gt;
&lt;p&gt;每个Java程序都有一个默认的主线程，通过JVM启动的第一个线程main线程。&lt;/p&gt;
&lt;p&gt;还有一种线程称为守护线程（Daemon），守护线程的优先级比较低&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有非守护线程都结束了，守护线程也会自动结束&lt;/li&gt;
&lt;li&gt;线程默认为非守护线程，可以通过Thread类的setDaemon来设置&lt;/li&gt;
&lt;li&gt;当所有非守护线程结束时，结束其余的子线程（守护线程）自动关闭，免去了还要继续关闭子线程的麻烦&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线程组的常用方法&#34;&gt;线程组的常用方法&lt;/h3&gt;
&lt;p&gt;获取当前线程组名字&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getThreadGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;复制线程组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 获取当前的线程组
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ThreadGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threadGroup&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getThreadGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 复制一个线程组到一个线程数组（获取Thread信息）
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threads&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;threadGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;activeCount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()];&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;threadGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;threads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;线程组统一异常处理&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;com.func.axc.threadgroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ThreadGroupDemo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ThreadGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threadGroup1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ThreadGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;group1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;// 继承ThreadGroup并重新定义以下方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;// 在线程成员抛出unchecked exception
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;// 会执行此方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;uncaughtException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Throwable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getMessage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// 这个线程是threadGroup1的一员
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;thread1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;threadGroup1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;// 抛出unchecked异常
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RuntimeException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;测试异常&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;});&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;thread1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;线程组的数据结构&#34;&gt;线程组的数据结构&lt;/h3&gt;
&lt;p&gt;线程组是一个树状的结构，每个线程组下面可以有多个线程或者线程组。线程组可以起到统一控制线程的优先级和检查线程的权限的作用。&lt;/p&gt;
&lt;p&gt;ThreadGroup中的成员变量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ThreadGroup&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;UncaughtExceptionHandler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ThreadGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 父亲ThreadGroup
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ThreadGroupr 的名称
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maxPriority&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 线程最大优先级
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;destroyed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 是否被销毁
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;daemon&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 是否守护线程
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vmAllowSuspension&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 是否可以中断
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nUnstartedThreads&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 还未启动的线程
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nthreads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ThreadGroup中线程数目
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;threads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[];&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ThreadGroup中的线程
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ngroups&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 线程组数目
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;ThreadGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;groups&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[];&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 线程组数组
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ThreadGroup的构造函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 私有构造函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ThreadGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;system&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;maxPriority&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;MAX_PRIORITY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;parent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 默认是以当前ThreadGroup传入作为parent  ThreadGroup，新线程组的父线程组是目前正在运行线程的线程组。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ThreadGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getThreadGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 构造函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ThreadGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ThreadGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;checkParentAccess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 私有构造函数，主要的构造函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ThreadGroup&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unused&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ThreadGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;maxPriority&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;maxPriority&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;daemon&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;daemon&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;vmAllowSuspension&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;vmAllowSuspension&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;parent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;checkParentAccess方法源码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 检查parent ThreadGroup
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;checkParentAccess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ThreadGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;checkAccess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 判断当前运行的线程是否具有修改线程组的权限
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;checkAccess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;SecurityManager&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;security&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getSecurityManager&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;security&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;security&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;checkAccess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Java学习 - 多线程入门类和接口</title>
      <link>https://www.pseudoyu.com/zh/2020/12/05/java_note_concurrent_practice/</link>
      <pubDate>Sat, 05 Dec 2020 03:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/12/05/java_note_concurrent_practice/</guid>
      
        <description>&lt;h2 id=&#34;多线程入门类和接口&#34;&gt;多线程入门类和接口&lt;/h2&gt;
&lt;h3 id=&#34;java中使用多线程的方法&#34;&gt;Java中使用多线程的方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;由于Java单继承多实现的特性，Runnable接口用起来比Thread更灵活&lt;/li&gt;
&lt;li&gt;Runnable接口更符合面向对象，将线程单独进行对象的封装&lt;/li&gt;
&lt;li&gt;Runnable接口降低了线程对象和线程任务的耦合性&lt;/li&gt;
&lt;li&gt;如果使用线程时不需要使用Thread类的诸多方法，Runnable接口更加轻量&lt;/li&gt;
&lt;li&gt;Thread类和Runnable接口创建新线程的run方法是没有返回值的&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;继承thread类并重写run方法&#34;&gt;继承Thread类，并重写run方法&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Demo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyThread&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;MyThread&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myThread&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyThread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;myThread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;构造方法是简单调用一个私有的init方法来实现私有化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;g：线程组&lt;/li&gt;
&lt;li&gt;target：指定要执行的任务&lt;/li&gt;
&lt;li&gt;name：线程的名字&lt;/li&gt;
&lt;li&gt;acc：初始化私有变量&lt;/li&gt;
&lt;li&gt;inheritThreadLocals：可继承的ThreadLocal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大多数情况下直接调用下面方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Runnable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Runnable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;常用方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;currentThread()：返回正在执行的线程对象的引用&lt;/li&gt;
&lt;li&gt;start()：开始执行线程的方法（JVM调用线程内的run()方法）&lt;/li&gt;
&lt;li&gt;yield()：当前线程愿意让出对当前处理器的占用（但调度时可能继续运行）&lt;/li&gt;
&lt;li&gt;sleep()：使当前线程睡眠一段时间&lt;/li&gt;
&lt;li&gt;join()：使当前线程等待另一个线程执行完毕之后再继续执行，调用了Object类的wait方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实现runnable接口的run方法&#34;&gt;实现Runnable接口的run方法&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Runnable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Demo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyThread&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Runnable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;MyThread&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyThread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// Java 8 函数式编程，可以省略MyThread类
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Java 8 匿名内部类&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;callable接口&#34;&gt;Callable接口&lt;/h4&gt;
&lt;p&gt;与Runnable类似，是只有一个抽象方法的函数式接口，但是提供返回值并且支持泛型&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Callable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Callable一般配合线程池工具ExecutorService使用，ExecutorService可以使用submit方法来让一个Callable接口执行，会返回一个Future，后续可以通过Future的get方法得到结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 自定义Callable
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Task&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Callable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;{&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 模拟计算需要一秒
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[])&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 使用
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;executor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Executors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;newCachedThreadPool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Task&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;task&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Task&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;executor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;submit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;task&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 注意调用get方法会阻塞当前线程，直到得到结果。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// 所以实际编码中建议使用可以设置超时时间的重载get方法。
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt; 
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 输出结果：2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;future接口&#34;&gt;Future接口&lt;/h4&gt;
&lt;p&gt;只有几个比较简单的方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Future&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;cancel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;paramBoolean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isCancelled&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isDone&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InterruptedException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ExecutionException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;V&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;paramLong&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TimeUnit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;paramTimeUnit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InterruptedException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ExecutionException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TimeoutException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;cancel方法试图取消一个线程的执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任务可能已完成、已取消或不可取消，因此有可能失败&lt;/li&gt;
&lt;li&gt;返回的是是否取消成功的状态&lt;/li&gt;
&lt;li&gt;参数paramBoolean表示是否采用中断的方式取消线程执行&lt;/li&gt;
&lt;li&gt;如果为了可取消性但是又不提供可用的结果，则可以声明&lt;code&gt;Future&amp;lt;?&amp;gt;&lt;/code&gt;形式类型，并返回null作为底层任务的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;futuretask类&#34;&gt;FutureTask类&lt;/h4&gt;
&lt;p&gt;实现了RunnableFuture接口（同时继承了Runnable接口和Future接口），实现了cancel，get，isDone等方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 自定义Callable，与上面一样
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Task&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Callable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;{&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 模拟计算需要一秒
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[])&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 使用
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;executor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Executors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;newCachedThreadPool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;FutureTask&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;futureTask&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FutureTask&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Task&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;executor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;submit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;futureTask&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;futureTask&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;调用submit方法是没有返回值的，实际上调用的是submit(Runnable task)方法；这里使用FutureTask直接用get取值。&lt;/p&gt;
&lt;p&gt;很多高并发的环境下，有可能Callable和FutureTask会创建多次，FutureTask能够在高并发环境下确保任务只执行一次。&lt;/p&gt;
&lt;p&gt;状态&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  *
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * state可能的状态转变路径如下：
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * NEW -&amp;gt; COMPLETING -&amp;gt; NORMAL
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * NEW -&amp;gt; COMPLETING -&amp;gt; EXCEPTIONAL
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * NEW -&amp;gt; CANCELLED
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  * NEW -&amp;gt; INTERRUPTING -&amp;gt; INTERRUPTED
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;  */&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;volatile&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NEW&lt;/span&gt;          &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;COMPLETING&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NORMAL&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EXCEPTIONAL&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CANCELLED&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;INTERRUPTING&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;INTERRUPTED&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Java学习 - 文件与I/O流</title>
      <link>https://www.pseudoyu.com/zh/2020/12/02/java_note_io/</link>
      <pubDate>Wed, 02 Dec 2020 03:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/12/02/java_note_io/</guid>
      
        <description>&lt;h2 id=&#34;io流&#34;&gt;IO流&lt;/h2&gt;
&lt;h3 id=&#34;分类&#34;&gt;分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;流的流向
&lt;ul&gt;
&lt;li&gt;输入流&lt;/li&gt;
&lt;li&gt;输出流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作单元
&lt;ul&gt;
&lt;li&gt;字节流&lt;/li&gt;
&lt;li&gt;字符流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;角色
&lt;ul&gt;
&lt;li&gt;节点流&lt;/li&gt;
&lt;li&gt;处理流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;抽象类基类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;InputStream（字节流）/Reader（字符流）&lt;/li&gt;
&lt;li&gt;OutputStream（字节流）/Writer（字符流）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;为什么有了字节流还需要字符流？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;字符流是由虚拟机将字节转换得到的，过程耗时且容易出现编码问题，所以，提供一个直接操作字符的接口方便我们对字符进行流操作，如果音频文件、图片等媒体文件则用字节流比较好，而如果涉及到字符则使用字符流比较好，Socket, ServerSocket。&lt;/p&gt;
&lt;h3 id=&#34;bio-nio-aio&#34;&gt;BIO, NIO, AIO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BIO是同步阻塞I/O模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数较低（小于单机1000）的情况下比较适用，模型简单，不需要考虑系统过载、限流等问题。但是面对较高并发量的时候不适用。&lt;/li&gt;
&lt;li&gt;NIO是同步非阻塞模型，对应java.nio包，提供Channel, Selector, Buffer等抽象。支持面向缓冲、基于通道的I/O方法。提供了SocketChannel，ServerSocketChannel量中国套接字通道实现，都支持阻塞和非阻塞。因此，对于低负载和并发的应用程序，可以使用同步阻塞I/O来提升开发效率和更好的维护性；对于高负载和并发的应用（网络程序），可以使用NIO的非阻塞模式来开发。NIO的IO行为是同步的，对于NIO来说，业务线程是在IO操作准备好时，得到通知，接着由这个线程自行进行IO操作。&lt;/li&gt;
&lt;li&gt;AIO是异步非阻塞的I/O模型，基于事件和回调机制，应用操作后会直接返回，不会阻塞，当后台处理完成，操作系统会通知相应线程进行后续操作。AIO应用不广泛，Netty尝试过但是放弃了。&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Java学习 - 多线程</title>
      <link>https://www.pseudoyu.com/zh/2020/11/29/java_note_concurrent/</link>
      <pubDate>Sun, 29 Nov 2020 03:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/11/29/java_note_concurrent/</guid>
      
        <description>&lt;h2 id=&#34;多线程&#34;&gt;多线程&lt;/h2&gt;
&lt;h3 id=&#34;线程程序进程的基本概念&#34;&gt;线程、程序、进程的基本概念&lt;/h3&gt;
&lt;p&gt;线程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比进程更小的执行单位，一个进程在执行的过程中可以产生多个线程&lt;/li&gt;
&lt;li&gt;同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程或者在各个线程之间切换工作时，负担要比进程小得多&lt;/li&gt;
&lt;li&gt;线程也被称为轻量级进程&lt;/li&gt;
&lt;li&gt;同一进程中的线程极有可能相互影响&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;含有指令和数据的文件&lt;/li&gt;
&lt;li&gt;被存储在磁盘或其他数据存储设备中&lt;/li&gt;
&lt;li&gt;静态的代码&lt;/li&gt;
&lt;li&gt;程序执行时会被操作系统载入内存中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序的一次执行过程，系统运行程序的基本单位，动态的&lt;/li&gt;
&lt;li&gt;运行一个程序即进程从创建、运行到消亡的过程&lt;/li&gt;
&lt;li&gt;一个进程就是一个执行中的程序&lt;/li&gt;
&lt;li&gt;每个进程占有某些系统资源，如CPU时间、内存空间、文件、输入输出设备使用权等&lt;/li&gt;
&lt;li&gt;各进程基本上是独立的&lt;/li&gt;
&lt;li&gt;进程属于操作系统的范畴&lt;/li&gt;
&lt;li&gt;同一时间段内，可以执行一个以上的程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进程让操作系统的并发性成为了可能，而线程让进程的内部并发成为了可能。使用多进程可以实现并发，但是用多线程有一些优势&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程间通信较为简单，通常使用共享资源，负担小一些&lt;/li&gt;
&lt;li&gt;线程是轻量级的，系统开销更小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进程和线程的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本质区别在于是否单独占有内存地址空间和其他系统资源
&lt;ul&gt;
&lt;li&gt;进程单独占有一定内存地址空间，所以进程间内存隔离，数据分开，通讯困难但是同步简单，各个进程互相不干扰；线程共享所属进程占有的内存空间和资源，数据共享简单但是同步困难&lt;/li&gt;
&lt;li&gt;进程单独占有一定的内存地址空间，一个进程出现问题不会影响其他进程，不影响主程序的稳定性，可靠性高；但是一个线程崩溃可能影响整个程序的稳定性，可靠性较低&lt;/li&gt;
&lt;li&gt;进程的创建和销毁不仅需要保存寄存器和栈信息，还需要资源的分配回收以及页调度，开销较大；线程只需要保存寄存器和栈信息，开销较小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;进程是操作系统进行资源分配的基本单位，而线程是操作系统进行调度的基本单位（CPU分配时间的单位）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基本状态&#34;&gt;基本状态&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;NEW：初始状态，被构建但是没有调用start()方法&lt;/li&gt;
&lt;li&gt;RUNNABLE
&lt;ul&gt;
&lt;li&gt;READY：调用start()方法后&lt;/li&gt;
&lt;li&gt;RUNNING：获得cpu时间片time slice后&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BLOCKED：调用同步方法时没有获取到锁&lt;/li&gt;
&lt;li&gt;WAITING：执行wait()方法后&lt;/li&gt;
&lt;li&gt;TIME_WAITING：在WAITING状态基础上增加了超时限制，如sleep()或wait()，时间达成后返回到RUNNABLE状态&lt;/li&gt;
&lt;li&gt;TERMINATED：执行RUNNABLE的run()方法后&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;上下文切换&#34;&gt;上下文切换&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CPU通过时间片分配算法来循环执行任务，切换前会保留上一个任务的状态，以便下次切换回这个任务时再加载这个任务的状态，任务从保存到再加载的过程就是一次上下文切换；上下文是指某一时间点CPU寄存器和程序计数器的内容&lt;/li&gt;
&lt;li&gt;创建线程和上下文切换开销会影响并发的速度&lt;/li&gt;
&lt;li&gt;减少上下文切换
&lt;ul&gt;
&lt;li&gt;无锁并发编程，避免使用锁，如将数据的ID按照Hash算法取模分段，不同的线程处理不同段的数据&lt;/li&gt;
&lt;li&gt;CAS算法，Java的Atomic包使用CAS算法来更新数据 不需要加锁
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CAS算法解析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于采用这种 CAS 机制是没有对方法进行加锁的，所以，所有的线程都可以进入 increment() 这个方法，假如进入这个方法的线程太多，就会出现一个问题：每次有线程要执行第三个步骤的时候，i 的值老是被修改了，所以线程又到回到第一步继续重头再来&lt;/li&gt;
&lt;li&gt;为了解决这个问题，Java8 引入了一个 cell[] 数组，如果有 100 个线程要对 i 进行自增操作的话，这个时候，冲突就会大大增加，系统就会把这些线程分配到不同的 cell 数组元素去&lt;/li&gt;
&lt;li&gt;在 Java 中，也是提供了这种 CAS 的原子类，例如
&lt;ul&gt;
&lt;li&gt;AtomicBoolean&lt;/li&gt;
&lt;li&gt;AtomicInteger&lt;/li&gt;
&lt;li&gt;AtomicLong&lt;/li&gt;
&lt;li&gt;AtomicReference&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compareAndSet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CASTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AtomicInteger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;increment&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 自增 1并返回之后的结果
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;incrementAndGet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用最少线程，避免创建不需要的线程，比如任务很少，但是创建了很多线程来处理，会造成大量线程都处于等待状态&lt;/li&gt;
&lt;li&gt;使用协程，在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;死锁&#34;&gt;死锁&lt;/h3&gt;
&lt;p&gt;多个线程互相等待对方释放锁，可能会引起死锁，造成系统功能不可用。如复杂场景中，t1拿到锁后，因为异常没释放掉（死循环），或者是t1拿到了一个数据库锁，释放锁的时候抛出了异常。一旦出现死锁，业务是可感知的，因为不能继续提供服务了。&lt;/p&gt;
&lt;p&gt;避免死锁的常见方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免一个线程同时获取多个锁&lt;/li&gt;
&lt;li&gt;避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源&lt;/li&gt;
&lt;li&gt;尝试使用定时锁，lock.tryLock(timeout)来替代内部锁机制&lt;/li&gt;
&lt;li&gt;对于数据库锁，加锁和解锁必须在同一个数据库连接里，否则会出现解锁失败&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;资源限制&#34;&gt;资源限制&lt;/h3&gt;
&lt;p&gt;并发编程时，程序的执行速度受限于计算机硬件资源或软件资源，如果并发代码因为资源限制仍然在串行执行，程序执行反而会更慢&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件：带宽速度、硬盘读写速度、CPU处理速度&lt;/li&gt;
&lt;li&gt;软件：数据库连接数、socket连接数等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件：使用集群并行执行程序，如使用ODPS、Hadoop或者自己搭建服务器集群&lt;/li&gt;
&lt;li&gt;软件：使用资源池将资源复用，如使用连接池将数据库和Socket连接复用&lt;/li&gt;
&lt;li&gt;根据不同的资源限制调整程序的并发度&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;volatile&#34;&gt;volatile&lt;/h3&gt;
&lt;p&gt;volatile是轻量级的synchronized，在多处理器开发中保证了共享变量的“可见性”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当一个线程修改一个共享变量时，另一个线程能读到这个修改的值&lt;/li&gt;
&lt;li&gt;比synchronized使用和执行成本更低，不会引起上下文切换和调度&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;synchronized&#34;&gt;synchronized&lt;/h3&gt;
&lt;p&gt;实现基础&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java中的每一个对象都可以作为锁
&lt;ul&gt;
&lt;li&gt;普通同步方法，锁是当前实例对象&lt;/li&gt;
&lt;li&gt;静态同步方法，锁是当前类的Class对象&lt;/li&gt;
&lt;li&gt;同步方法块，锁是Synchronized括号里配置的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用monitorenter和monitorexit两个指令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JavaSE1.6中锁的四种状态（锁可以升级不能降低，提高获得和释放锁的效率）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无锁&lt;/li&gt;
&lt;li&gt;偏向锁
&lt;ul&gt;
&lt;li&gt;大多数情况下，锁不存在多线程竞争，而且总是由同一线程多次获得，因此偏向锁引入可以让线程获得锁的代价更低&lt;/li&gt;
&lt;li&gt;当线程访问同步锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，之后进入和退出时不需要进行CAS操作来加锁和解锁，只需要测是否有偏向锁
&lt;ul&gt;
&lt;li&gt;测试成功，获得锁&lt;/li&gt;
&lt;li&gt;测试失败
&lt;ul&gt;
&lt;li&gt;再测试偏向锁标识是否为1，是则尝试指向当前线程&lt;/li&gt;
&lt;li&gt;没有设置则使用CAS竞争锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;撤销
&lt;ul&gt;
&lt;li&gt;使用了一种等到竞争出现才会释放锁的机制&lt;/li&gt;
&lt;li&gt;需要等待全局安全点（在这个时间点上没有正在执行的字节码）&lt;/li&gt;
&lt;li&gt;首先暂停拥有偏向锁的线程，再检查持有偏向锁的线程是否活着，如果不处于活动状态，则将对象头设置成无锁状态；如果线程仍然活着，拥有锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word要么重新偏向于其他线程，要么恢复到无锁活着标记对象不适合作为偏向锁，最后唤醒暂停的线程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关闭
&lt;ul&gt;
&lt;li&gt;默认启用，可以使用JVM参数来关闭延迟或关闭偏向锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;轻量级锁
&lt;ul&gt;
&lt;li&gt;加锁
&lt;ul&gt;
&lt;li&gt;执行同步块之前，JVM会先在当前线程的栈帧中创建用于存储锁记录的空间并复制Mark Word到锁记录&lt;/li&gt;
&lt;li&gt;使用CAS将对象头里的Mark Word替换为指向锁记录的指针&lt;/li&gt;
&lt;li&gt;成功则获得锁&lt;/li&gt;
&lt;li&gt;失败则其他线程竞争锁，尝试自旋获取锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解锁
&lt;ul&gt;
&lt;li&gt;使用原子的CAS操作将Mark Word替换回到对象头&lt;/li&gt;
&lt;li&gt;成功则表示没有竞争发生&lt;/li&gt;
&lt;li&gt;失败则表示当前锁存在竞争，锁就会膨胀成重量级锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重量级锁
&lt;ul&gt;
&lt;li&gt;自旋会消耗CPU，为了避免无用的自旋，一旦升级为重量锁就不会恢复到重量锁，其他线程试图获取锁时会被阻塞，当持有锁的线程释放锁之后会唤醒这些线程，再开始争夺锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;锁的对比&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;偏向锁加锁和解锁不需要额外的消耗，和执行非同步方法相比进存在纳秒级的差距，但如果线程间存在锁竞争会带来额外的锁撤销的消耗，适用于只有一个线程访问同步块场景&lt;/li&gt;
&lt;li&gt;轻量级锁竞争的线程不会阻塞，提高了程序的相应速度，但如果是种得不到锁竞争的线程会自旋消耗CPU，适合追求响应速度、同步块执行速度非常快的场景&lt;/li&gt;
&lt;li&gt;线程竞争不使用自旋，不会消耗CPU，但线程阻塞、相应时间缓慢，适合追求吞吐量、同步块执行速度较长的场景&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Java学习 - 常用方法</title>
      <link>https://www.pseudoyu.com/zh/2020/11/27/java_note_methods/</link>
      <pubDate>Fri, 27 Nov 2020 03:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/11/27/java_note_methods/</guid>
      
        <description>&lt;h2 id=&#34;string与stringbuffer&#34;&gt;String与StringBuffer&lt;/h2&gt;
&lt;h3 id=&#34;string&#34;&gt;String&lt;/h3&gt;
&lt;p&gt;特征&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java8中，String内部使用char数组存储数据&lt;/li&gt;
&lt;li&gt;Java9后，String类的实现改用了byte数组存储字符串，并使用coder标识编码&lt;/li&gt;
&lt;li&gt;字符串不可变
&lt;ul&gt;
&lt;li&gt;实现
&lt;ul&gt;
&lt;li&gt;value数组被声明为final&lt;/li&gt;
&lt;li&gt;String内部没有能改变value数组的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;作用
&lt;ul&gt;
&lt;li&gt;可以缓存hash值，如hashmap的key&lt;/li&gt;
&lt;li&gt;String Pool的使用需要String不可变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以通过char[]数组生成新的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;String Pool&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保存着所有字符串字面量（编译时期确定）&lt;/li&gt;
&lt;li&gt;通过String的intern()方法在运行过程中添加&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;intern&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;intern&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接使用字符串常量&lt;/li&gt;
&lt;li&gt;调用String类构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;World&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;charAt(): 可以通过索引需要获取字符&lt;/li&gt;
&lt;li&gt;indexOf(): 可以通过字符获取索引&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;subString(): 截取子字符串&lt;/li&gt;
&lt;li&gt;split(): 切割字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stringbuffer&#34;&gt;StringBuffer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可变&lt;/li&gt;
&lt;li&gt;对StringBuffer对象本身进行操作&lt;/li&gt;
&lt;li&gt;线程安全，内部使用synchronized进行同步&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stringbuilder&#34;&gt;StringBuilder&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可变&lt;/li&gt;
&lt;li&gt;未加同步锁，线程不安全&lt;/li&gt;
&lt;li&gt;性能比StringBuffer高10%-15%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用总结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作少量数据用String&lt;/li&gt;
&lt;li&gt;单线程下操作字符串缓冲区下操作大量数据，适用StringBuilder&lt;/li&gt;
&lt;li&gt;多线程下操作字符串缓冲区下操作大量数据，使用StringBuffer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;包装类&#34;&gt;包装类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;和基本数据类型对应的类&lt;/li&gt;
&lt;li&gt;类型
&lt;ul&gt;
&lt;li&gt;Byte&lt;/li&gt;
&lt;li&gt;Short&lt;/li&gt;
&lt;li&gt;Integer&lt;/li&gt;
&lt;li&gt;Long&lt;/li&gt;
&lt;li&gt;Float&lt;/li&gt;
&lt;li&gt;Double&lt;/li&gt;
&lt;li&gt;Character&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自动装箱与拆箱
&lt;ul&gt;
&lt;li&gt;Integer x = 2; 装箱，自动调用了Integer.valueOf(2）&lt;/li&gt;
&lt;li&gt;int y = x;拆箱，调用了X.intValue()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常量池技术，缓存数据 Character[0,127]，Boolean[True,False]，Float、Double没有实现常量池技术，其他[-128,127]，超出范围则仍然创建新对象
&lt;ul&gt;
&lt;li&gt;new Integer(123)每次都会新建一个对象&lt;/li&gt;
&lt;li&gt;Integer.valueOf(123)会使用缓存池中的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用equals来判断&lt;/li&gt;
&lt;li&gt;使用BigDecimal来定义浮点数的值，再进行浮点数的运算操作，主要用于操作大浮点数
&lt;ul&gt;
&lt;li&gt;大小比较：a.compareTo(b)&lt;/li&gt;
&lt;li&gt;保留小数：setScale(n, BigDecimal.ROUND_HALF_DOWN)&lt;/li&gt;
&lt;li&gt;创建对象：BigDecimal(String)防止精度丢失&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用标准
&lt;ul&gt;
&lt;li&gt;所有的POJO类属性必须使用包装数据类型&lt;/li&gt;
&lt;li&gt;RPC方法的返回值和参数必须使用包装数据类型&lt;/li&gt;
&lt;li&gt;所有的局部变量使用基本数据类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;object通用方法&#34;&gt;Object通用方法&lt;/h2&gt;
&lt;h3 id=&#34;equals&#34;&gt;equals&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;等价关系
&lt;ul&gt;
&lt;li&gt;自反性&lt;/li&gt;
&lt;li&gt;对称性&lt;/li&gt;
&lt;li&gt;传递性&lt;/li&gt;
&lt;li&gt;一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;相等关系
&lt;ul&gt;
&lt;li&gt;基本类型，==判断两个值是否相等&lt;/li&gt;
&lt;li&gt;引用类型，==判断两个变量是否引用同一个对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;equals实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查是否为一个对象的引用，是则直接返回true&lt;/li&gt;
&lt;li&gt;检查是否是同个类型，不是则返回false&lt;/li&gt;
&lt;li&gt;将Object进行转型&lt;/li&gt;
&lt;li&gt;判断每个关键域是否相等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;equals与==的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;==是判断两个对象地址是不是相等（因为Java只有按值传递，所以本质比较的都是值），即判断是不是同一个对象（基本数据类型比较值、引用数据类型比较内存地址）&lt;/li&gt;
&lt;li&gt;equals不能比较基本数据类型的变量，equals方法存在Object类中&lt;/li&gt;
&lt;li&gt;类没有覆盖equals方法的话等价于==，类覆盖了equals方法的话可以用来比较两个对象的内容相等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;equals方法造成空指针异常的原因及解决方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用值为null的引用类型变量调用equals方法（非静态方法）会抛出异常&lt;/li&gt;
&lt;li&gt;应该使用常量或确认有值的量来调用equals&lt;/li&gt;
&lt;li&gt;或者使用java.util.Objects#equals来进行比较
&lt;ul&gt;
&lt;li&gt;Objects.equals(null, &amp;ldquo;Test&amp;rdquo;);&lt;/li&gt;
&lt;li&gt;如果a == null的话a.equals(b)就不会执行，避免空指针异常&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;null是所有引用类型（Object类型）的默认值&lt;/li&gt;
&lt;li&gt;可以用 == 或 != 操作比较null值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hashcode&#34;&gt;hashCode()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;确定对象在哈希表中的索引位置&lt;/li&gt;
&lt;li&gt;是个本地方法，返回哈希值，将对象的内存地址转换为整数之后返回&lt;/li&gt;
&lt;li&gt;equals()的两个对象哈希值一定相等，反之不一定&lt;/li&gt;
&lt;li&gt;equals()应该覆盖hashCode()方法，保证两个对象哈希值相等&lt;/li&gt;
&lt;li&gt;hashCode默认对堆上的对象产生独特值，如果没有重写hashCode，则无论如何也不会相等&lt;/li&gt;
&lt;li&gt;HashSet和HashMap也都需要实现hashCode()方法
&lt;ul&gt;
&lt;li&gt;当对象加入HashSet值时，会先计算对象的hashcode来判断对象加入的位置，同时比较其他已加入对象的hashcode值，如果没有符合，则没重复出现，但是如果发现有相同的hashcode值的对象，会调用equals方法来检查是否真的相同，相同则不会加入，不同则加入到其他位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;clone&#34;&gt;clone()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;是Object类的protected方法&lt;/li&gt;
&lt;li&gt;如果没有实现Cloneable接口但是调用了clone()方法，会抛出CloneNotSupportedException&lt;/li&gt;
&lt;li&gt;浅拷贝：拷贝对象和原始对象引用类型引用同个对象&lt;/li&gt;
&lt;li&gt;深拷贝：拷贝对象和原始对象引用类型引用不同对象&lt;/li&gt;
&lt;li&gt;风险与替代方案
&lt;ul&gt;
&lt;li&gt;会抛出异常&lt;/li&gt;
&lt;li&gt;需要类型转换&lt;/li&gt;
&lt;li&gt;可以用构造函数或拷贝工厂来拷贝一个对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java组织序列化&#34;&gt;Java组织序列化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对于不想序列化的变量使用transient关键词修饰
&lt;ul&gt;
&lt;li&gt;阻止实例中那些用此关键字修饰的变量序列化&lt;/li&gt;
&lt;li&gt;当对象被反序列化时，其不会被持久化和恢复&lt;/li&gt;
&lt;li&gt;智能修饰变量，不能修饰类和方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;获取键盘输入的方法&#34;&gt;获取键盘输入的方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Scanner
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Scanner&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scanner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nextLine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;BufferedReader
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;BufferedReader&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BufferedReader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;in&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;readLine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Java学习 - 集合</title>
      <link>https://www.pseudoyu.com/zh/2020/11/25/java_note_collections/</link>
      <pubDate>Wed, 25 Nov 2020 03:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/11/25/java_note_collections/</guid>
      
        <description>&lt;h2 id=&#34;集合类&#34;&gt;集合类&lt;/h2&gt;
&lt;h3 id=&#34;概述&#34;&gt;概述&lt;/h3&gt;
&lt;p&gt;为了在程序中保存数目不确定的对象，JDK中提供了一系列特殊的类，这些类可以存储任意类型的对象且长度可变，称为集合，位于java.util包中&lt;/p&gt;
&lt;p&gt;按存储结构分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Collection
&lt;ul&gt;
&lt;li&gt;List
&lt;ul&gt;
&lt;li&gt;ArrayList：基于动态数组实现，支持随机访问
&lt;ul&gt;
&lt;li&gt;CopyOnWriteArrayList
&lt;ul&gt;
&lt;li&gt;读写分离，读在原数组，写则是复制到新数组（加锁）&lt;/li&gt;
&lt;li&gt;内存为两倍左右&lt;/li&gt;
&lt;li&gt;数据不同步&lt;/li&gt;
&lt;li&gt;不适合对内存敏感或是实时性要求较高的数组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LinkedList：基于双向链表实现（JDK1.6之前为循环链表，JDK1.7取消了循环），只能顺序访问，但是可以快速地在链表中间插入和删除元素，也可以用作栈、队列和双向队列&lt;/li&gt;
&lt;li&gt;ArrayList和LinkedList区别
&lt;ul&gt;
&lt;li&gt;都不同步，不保证线程安全&lt;/li&gt;
&lt;li&gt;ArrayList底层使用Object数组，LinkedList使用双向链表
&lt;ul&gt;
&lt;li&gt;双向链表包含两个指针，一个prev指向前一个节点，一个next指向后一个节点&lt;/li&gt;
&lt;li&gt;双向循环链表最后一个节点的next指向head，而head的prev指向最后一个节点，构成一个环&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LinkedList不支持高效随机元素访问，ArrayList支持&lt;/li&gt;
&lt;li&gt;ArrayList空间浪费在list列表结尾会预留一些空间，而LinkedList每一个元素都需要消耗币ArrayList更多的空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vector：与ArrayList类似，但是是线程安全的&lt;/li&gt;
&lt;li&gt;RandomAccess接口：标识实现这个接口的类具有随机访问功能，如ArrayList&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set
&lt;ul&gt;
&lt;li&gt;HashSet：基于HashMap实现，支持快速查找，但不支持有序性操作，并且没有插入顺序信息（用Iterator遍历的结果不确定）
&lt;ul&gt;
&lt;li&gt;实现Set接口，仅存储对象，调用add()方法向Set中添加元素&lt;/li&gt;
&lt;li&gt;使用成员对象来计算hashcode值&lt;/li&gt;
&lt;li&gt;LinkedHashSet：具有HashSet的查找效率，并且内部使用双向链表来维护元素的插入顺序。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TreeSet：基于红黑树实现，支持有序性操作，查找效率不如HashSet（O(1)），为O(Log N)&lt;/li&gt;
&lt;li&gt;无序性是指存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的&lt;/li&gt;
&lt;li&gt;不可重复性是指添加到元素按照equals判断时返回false&lt;/li&gt;
&lt;li&gt;Comparable和Comparator
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一般需要对一个集合使用自定义排序时，需要重写compareTo或compare方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果需要对一个集合使用两种排序，可以重写compareTo，使用自制的Comparator方法或者以两个Comparator来实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 定制排序的用法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collections&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Comparator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compare&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;compareTo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;定制排序后：&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重写compareTo方法实现按年龄来排序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// person对象没有实现Comparable接口，所以必须实现，这样才不会出错，才可以使treemap中的数据按顺序排列
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 前面一个例子的String类已经默认实现了Comparable接口，详细可以查看String类的API文档，另外其他
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 像Integer类等都已经实现了Comparable接口，所以不需要另外实现了
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Comparable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    * T重写compareTo方法实现按年龄来排序
&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;    */&lt;/span&gt;
    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compareTo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Queue
&lt;ul&gt;
&lt;li&gt;LinkedList：可用来实现双向队列&lt;/li&gt;
&lt;li&gt;PriorityQueue：基于堆结构实现，可以用它来实现有限队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Map
&lt;ul&gt;
&lt;li&gt;Hashtable：类似于HashMap，但是是线程安全的
&lt;ul&gt;
&lt;li&gt;Properties&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HashMap：基于哈希表实现
&lt;ul&gt;
&lt;li&gt;多线程下使用容易造成数据丢失等问题&lt;/li&gt;
&lt;li&gt;存储结构
&lt;ul&gt;
&lt;li&gt;包含一个Entry类型的数组table，存放键值对（hashCode，K，V，next）&lt;/li&gt;
&lt;li&gt;Entry是一个链表，通过拉链法解决冲突&lt;/li&gt;
&lt;li&gt;头插式进行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JDK1.8开始，桶的链表长度大于8时会转换为红黑树，但如果当前数据长度小于64则会优先选择数组扩容&lt;/li&gt;
&lt;li&gt;查找
&lt;ul&gt;
&lt;li&gt;计算键值所在的桶&lt;/li&gt;
&lt;li&gt;在链表上顺序查找，时间复杂度取决于链表长度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;允许插入null的键值对，使用第0个桶存放&lt;/li&gt;
&lt;li&gt;ConcurrentHashMap
&lt;ul&gt;
&lt;li&gt;使用了分段锁segment，维护着多个HashEntry，因此可以多线程访问&lt;/li&gt;
&lt;li&gt;分段锁继承自重入锁ReentrantLock&lt;/li&gt;
&lt;li&gt;每个segment维护了一个count变量来统计键值对个数&lt;/li&gt;
&lt;li&gt;JDK1.8采用了CAS操作来支持更高的并发度，在CAS操作失败时使用内置锁synchronized&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LinkedHashMap&lt;/li&gt;
&lt;li&gt;WeakHashMap
&lt;ul&gt;
&lt;li&gt;继承自WeakReference，被关联的对象在下一次垃圾回收时会被回收&lt;/li&gt;
&lt;li&gt;主要用来实现缓存，通过WeakHashMap引用缓存对象，JVM进行回收&lt;/li&gt;
&lt;li&gt;Tomcat中的ConcurrentCache使用了缓存功能，分代缓存
&lt;ul&gt;
&lt;li&gt;常用对象放入eden中，ConcurrentHashMap&lt;/li&gt;
&lt;li&gt;不常用对象放入longterm，使用WeakHashMap&lt;/li&gt;
&lt;li&gt;调用get时，优先从eden中获取，没找到则在longterm中获取&lt;/li&gt;
&lt;li&gt;调用put时，如果大小超过了size，则全部放入longterm，JVM回收掉一部分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TreeMap
&lt;ul&gt;
&lt;li&gt;基于红黑树实现&lt;/li&gt;
&lt;li&gt;实现了NavigableMap接口和SortedMap接口
&lt;ul&gt;
&lt;li&gt;Navigable接口让TreeMap有了对集合中的元素搜索的能力&lt;/li&gt;
&lt;li&gt;SortMap接口让TreeMap有了对集合中的元素根据键排序的能力，默认是按照key的升序排序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HashMap和HashTable的区别
&lt;ul&gt;
&lt;li&gt;HashMap线程不安全，HashTable线程安全（经过synchronized修饰）&lt;/li&gt;
&lt;li&gt;HashMap效率高一点&lt;/li&gt;
&lt;li&gt;HashMap可以拥有一个null键和多个null值，而HashTable不允许，不然会抛出NullPointerException&lt;/li&gt;
&lt;li&gt;初始值
&lt;ul&gt;
&lt;li&gt;HashTable创建默认大小为11，每次扩充为2n+1；HashMap默认大小为12，每次扩充为两倍&lt;/li&gt;
&lt;li&gt;创建时如果给了初始值，HashTable直接使用，而HashMap则扩充为2的幂次方大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;底层数据结构
&lt;ul&gt;
&lt;li&gt;HashMap在JDK1.8之后解决哈希冲突有了较大变化，当链表长度大于8时，将链表转为红黑树以减少搜索时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ConcurrentHashMap和HashTable的区别
&lt;ul&gt;
&lt;li&gt;HashTable采取数组+链表，而JDK1.8之后的ConcurrentHashMap采取分段的数组+链表/红黑树&lt;/li&gt;
&lt;li&gt;HashTable使用synchronized来保证线程安全，效率比较低（同一把锁，存在竞争）&lt;/li&gt;
&lt;li&gt;ConcurrentHashMap采用segment分段锁，每一把锁只锁容器其中一部分数据，多线程访问容器中不同数据段的数据，就不会存在锁竞争；JDK1.8之后摒弃了Segment分段锁，而是直接使用Node数组+链表+红黑树的形式，并发控制使用了synchronized和CAS（CompareAndSet，先进行比较再修改，对应着一条硬件指令，虽然有多个步骤，但是操作系统保证其原子性）来操作
&lt;ul&gt;
&lt;li&gt;synchronized只锁定当前链表或红黑书的首节点，只要哈希不冲突，就不会产生并发，提升效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;collection接口&#34;&gt;Collection接口&lt;/h3&gt;
&lt;p&gt;通用方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boolean add(Object o) 向集合中添加一个元素&lt;/li&gt;
&lt;li&gt;boolean addAll(Collection c) 将指定集合中所有元素添加到该集合中&lt;/li&gt;
&lt;li&gt;void clear() 删除该集合所有元素&lt;/li&gt;
&lt;li&gt;boolean remove(Object o) 删除该集合指定元素&lt;/li&gt;
&lt;li&gt;boolean removeAll(Collection c) 删除该集合所有元素&lt;/li&gt;
&lt;li&gt;boolean isEmpty() 判断是否为空&lt;/li&gt;
&lt;li&gt;boolean contains(Object o) 判断该集合是否包含某个元素&lt;/li&gt;
&lt;li&gt;boolean containsAll(Collection c) 判断集合中是否包含指定集合中的所有元素&lt;/li&gt;
&lt;li&gt;Iterator iterator(Collection c) 返回在该集合的算俗尚进行迭代的迭代起（用于遍历）&lt;/li&gt;
&lt;li&gt;int size() 获取该集合元素个数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;list接口&#34;&gt;List接口&lt;/h4&gt;
&lt;p&gt;继承自Collection接口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许出现重复的元素&lt;/li&gt;
&lt;li&gt;线性存储，可通过索引访问集合中的指定元素&lt;/li&gt;
&lt;li&gt;元素有序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;增加了根据元素索引进行操作的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boolean add(int index, Object e) 插入元素至指定位置&lt;/li&gt;
&lt;li&gt;boolean addAll(int index, Collection c) 插入集合至指定位置&lt;/li&gt;
&lt;li&gt;Object get(int index) 返回指定索引元素&lt;/li&gt;
&lt;li&gt;Object remove(int index) 删除指定索引元素&lt;/li&gt;
&lt;li&gt;Object set(int index, Object e) 将索引处元素替换，并返回替换后的元素&lt;/li&gt;
&lt;li&gt;int indexOf(Object o) 返回元素在List集合中的位置&lt;/li&gt;
&lt;li&gt;int lastIndexOf(Object o) 返回元素在List集合中最后出现的位置&lt;/li&gt;
&lt;li&gt;List subList(int fromIndex, int toIndex) 两个索引之间集合组成的子集合，包含头不包含尾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ArrayList&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是List接口的一个实现类，底层的存储结构式数组&lt;/li&gt;
&lt;li&gt;大部分方法从接口中继承，其中add()方法和get()方法主要用于元素存取&lt;/li&gt;
&lt;li&gt;查询元素时效率高，但增删元素时效率低&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LinkedList&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内部维护了一个双向循环链表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于元素的增删具有很高的效率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;void add(int index, E e) 在列表指定位置插入指定元素&lt;/li&gt;
&lt;li&gt;void addFirst(Object o) 将指定元素插入列表开头&lt;/li&gt;
&lt;li&gt;void addLast(Object o) 将指定元素插入列表结尾&lt;/li&gt;
&lt;li&gt;Object getFirst() 返回列表第一个元素&lt;/li&gt;
&lt;li&gt;Object getLast() 返回列表最后一个元素&lt;/li&gt;
&lt;li&gt;Object removeFirst() 移除并返回列表第一个元素&lt;/li&gt;
&lt;li&gt;Object removeLast() 移除并返回列表最后一个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;LinkedList&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LinkedList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;removeFirst&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;removeLast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;iterator接口&#34;&gt;Iterator接口&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用于遍历集合中的所有元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;迭代器获取ArrayList集合中的元素时，会当作Object看待，如想得到特定元素则需要强制类型转换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hasNext()&lt;/li&gt;
&lt;li&gt;next()&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 构建一个迭代器
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Iterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 通过hasNext()方法来循环遍历
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()){&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 通过next()来访问下一个元素
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;foreach循环&#34;&gt;foreach循环&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;容器内元素类型&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;临时变量&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;容器变量&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;执行语句&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;234&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;999&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
  
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果要进行remove操作，可以调用迭代器的remove方法而不是集合类的reomve方法，因为如果列表在任何时间从结构上修改创建迭代器之后，以任何方式除非通过迭代器自身remove/add方法，都会抛出一个ConcurrentModificationException，这就是单线程状态下的fail-fast机制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java8开始，可以使用Collection#removeIf()方法删除满足特定条件的元素&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;removeIf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* 删除list中的所有偶数 */&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* [1, 3, 5, 7, 9] */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;set接口&#34;&gt;Set接口&lt;/h4&gt;
&lt;p&gt;继承自Collection接口，Collection接口中的方法一致但更加严格&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;元素无序&lt;/li&gt;
&lt;li&gt;保证存入的程序不出现重复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HashSet&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据对象的哈希值来确定元素在集合中的存储位置
&lt;ul&gt;
&lt;li&gt;向HashSet添加一个对象时，首先调用那个hashCode方法计算对象的哈希值，确定元素的存储位置&lt;/li&gt;
&lt;li&gt;如果哈希值相同，调用对象的equals方法确保该位置没有重复元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;具有良好的存取和查找功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TreeSet&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以二叉树的方式来存储元素&lt;/li&gt;
&lt;li&gt;可以实现对集合中元素进行排序&lt;/li&gt;
&lt;li&gt;TreeSet有序指的是元素会按照大小关系进行排序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;map接口&#34;&gt;Map接口&lt;/h3&gt;
&lt;p&gt;存储具有对应关系的数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;双列集合&lt;/li&gt;
&lt;li&gt;Key和Value进行对应&lt;/li&gt;
&lt;li&gt;Key不能重复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;void put(Object key, Object value) 存入键值对&lt;/li&gt;
&lt;li&gt;Object get(Object key) 获取值&lt;/li&gt;
&lt;li&gt;boolean containsKey(Object key) 是否包含key&lt;/li&gt;
&lt;li&gt;boolean containsValue(Object value) 是否包含值&lt;/li&gt;
&lt;li&gt;Set keySet 返回键的Set&lt;/li&gt;
&lt;li&gt;Collection&lt;!-- raw HTML omitted --&gt; values() 返回值的Collection&lt;/li&gt;
&lt;li&gt;Set&amp;lt;Map.Entry,&amp;lt;K, V&amp;raquo;entrySet() 返回映射关系的Set&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HashMap&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断key是否重复和HashSet一样 跟hashCode和equals方法相关&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LinkedHashMap&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维持元素读取和存储的顺序一致&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Properties&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hashtable是线程安全的 性能比较低&lt;/li&gt;
&lt;li&gt;Properties是Hashtable的子类&lt;/li&gt;
&lt;li&gt;应用场景：多线程安全的需求 往往对应到系统属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;容器中的设计模式&#34;&gt;容器中的设计模式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;迭代器模式
&lt;ul&gt;
&lt;li&gt;继承了Iterable接口，iterator()方法能够产生一个iterator对象&lt;/li&gt;
&lt;li&gt;JDK1.5 之后可以通过foreach来遍历实现了Iterable接口的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;适配器模式
&lt;ul&gt;
&lt;li&gt;Arrays.asList可以把数组类型转换为List类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;arraysaslist使用指南&#34;&gt;Arrays.asList()使用指南&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以将一个数组转换为一个List集合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;asList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 另一种方式
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;asList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将数组转换为集合后，底层还是数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传递的数组必须是数组对象而不是基本类型（泛型方法），因此要使用包装类型数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用集合的修改方法add()，remove()和clear()会抛出异常，因为返回的是java.util.Arrays的一个内部类，并没有实现（重写）集合的修改方法，只重写了get, set, indexOf, contains, forEach, replaceAll, sort&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;正确地将数组转为arraylist&#34;&gt;正确地将数组转为ArrayList&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;简便方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;asList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用Java8的Stream&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myArray&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collectors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//基本类型也可以实现转换（依赖boxed的装箱操作）
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myArray2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myList&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myArray2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;boxed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collectors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用Java9的List.of()方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* [1, 2, 3] */&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;/* 不支持基本数据类型 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;collectiontoarray方法使用&#34;&gt;Collection.toArray()方法使用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;泛型方法，如果toArray方法没有传递任何参数则返回Object类型数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]{&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;dog&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lazy&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;over&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;jumps&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fox&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;brown&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;quick&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;asList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Collections&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//没有指定类型的话会报错
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于JVM优化，new String[0]作为Collection.toArray()方法的参数使用，是作为一个模板作用，指定了返回数组的类型，0为了节省空间&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;泛型&#34;&gt;泛型&lt;/h3&gt;
&lt;p&gt;功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;和集合联合使用的时候&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;限制往集合添加的数据类型&lt;/li&gt;
&lt;li&gt;保证获取元素的时候 使用具体的数据类型 而不是Object 从而避免不必要的强制类型转换&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 创建集合并指定泛型为String
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Java学习 - 面向对象</title>
      <link>https://www.pseudoyu.com/zh/2020/11/23/java_note_oop/</link>
      <pubDate>Mon, 23 Nov 2020 03:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/11/23/java_note_oop/</guid>
      
        <description>&lt;h2 id=&#34;java面向对象&#34;&gt;Java面向对象&lt;/h2&gt;
&lt;h3 id=&#34;特性&#34;&gt;特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;封装性：将对象的属性和行为封装起来，不需要让外界知道具体的实现细节&lt;/li&gt;
&lt;li&gt;继承性：无需重新编写原有类的情况下，新类可拥有原有类的功能&lt;/li&gt;
&lt;li&gt;多态性：一个类中定义的属性和方法被继承后，可以具有不同的数据类型和表现出不同的行为&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面向对象与面向过程的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面向过程的性能比面向对象高，类的调用需要实例化、开销比较大，比较消耗资源。非根本原因，面向过程也需要分配内存，计算内存偏移量，Java性能差主要原因是它是半编译语言，最终的执行代码并不是可以直接被CPU执行的二进制机器码，而面向过程语言大多是直接编译成机器码在电脑上执行&lt;/li&gt;
&lt;li&gt;面向对象易维护、易复用、易拓展，可以设计出低耦合的系统，使系统更灵活、更加易于维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类与对象&#34;&gt;类与对象&lt;/h3&gt;
&lt;p&gt;成员变量与局部变量的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语法形式：成员变量是定义在类中的变量，可以被public、private、static等修饰符修饰，而局部变量是定义在代码块或方法中的变量，不能被访问修饰符修饰，但都可以被final修饰&lt;/li&gt;
&lt;li&gt;变量在内存中的存储方式：成员变量如果使用static则属于类，没有则属于实例；对象存在于堆内存，局部变量存在于栈内存&lt;/li&gt;
&lt;li&gt;变量在内存中的生存时间：成员变量是对象的一部分，随着对象创建而存在，而局部变量随着方法调用自动消失&lt;/li&gt;
&lt;li&gt;成员变量如果没有初始值则自动以类型默认值赋值（除非被final修饰），而局部变量不会自动赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 定义成员变量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;speak&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 定义局部变量，方法优先访问局部变量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类的构造方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完成对类对象的初始化工作&lt;/li&gt;
&lt;li&gt;如果自己添加了构造方法，则不会添加默认的无参数构造方法了，因此需要自己添加一下&lt;/li&gt;
&lt;li&gt;调用子类构造方法前先调用父类无参数的构造方法是为了帮助子类做初始化工作&lt;/li&gt;
&lt;li&gt;一般需要在父类中加上一个不做事且没有参数的构造方法，因为程序在执行子类的构造方法之前，如果父类只定义了有参数的构造方法，子类没有super()调用父类特定的构造方法，则会编译错误&lt;/li&gt;
&lt;li&gt;方法名与类名相同&lt;/li&gt;
&lt;li&gt;方法名前没有返回值声明&lt;/li&gt;
&lt;li&gt;不能使用return返回值&lt;/li&gt;
&lt;li&gt;使用this来访问成员变量以解决命名冲突&lt;/li&gt;
&lt;li&gt;构造方法不能被重写，但可以被重载，所以可以有多个构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 无参数默认
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 构造函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 重载构造函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 新的构造函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;new运算符创建对象实例（在堆内存中），对象引用指向对象实例（在栈内存中），一个对象引用可以指向0或1个对象，一个对象可以有n个引用指向它&lt;/li&gt;
&lt;li&gt;对象的相等是比较内存中存放的内容，引用相等比较的是指向的内存地址是否相等&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 类名 对象名 = new 类名();
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;垃圾回收机制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象成为垃圾后仍然会占用内存空间&lt;/li&gt;
&lt;li&gt;Java虚拟机自动启动垃圾回收器将垃圾从内存中释放&lt;/li&gt;
&lt;li&gt;可以调用System.gc()方法通知虚拟机立即进行垃圾回收&lt;/li&gt;
&lt;li&gt;对象在内存中被释放时，finalize()方法会被自动调用，因此可以在类中定义finalized()方法来观察对象何时被释放&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;封装方法&#34;&gt;封装方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;private修饰成员变量&lt;/li&gt;
&lt;li&gt;把一个对象的状态信息隐藏在对象内部，不允许外部对象直接访问，但是为外界提供一些操作方法，如set和get方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static关键字&#34;&gt;static关键字&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;静态变量：修饰成员变量，特定的数据在内存中只有一份，可以通过类名来访问&lt;/li&gt;
&lt;li&gt;静态方法：可以通过类名.方法名的方式来访问
&lt;ul&gt;
&lt;li&gt;静态方法只能访问static修饰的成员&lt;/li&gt;
&lt;li&gt;静态方法不依赖于任何实例，因此必须有实现，不能是抽象方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;静态代码块：static修饰的代码块
&lt;ul&gt;
&lt;li&gt;类被加载时执行，一次&lt;/li&gt;
&lt;li&gt;通常被用来对类的成员作初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;静态导包
&lt;ul&gt;
&lt;li&gt;在使用静态变量和方法时不用再指名ClassName，简化代码，但降低了可读性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;成员内部类&#34;&gt;成员内部类&lt;/h3&gt;
&lt;p&gt;一个类中除了可以定义成员变量、成员方法，还可以定义类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通成员内部类&lt;/li&gt;
&lt;li&gt;静态内部类&lt;/li&gt;
&lt;li&gt;方法内部类&lt;/li&gt;
&lt;li&gt;匿名内部类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成员内部类可以访问外部类的所有成员&lt;/li&gt;
&lt;li&gt;外部类访问内部类需要通过外部类去创建内部类对象&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 外部类名.内部类名 变量名 = new 外部类名().new 内部类名();
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;outer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;初始化顺序&#34;&gt;初始化顺序&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;父类（静态变量，静态语句块）&lt;/li&gt;
&lt;li&gt;子类（静态变量，静态语句块）&lt;/li&gt;
&lt;li&gt;父类（实例变量，普通语句块）&lt;/li&gt;
&lt;li&gt;父类（构造函数）&lt;/li&gt;
&lt;li&gt;子类（实例变量，普通语句块）&lt;/li&gt;
&lt;li&gt;子类（构造函数）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;访问权限&#34;&gt;访问权限&lt;/h3&gt;
&lt;p&gt;访问级别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private 只能被该类的其他成员访问&lt;/li&gt;
&lt;li&gt;default 能被包中的其他类访问。默认访问控制级别&lt;/li&gt;
&lt;li&gt;protected 可以被包中的其他类和子类访问&lt;/li&gt;
&lt;li&gt;public 不管访问类与被访问类是否在同一个包中都可以访问&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类的继承&#34;&gt;类的继承&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不同类型对象经常有一定数量的共同点，因此可以在一个类的基础上构建新的类&lt;/li&gt;
&lt;li&gt;子类会自动拥有父类所有可继承的属性和方法，不可选择性继承&lt;/li&gt;
&lt;li&gt;父类中的私有属性和方法子类是无法访问的，只是拥有&lt;/li&gt;
&lt;li&gt;可以快速创建新的类，提高代码的重用、程序的可维持性，节省创建新类的时间，提高开发效率&lt;/li&gt;
&lt;li&gt;子类可以拥有自己的属性和方法，进行拓展，也可以用自己的方式实现父类方法（即重写）&lt;/li&gt;
&lt;li&gt;使用extends关键字&lt;/li&gt;
&lt;li&gt;不允许多重继承&lt;/li&gt;
&lt;li&gt;多个类可以继承自同一个父类&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重写&#34;&gt;重写&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;发生在运行期&lt;/li&gt;
&lt;li&gt;子类会自动继承父类中定义的方法&lt;/li&gt;
&lt;li&gt;可以对方法进行修改，即重写&lt;/li&gt;
&lt;li&gt;重写方法需要和父类方法具有相同的方法名、参数列表及返回类型&lt;/li&gt;
&lt;li&gt;使用super方法访问父类成员&lt;/li&gt;
&lt;li&gt;使用super方法访问父类构造方法，第一行&lt;/li&gt;
&lt;li&gt;使用this关键字调用子类构造方法，第一行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重载&#34;&gt;重载&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;发生在编译期&lt;/li&gt;
&lt;li&gt;同一个方法能够根据输入数据不同做出不同的处理&lt;/li&gt;
&lt;li&gt;方法名必须相同&lt;/li&gt;
&lt;li&gt;参数类型不同、个数不同、顺序不同、方法返回值和访问修饰符可以不同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;final关键字&#34;&gt;final关键字&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;final修饰的类不可被继承&lt;/li&gt;
&lt;li&gt;final修饰的方法不可被重写&lt;/li&gt;
&lt;li&gt;final修饰的变量不可被改变赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;抽象类&#34;&gt;抽象类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用abstract关键词修饰&lt;/li&gt;
&lt;li&gt;包含抽象方法的类必须声明为抽象类&lt;/li&gt;
&lt;li&gt;抽象类可以不包含任何抽象方法&lt;/li&gt;
&lt;li&gt;抽象类不可以被实例化&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 定义一个抽象Animal类
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Animal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 定义一个抽象方法shout()
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;shout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;接口&#34;&gt;接口&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;接口是由常量和抽象方法组成的特殊类，是对抽象类的进一步抽象&lt;/li&gt;
&lt;li&gt;使用接口主要是为了克服单继承的限制&lt;/li&gt;
&lt;li&gt;使用extends来继承别的接口&lt;/li&gt;
&lt;li&gt;使用interface关键字来声明&lt;/li&gt;
&lt;li&gt;类使用implement关键字来继承接口&lt;/li&gt;
&lt;li&gt;接口中的变量默认用public static final修饰&lt;/li&gt;
&lt;li&gt;接口中的方法默认用public static修饰&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;接口名&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;接口1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;接口2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;数据类型&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;常量名&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;常量值&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;返回值&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;抽象方法名&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;参数列表&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;抽象类与接口对比&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都不能实例化，都可以有抽象方法&lt;/li&gt;
&lt;li&gt;接口可用于多继承&lt;/li&gt;
&lt;li&gt;接口具有默认修饰符&lt;/li&gt;
&lt;li&gt;关键字不一样
&lt;ul&gt;
&lt;li&gt;接口继承接口，类继承类用extends&lt;/li&gt;
&lt;li&gt;类继承接口implements&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口（推荐）
&lt;ul&gt;
&lt;li&gt;需要让不相关的类实现同一个方法&lt;/li&gt;
&lt;li&gt;需要多重继承&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;抽象类
&lt;ul&gt;
&lt;li&gt;需要在几个相关的类中共享代码&lt;/li&gt;
&lt;li&gt;需要能控制继承来的成员的访问权限&lt;/li&gt;
&lt;li&gt;需要继承非静态和非常量字段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多态&#34;&gt;多态&lt;/h3&gt;
&lt;p&gt;父类引用，指向不同子类的实例，对同一个实例方法名调用，调用的程序不一样&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多态的基础是继承和重写&lt;/li&gt;
&lt;li&gt;多态仅限于实例方法&lt;/li&gt;
&lt;li&gt;对象类型和引用类型之间具有继承/实现的关系&lt;/li&gt;
&lt;li&gt;引用类型变量发出的方法调用哪个类中的方法必须在程序运行期间才能确定&lt;/li&gt;
&lt;li&gt;多态不能调用只在子类存在但父类不存在的方法&lt;/li&gt;
&lt;li&gt;如果子类重写了父类的方法，真正执行的是子类覆盖的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对象的类型转换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显式转换&lt;/li&gt;
&lt;li&gt;隐式转换&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 把子类对象当作父类类型
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Animal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;an1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Animal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;an2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Dog&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;异常处理&#34;&gt;异常处理&lt;/h3&gt;
&lt;p&gt;异常结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Throwable
&lt;ul&gt;
&lt;li&gt;Error 一般是Java运行时产生的系统内部错误或者资源耗尽的错误，仅靠修改程序本身不能恢复执行，例如虚拟机运行错误Virtual MachineError，虚拟机内存不够错误OutOfMemoryError，类定义错误NoClassDefFoundError，虚拟机一般选择线程终止&lt;/li&gt;
&lt;li&gt;Exception 异常 RuntimeException用于运行时异常，其他用于编译时异常&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Throwable类常用方法
&lt;ul&gt;
&lt;li&gt;String getMessage()返回异常发生时的简要描述&lt;/li&gt;
&lt;li&gt;string toString()返回异常发生时的详细信息&lt;/li&gt;
&lt;li&gt;string getLocalizedMessage()返回异常对象的本地化信息，使用Throwable子类覆盖这个方法，生成本地化信息，没覆盖的话则与getMessage()相同&lt;/li&gt;
&lt;li&gt;void printStackTrace()在控制台上打印Throwable对象封装的异常信息&lt;/li&gt;
&lt;li&gt;void printStackTrace(PrintStream s)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;异常处理方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 程序
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;异常类型类&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 对异常的处理
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 一定执行的语句
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;finally不执行的情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;try或finally中用了System.exit(int)退出程序，但如果在异常语句之后还是会被执行&lt;/li&gt;
&lt;li&gt;程序所在的线程死亡&lt;/li&gt;
&lt;li&gt;关闭CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当try语句和finally语句中都有return语句时，在方法返回之前，finally语句的内容将被执行，并且finally语句的返回值将会覆盖原始的返回值&lt;/p&gt;
&lt;p&gt;try-with-resources代替try-catch-finally&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适用范围（资源的定义）：任何实现java.lang.AutoCloseable或者java.io.Closeable的对象&lt;/li&gt;
&lt;li&gt;关闭资源和final的执行顺序：在try-with-resources语句中，任何catch或finally块在声明的资源关闭后运行&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Scanner&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scanner&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scanner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;test.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scanner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scanner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nextLine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fnfe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fnfe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;多个资源&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BufferedInputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BufferedInputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;test.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)));&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;BufferedOutputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BufferedOutputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;out.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;bout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IOException&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;throws关键字&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;修饰符&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;返回值类型&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;方法名&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;异常类型1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;异常类型2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 定义方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;自定义异常&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 自定义异常类
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CustomerException&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RuntimeException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 继承构造函数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;CustomerException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// 自定义异常方法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 调用自定义异常类
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;异常对象&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;代理&#34;&gt;代理&lt;/h2&gt;
&lt;p&gt;代理关系模型，A想要调用B类的方法，A不直接调用，A会在自己的类中创建一个B对象的代理，再由代理调用B的方法&lt;/p&gt;
&lt;h2 id=&#34;泛型&#34;&gt;泛型&lt;/h2&gt;
&lt;p&gt;提供了编译时类型安全检测机制，允许在编译时检测到非法的类型，本质是参数化类型。Java的泛型是伪泛型，也就是在编译期间，所有的泛型信息会被擦除，Java编译器会在编译时尽可能发现出错的地方，但没办法发现运行时类型转换异常的问题，类型擦除是Java泛型与C++模板机制实现方式之间的重要区别。类型擦除后只保留Object或者Comparable这样的原始类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java编译器先检查泛型类型，进行类型擦除，再进行编译&lt;/li&gt;
&lt;li&gt;类型检查是编译时就完成的，类型检查针对引用，引用调用泛型方法则会对这个引用调用的方法进行类型检测，无关真正引用的对象&lt;/li&gt;
&lt;li&gt;泛型不允许继承关系&lt;/li&gt;
&lt;li&gt;泛型信息虽然会被擦除，但是当存取一个泛型域时会自动插入强制类型转换&lt;/li&gt;
&lt;li&gt;子类在继承时只能将父类类型擦除为原始类型，目的为重写却变为了重载，要解决多态与泛型的冲突，JVM编译生成桥方法&lt;/li&gt;
&lt;li&gt;泛型类型变量不能使基本数据类型&lt;/li&gt;
&lt;li&gt;编译时用instanceof是错误的（因为类型擦除了）&lt;/li&gt;
&lt;li&gt;泛型类中的静态方法和静态变量不可以使用泛型类所声明的泛型类型参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用泛型表示类&lt;/li&gt;
&lt;li&gt;用泛型表示接口&lt;/li&gt;
&lt;li&gt;泛型方法&lt;/li&gt;
&lt;li&gt;泛型通配符
&lt;ul&gt;
&lt;li&gt;？表示不确定的java类型&lt;/li&gt;
&lt;li&gt;T表示具体的一个java类型&lt;/li&gt;
&lt;li&gt;K V表示Key Value&lt;/li&gt;
&lt;li&gt;E表示Element&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反射&#34;&gt;反射&lt;/h2&gt;
&lt;p&gt;Java反射机制是在程序运行的过程中，对于任何一个类，都能够知道它的所有属性和方法；对于任意一个对象，都能够知道调用它的任意属性和方法；动态获取信息及动态调用对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在运行时判断一个对象所属的类&lt;/li&gt;
&lt;li&gt;在运行是构造任意一个类的对象&lt;/li&gt;
&lt;li&gt;在运行时判断任意一个类所有的成员变量和方法&lt;/li&gt;
&lt;li&gt;在运行时调用任意一个对象的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;静态编译和动态编译&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态编译：在编译时确定类型，绑定对象&lt;/li&gt;
&lt;li&gt;动态编译：在运行时确定对象，绑定对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：运行期类型的判断，动态加载类，提高代码的灵活度&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;JVM需要做一系列解释操作，性能比直接的java代码要慢很多，造成性能瓶颈&lt;/li&gt;
&lt;li&gt;让我们可以动态操作改变类的属性同时也增加了其安全隐患&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要用于框架设计&lt;/li&gt;
&lt;li&gt;模块化开发，通过反射去调用对应的字节码&lt;/li&gt;
&lt;li&gt;动态代理设计模式采用了反射机制&lt;/li&gt;
&lt;li&gt;Spring/Hibernate框架也大量使用到了反射机制&lt;/li&gt;
&lt;li&gt;例如
&lt;ul&gt;
&lt;li&gt;JDBC连接数据库时使用Class.forName()通过反射加载数据库的驱动程序&lt;/li&gt;
&lt;li&gt;Spring框架的IOC（动态加载管理Bean）创建对象及AOP动态代理功能和反射都有联系&lt;/li&gt;
&lt;li&gt;动态配置实例的属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Java学习 - 基础</title>
      <link>https://www.pseudoyu.com/zh/2020/11/20/java_note_basic/</link>
      <pubDate>Fri, 20 Nov 2020 03:12:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/11/20/java_note_basic/</guid>
      
        <description>&lt;h2 id=&#34;java基础&#34;&gt;Java基础&lt;/h2&gt;
&lt;h3 id=&#34;java特性&#34;&gt;Java特性&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;简单性
&lt;ul&gt;
&lt;li&gt;丢弃了C++中运算符重载、多重继承等&lt;/li&gt;
&lt;li&gt;不使用指针而是使用引用&lt;/li&gt;
&lt;li&gt;自动垃圾回收机制（不用开发者进行内存管理）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面向对象
&lt;ul&gt;
&lt;li&gt;提供了类、接口和继承等&lt;/li&gt;
&lt;li&gt;支持类之间的单继承&lt;/li&gt;
&lt;li&gt;支持接口之间的多继承&lt;/li&gt;
&lt;li&gt;全面支持动态绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安全性
&lt;ul&gt;
&lt;li&gt;不支持指针，一切对内存的访问都必须通过实例变量来实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可靠性&lt;/li&gt;
&lt;li&gt;跨平台性
&lt;ul&gt;
&lt;li&gt;可以运行在各种平台上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持多线程
&lt;ul&gt;
&lt;li&gt;并发执行多个任务，提升执行效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持网络编程（Java语言诞生就是为了简化网络编程而设计的）&lt;/li&gt;
&lt;li&gt;编译与解释并存&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;与C++的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都面向对象，实现了封装、继承和多态，但是Java是类不能多重继承（接口可以），C++可以&lt;/li&gt;
&lt;li&gt;Java不提供指针访问内存，程序内存更加安全&lt;/li&gt;
&lt;li&gt;Java提供了自动内存管理垃圾回收机制，程序员不需要手动释放&lt;/li&gt;
&lt;li&gt;Java中没有结束符&#39;\0&amp;rsquo;而C语言有&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;import java 和 javax区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以前javaAPI必需的是java开头的包，javax只是拓展API&lt;/li&gt;
&lt;li&gt;后来javax逐渐拓展为javaAPI的组成部分，但移植麻烦，最终成为标准API的一部分&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jdkjava-development-kit&#34;&gt;JDK（Java Development Kit）&lt;/h3&gt;
&lt;p&gt;Java开发环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译器&lt;/li&gt;
&lt;li&gt;运行工具&lt;/li&gt;
&lt;li&gt;文档生成工具&lt;/li&gt;
&lt;li&gt;打包工具&lt;/li&gt;
&lt;li&gt;JRE（Java Runtime Environment）运行环境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java程序编译&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;javac编译源文件&lt;/li&gt;
&lt;li&gt;生成.class字节码文件&lt;/li&gt;
&lt;li&gt;java虚拟机解释执行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JVM虚拟机&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对不同的操作系统有特定的实现，使用相同的字节码，给出相应的结果&lt;/li&gt;
&lt;li&gt;解决了传统解释型语言执行效率低的问题，又保留了其可移植的特性&lt;/li&gt;
&lt;li&gt;引进了JIT编译器，运行时编译，完成第一次编译后，将机器码保存下来，下次直接使用（解决解释器逐行解释执行效率低与热点代码经常被调用的问题）&lt;/li&gt;
&lt;li&gt;根据代码每次执行情况做一些优化，执行次数越多，速度越快&lt;/li&gt;
&lt;li&gt;JDK9引入了AOT编译模式，将字节吗直接编译成机器码，避免了JIT预热等方面的开销（但编译质量相对较差），JDK支持分层编译和AOT协同使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oracle JDK 与 Open JDK区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open JDK是一个参考模型，完全开源，而Oracle JDK是Open JDK的一个实现，并不完全开源&lt;/li&gt;
&lt;li&gt;Oracle JDK相对更稳定，有更多的类和错误修复&lt;/li&gt;
&lt;li&gt;Oracle JDK提供了更好的性能&lt;/li&gt;
&lt;li&gt;Oracle不会为即将发布的版本提供长期支持&lt;/li&gt;
&lt;li&gt;Oracle JDK根据二进制代码许可协议获得许可，Open JDK根据GPL v2获得许可&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java编程基础&#34;&gt;Java编程基础&lt;/h2&gt;
&lt;h3 id=&#34;基本语法&#34;&gt;基本语法&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;HelloWorld&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 定义一个字符串变量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;功能性语句和结构性语句组成  结构性语句主要是为了承载功能性语句&lt;/li&gt;
&lt;li&gt;严格区分大小写的&lt;/li&gt;
&lt;li&gt;需要注意层次清晰规范&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;书写规范&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包名：不使用大写的英文字母&lt;/li&gt;
&lt;li&gt;类名和接口名：首字母大写&lt;/li&gt;
&lt;li&gt;常量：英文字母大写 单词之间使用下划线分割&lt;/li&gt;
&lt;li&gt;变量名和方法名：驼峰命名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单行注释&lt;/li&gt;
&lt;li&gt;多行注释
&lt;ul&gt;
&lt;li&gt;文档注释，一般写在方法或类上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据类型&#34;&gt;数据类型&lt;/h3&gt;
&lt;p&gt;Java要确定每种基本类型所占存储空间的大小，并不随着机器硬件架构的变化而变化，因此更具备可移植性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整型
&lt;ul&gt;
&lt;li&gt;byte 8位&lt;/li&gt;
&lt;li&gt;short 16位&lt;/li&gt;
&lt;li&gt;int 32位&lt;/li&gt;
&lt;li&gt;long 64位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浮点数
&lt;ul&gt;
&lt;li&gt;float 32位 +f&lt;/li&gt;
&lt;li&gt;double 64位 +d&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符（相当于一个整型ASCII值，可参加表达式运算）
&lt;ul&gt;
&lt;li&gt;char 16位，2个字节&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符串（代表一个地址值）
&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;布尔常量
&lt;ul&gt;
&lt;li&gt;boolean
&lt;ul&gt;
&lt;li&gt;true&lt;/li&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;变量&#34;&gt;变量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;程序运行期间会产生一些临时数据，保存在一些内存单元中，用一个标识符来表示，称之为变量&lt;/li&gt;
&lt;li&gt;声明变量时候要指定变量的数据类型 赋值时候需要相互匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类型转换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动类型转换
&lt;ul&gt;
&lt;li&gt;两种数据彼此兼容&lt;/li&gt;
&lt;li&gt;目标类型的取值范围大于源类型取值范围&lt;/li&gt;
&lt;li&gt;例如：byte类型转换至short, int, double等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;强制类型转换
&lt;ul&gt;
&lt;li&gt;两种类型彼此不兼容&lt;/li&gt;
&lt;li&gt;目标类型的取值范围小于源类型&lt;/li&gt;
&lt;li&gt;会造成精度丢失&lt;/li&gt;
&lt;li&gt;格式：目标类型 变量 = （目标类型）值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作用域&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量需要在作用范围内才可以被使用&lt;/li&gt;
&lt;li&gt;一般定义在某一对大括号中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;运算符&#34;&gt;运算符&lt;/h3&gt;
&lt;p&gt;算数运算符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;+&lt;/li&gt;
&lt;li&gt;-&lt;/li&gt;
&lt;li&gt;*&lt;/li&gt;
&lt;li&gt;/ 整数相除为整,有小数参与则为小数&lt;/li&gt;
&lt;li&gt;% 正负结果取决于左边（被模数）&lt;/li&gt;
&lt;li&gt;++ 算数符号在前先自增&lt;/li&gt;
&lt;li&gt;&amp;ndash; 算数符号在前先自减&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;赋值运算符（会自动完成强制类型转换）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;=&lt;/li&gt;
&lt;li&gt;+=&lt;/li&gt;
&lt;li&gt;-=&lt;/li&gt;
&lt;li&gt;*=&lt;/li&gt;
&lt;li&gt;/=&lt;/li&gt;
&lt;li&gt;%=&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比较运算符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;==&lt;/li&gt;
&lt;li&gt;!=&lt;/li&gt;
&lt;li&gt;&amp;lt; &amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;= &amp;gt;=&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;逻辑运算符（用于布尔运算，结果仍为布尔型）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;amp; 与&lt;/li&gt;
&lt;li&gt;| 或&lt;/li&gt;
&lt;li&gt;^ 异或&lt;/li&gt;
&lt;li&gt;! 非&lt;/li&gt;
&lt;li&gt;&amp;amp;&amp;amp; 短路与&lt;/li&gt;
&lt;li&gt;|| 短路或&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运算符优先级&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;. [] ()&lt;/li&gt;
&lt;li&gt;++ - - ~ !&lt;/li&gt;
&lt;li&gt;* / %&lt;/li&gt;
&lt;li&gt;+ -&lt;/li&gt;
&lt;li&gt;&amp;laquo; &amp;raquo; &amp;raquo;&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt; &amp;gt; &amp;lt;= &amp;gt;=&lt;/li&gt;
&lt;li&gt;== !=&lt;/li&gt;
&lt;li&gt;&amp;amp;&lt;/li&gt;
&lt;li&gt;^&lt;/li&gt;
&lt;li&gt;|&lt;/li&gt;
&lt;li&gt;&amp;amp;&amp;amp;&lt;/li&gt;
&lt;li&gt;||&lt;/li&gt;
&lt;li&gt;?&lt;/li&gt;
&lt;li&gt;赋值运算符&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;选择结构&#34;&gt;选择结构&lt;/h3&gt;
&lt;p&gt;if&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if&lt;/li&gt;
&lt;li&gt;if&amp;hellip;else&lt;/li&gt;
&lt;li&gt;if&amp;hellip;else if&amp;hellip;else&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;statement1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;statement2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;statement3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;switch&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语句类型
&lt;ul&gt;
&lt;li&gt;byte&lt;/li&gt;
&lt;li&gt;short&lt;/li&gt;
&lt;li&gt;char&lt;/li&gt;
&lt;li&gt;int&lt;/li&gt;
&lt;li&gt;枚举&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;语句&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;statement1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;statement2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;  default:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;statement3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;循环结构&#34;&gt;循环结构&lt;/h3&gt;
&lt;p&gt;while循环&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;while&lt;/li&gt;
&lt;li&gt;do&amp;hellip;while&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// while循环
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// do...while循环
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;for循环&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;初始化&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;条件&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;操作表达式&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;方法&#34;&gt;方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;声明方法&lt;/li&gt;
&lt;li&gt;重载方法：允许在一个程序中定义多个名称相同的方法，但是参数类型/个数必须不同&lt;/li&gt;
&lt;li&gt;调用方法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 声明方法的基本语法
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;修饰符&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;返回值类型&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;方法名&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;参数类型&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;参数1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;执行语句&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;返回值&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 示例
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;printHello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;数组&#34;&gt;数组&lt;/h3&gt;
&lt;p&gt;一组数据的集合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以存放任意类型的元素&lt;/li&gt;
&lt;li&gt;同个数组类型必须一致&lt;/li&gt;
&lt;li&gt;引用为null时会发生空指针异常&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数组元素默认值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;byte, short, int, long - 0&lt;/li&gt;
&lt;li&gt;float, double - 0.0&lt;/li&gt;
&lt;li&gt;char - 空字符&#39;\u0000&#39;&lt;/li&gt;
&lt;li&gt;boolean - false&lt;/li&gt;
&lt;li&gt;引用数据类型 - null&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 定义数组
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 静态初始化
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;元素&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;元素&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,...}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 静态初始化简便写法（建议）
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;元素&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;元素&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;遍历数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// 通过index来访问元素
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;多维数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 定义一个m*n的多维数组
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[][]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;引用&#34;&gt;引用&lt;/h3&gt;
&lt;p&gt;Java是按值传递参数，在将一个参数传入一个方法时，本质上是将对象的地址以值的方式传递到形参中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法得到的是所有参数值的一个拷贝，不能修改传递给它的任何参数变量内容&lt;/li&gt;
&lt;li&gt;对象引用作为参数则指向通过同一个对象（如数组），外部引用对象的改变会反映到所对应的对象上&lt;/li&gt;
&lt;li&gt;一个方法可以改变一个对象参数的状态&lt;/li&gt;
&lt;li&gt;一个方法不能让对象参数引用一个新的对象&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>xDeepFM for Recommender Systems</title>
      <link>https://www.pseudoyu.com/zh/2020/11/11/comp7404_group_project/</link>
      <pubDate>Wed, 11 Nov 2020 16:30:25 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/11/11/comp7404_group_project/</guid>
      
        <description>&lt;h1 id=&#34;xdeepfm-for-recommender-systems&#34;&gt;xDeepFM for Recommender Systems&lt;/h1&gt;
&lt;p&gt;eXtreme Deep Factorization Machine (&lt;a href=&#34;https://arxiv.org/abs/1803.05170&#34;&gt;xDeepFM&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This paper proposes a novel Compressed Interaction Network (CIN), which aims to generate feature interactions in an explicit fashion and at the vector-wise level.&lt;/p&gt;
&lt;h2 id=&#34;github-repository&#34;&gt;Github Repository&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pseudoyu/xDeepFM_for_Recommender_Systems&#34;&gt;GitHub: xDeepFM_for_Recommender_Systems&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;video-demo&#34;&gt;Video Demo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=rFEGAtTZLyQ&#34;&gt;YouTube&lt;/a&gt; | &lt;a href=&#34;https://drive.google.com/file/d/1qPx6H9R1b-EDP7HZpAg5bDjkzR8QEHnR/view?usp=sharing&#34;&gt;Google Drive&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;datasets&#34;&gt;Datasets&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://labs.criteo.com/2014/02/kaggle-display-advertising-challenge-dataset/&#34;&gt;Criteo Dataset&lt;/a&gt;.&lt;/strong&gt; It is a famous industry benchmarking dataset for developing models predicting ad click-through rate, and is publicly accessible. Given a user and the page he is visiting, the goal is to predict the probability that he will clik on a given ad&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;running-environment&#34;&gt;Running Environment&lt;/h2&gt;
&lt;p&gt;I strongly recommmend that you use &lt;a href=&#34;https://www.anaconda.com&#34;&gt;Anaconda&lt;/a&gt; to implement this project. Here are some simple instructions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download a suitable version (&lt;a href=&#34;https://repo.anaconda.com/archive/Anaconda3-2020.07-Windows-x86_64.exe&#34;&gt;Windows&lt;/a&gt;/&lt;a href=&#34;https://repo.anaconda.com/archive/Anaconda3-2020.07-MacOSX-x86_64.pkg&#34;&gt;MacOS&lt;/a&gt;/&lt;a href=&#34;https://repo.anaconda.com/archive/Anaconda3-2020.07-Linux-x86_64.sh&#34;&gt;Linux&lt;/a&gt;)  for your OS and install it (check for latest version from &lt;a href=&#34;https://www.anaconda.com&#34;&gt;Anaconda&lt;/a&gt;)
&lt;ol&gt;
&lt;li&gt;On Windows or MacOS, you can just use the &lt;em&gt;.exe&lt;/em&gt; or &lt;em&gt;.pkg&lt;/em&gt; installer and follow the instructions&lt;/li&gt;
&lt;li&gt;On Linux, you may need to run &lt;code&gt;bash ./.Anaconda3-2020.07-Linux-x86_64.sh&lt;/code&gt; in the same directory of the downloaded &lt;em&gt;.sh&lt;/em&gt; file to allow the installer to initialize Anaconda3 in your .bashrc&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Create a dedicated Conda environment for this project (strongly recommended)
&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;conda create -n xdeepfm python=3.6&lt;/code&gt; and enter &lt;code&gt;y&lt;/code&gt; to create the conda environment&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;conda activate xdeepfm&lt;/code&gt; to activate the project environment&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;pip install -r requirements.txt&lt;/code&gt; to install the package dependencies&lt;/li&gt;
&lt;li&gt;Now you can run the code simply through &lt;code&gt;python main.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; YouPath/xDeepFM_for_Recommender_Systems/exdeepfm
bash ./.Anaconda3-2020.07-Linux-x86_64.sh
conda create -n xdeepfm &lt;span class=&#34;nv&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;3.6
conda activate xdeepfm
pip install -r requirements.txt
python main.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;absl-py==0.8.1&lt;/li&gt;
&lt;li&gt;astor==0.8.0&lt;/li&gt;
&lt;li&gt;gast==0.3.2&lt;/li&gt;
&lt;li&gt;google-pasta==0.1.7&lt;/li&gt;
&lt;li&gt;grpcio==1.24.3&lt;/li&gt;
&lt;li&gt;h5py==2.10.0&lt;/li&gt;
&lt;li&gt;joblib==0.14.0&lt;/li&gt;
&lt;li&gt;Keras-Applications==1.0.8&lt;/li&gt;
&lt;li&gt;Keras-Preprocessing==1.1.0&lt;/li&gt;
&lt;li&gt;Markdown==3.1.1&lt;/li&gt;
&lt;li&gt;numpy==1.17.3&lt;/li&gt;
&lt;li&gt;packaging==19.2&lt;/li&gt;
&lt;li&gt;protobuf==3.10.0&lt;/li&gt;
&lt;li&gt;pyparsing==2.4.2&lt;/li&gt;
&lt;li&gt;PyYAML==5.1.2&lt;/li&gt;
&lt;li&gt;scikit-learn==0.21.3&lt;/li&gt;
&lt;li&gt;scipy==1.3.1&lt;/li&gt;
&lt;li&gt;six==1.12.0&lt;/li&gt;
&lt;li&gt;sklearn==0.0&lt;/li&gt;
&lt;li&gt;tensorboard==1.14.0&lt;/li&gt;
&lt;li&gt;tensorflow==1.14.0&lt;/li&gt;
&lt;li&gt;tensorflow-estimator==1.14.0&lt;/li&gt;
&lt;li&gt;termcolor==1.1.0&lt;/li&gt;
&lt;li&gt;Werkzeug==0.16.0&lt;/li&gt;
&lt;li&gt;wrapt==1.11.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;running-results&#34;&gt;Running Results&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/comp7404_screenshot1.png&#34; alt=&#34;comp7404_screenshot1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;hellip;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/comp7404_screenshot2.png&#34; alt=&#34;comp7404_screenshot2&#34;&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>ICOM6045 Topic 1 Cryptography</title>
      <link>https://www.pseudoyu.com/zh/2020/10/21/icom6045_topic1/</link>
      <pubDate>Wed, 21 Oct 2020 19:53:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/21/icom6045_topic1/</guid>
      
        <description>&lt;h1 id=&#34;icom6045-fundamentals-of-e-commerce-security&#34;&gt;ICOM6045 Fundamentals of E-Commerce Security&lt;/h1&gt;
&lt;h2 id=&#34;topic-1-cryptography&#34;&gt;Topic 1 Cryptography&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/cryptography.svg&#34; alt=&#34;cryptography&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Process of transforming information to make it unreadable to anyone except those possessing the key&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Data confidentiality&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;transpositionspermutations&#34;&gt;Transpositions/Permutations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;An encryption in which the letters of the message are rearranged&lt;/li&gt;
&lt;li&gt;Function
&lt;ul&gt;
&lt;li&gt;Try to break established patterns&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example
&lt;ul&gt;
&lt;li&gt;Columnar transposition
&lt;ul&gt;
&lt;li&gt;Rearrangement of the characters of the plaintext into columns&lt;/li&gt;
&lt;li&gt;Based on characteristic patterns of pairs of adjacent letters, called digrams&lt;/li&gt;
&lt;li&gt;Analysis
&lt;ul&gt;
&lt;li&gt;Compute the letter frequencies
&lt;ul&gt;
&lt;li&gt;Break the text into columns by compare a block of ciphertext characters against characters successively farther away in the ciphertext.&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Do common digrams appear.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Do most of the digram look reasonable&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complexity
&lt;ul&gt;
&lt;li&gt;No additional work&lt;/li&gt;
&lt;li&gt;Require storage for all characters of the message&lt;/li&gt;
&lt;li&gt;Not good for long message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Alternative
&lt;ul&gt;
&lt;li&gt;Permute the characters of the plaintext with a fixed period d&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;confusion&#34;&gt;Confusion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cipher that makes relationship between the plaintext/key pair and the ciphertext as complex as possible&lt;/li&gt;
&lt;li&gt;Good confusion
&lt;ul&gt;
&lt;li&gt;poly-alphabetic substitution with a long key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bad confusion
&lt;ul&gt;
&lt;li&gt;Caesar cipher&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;diffusion&#34;&gt;Diffusion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cipher that spreads the information from the plaintext over the entire ciphertext&lt;/li&gt;
&lt;li&gt;Change in the plaintext should affect many parts of the ciphertext&lt;/li&gt;
&lt;li&gt;Good diffusion
&lt;ul&gt;
&lt;li&gt;DES&lt;/li&gt;
&lt;li&gt;Transposition cipher&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bad diffusion
&lt;ul&gt;
&lt;li&gt;Substitutin cipher&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cryptanalysis&#34;&gt;Cryptanalysis&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Index of coincidence (A tool to rate how wella particular distribution
matches the distribution of letter in English)&lt;/li&gt;
&lt;li&gt;Procedure
&lt;ul&gt;
&lt;li&gt;Measure of roughness(variance)&lt;/li&gt;
&lt;li&gt;If the distribution is perfectly flat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Examine
&lt;ul&gt;
&lt;li&gt;Is it encrypted&lt;/li&gt;
&lt;li&gt;How is it encrypted&lt;/li&gt;
&lt;li&gt;What is the key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;types&#34;&gt;Types&lt;/h2&gt;
&lt;h3 id=&#34;symmetric-key-encryption&#34;&gt;Symmetric Key Encryption&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Procedure (Single key)
&lt;ul&gt;
&lt;li&gt;Original message&lt;/li&gt;
&lt;li&gt;Key -&amp;gt; Encryption algorithm&lt;/li&gt;
&lt;li&gt;Encrypted message&lt;/li&gt;
&lt;li&gt;Encrypted message sent over Internet&lt;/li&gt;
&lt;li&gt;Encrypted message arrives destination&lt;/li&gt;
&lt;li&gt;Key -&amp;gt; Decryption algorithm&lt;/li&gt;
&lt;li&gt;Original message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Algorithms
&lt;ul&gt;
&lt;li&gt;DES(Data Encryption Standard)
&lt;ul&gt;
&lt;li&gt;Most commonly used block cipher&lt;/li&gt;
&lt;li&gt;Purpose
&lt;ul&gt;
&lt;li&gt;Facilitate hardware implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Form
&lt;ul&gt;
&lt;li&gt;A block cipher with 56-bit key (64-bit including parity bits)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Feistel&amp;rdquo; network structure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AES(Advanced Encryption Standard)&lt;/li&gt;
&lt;li&gt;RC4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stream cipher
&lt;ul&gt;
&lt;li&gt;Definition
&lt;ul&gt;
&lt;li&gt;Convert one symbol of plaintext immediately into a symbol of ciphertext&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advantage
&lt;ul&gt;
&lt;li&gt;Speed of transformation&lt;/li&gt;
&lt;li&gt;Low error propagation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disadvantage
&lt;ul&gt;
&lt;li&gt;Low diffusion&lt;/li&gt;
&lt;li&gt;Possible for malicious insertions and modifications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Block cipher
&lt;ul&gt;
&lt;li&gt;Definition
&lt;ul&gt;
&lt;li&gt;Encrypt a group of plaintext symbol as one block&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advantage
&lt;ul&gt;
&lt;li&gt;Diffusion&lt;/li&gt;
&lt;li&gt;Immunity to insertion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Disadvantage
&lt;ul&gt;
&lt;li&gt;Slowness of encryption&lt;/li&gt;
&lt;li&gt;Error propagation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kasiski method
&lt;ul&gt;
&lt;li&gt;Search for repeated sequence of characters&lt;/li&gt;
&lt;li&gt;Example
&lt;ul&gt;
&lt;li&gt;3 occurrences of the 11-character sequence&lt;/li&gt;
&lt;li&gt;Distance between first 2 sequence = 141- 90 = 51&lt;/li&gt;
&lt;li&gt;Distance between second 2 sequences = 213 - 141 = 72&lt;/li&gt;
&lt;li&gt;The common divisor between 51 and 72 is 3&lt;/li&gt;
&lt;li&gt;Estimated key length is 3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Perfect&amp;rdquo; substitution cipher
&lt;ul&gt;
&lt;li&gt;Definition
&lt;ul&gt;
&lt;li&gt;Many alphabets for an unrecognizable distribution&lt;/li&gt;
&lt;li&gt;No apparent pattern for the choice of an alphabet at a particular point&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Function
&lt;ul&gt;
&lt;li&gt;Confuse the Kasiski method&lt;/li&gt;
&lt;li&gt;Index of coincidence would be close to 0.038&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Application
&lt;ul&gt;
&lt;li&gt;Caesar cipher
&lt;ul&gt;
&lt;li&gt;Definition
&lt;ul&gt;
&lt;li&gt;The message is enciphered with a 27-symbol alphabet (A-&amp;gt;Z) and the blank, the blank is translated to itself&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Permutation
&lt;ul&gt;
&lt;li&gt;Each letter is translated to a fixed number of letters after it in the alphabet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &amp;ldquo;real&amp;rdquo; Caessar cipher by Julius Caesar used a shift of 3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mono-alphabetic substitutions
&lt;ul&gt;
&lt;li&gt;Definition
&lt;ul&gt;
&lt;li&gt;The alphabet is scrambled, and each plaintext letter maps to a unique ciphertext letter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Permutation
&lt;ul&gt;
&lt;li&gt;A permutation is a recording of the elements of a series&lt;/li&gt;
&lt;li&gt;A permutation can be a function&lt;/li&gt;
&lt;li&gt;Some permutations can&amp;rsquo;t be represented as simple equation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Weakness
&lt;ul&gt;
&lt;li&gt;Frequency distribution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Polyalphabetic substitutions
&lt;ul&gt;
&lt;li&gt;Definition
&lt;ul&gt;
&lt;li&gt;Combine distributions that are high with ones that are low&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analysis
&lt;ul&gt;
&lt;li&gt;Use Kasiski method to predict likely numbers of enciphering alphabets&lt;/li&gt;
&lt;li&gt;If no numbers emerge fairly regularly, may not a poly-alphabetic substitution&lt;/li&gt;
&lt;li&gt;Compute the index of coincidence to validate the predictions from step 1&lt;/li&gt;
&lt;li&gt;When step 1 and 3 indicate a promising value, separate the ciphertext into appropriate subsets and independently compute index of coincidence of each subset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example
&lt;ul&gt;
&lt;li&gt;Rotor Machines&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vigenere cipher
&lt;ul&gt;
&lt;li&gt;Definition
&lt;ul&gt;
&lt;li&gt;Vigenere tableau
&lt;ul&gt;
&lt;li&gt;A collection of 26 permutations&lt;/li&gt;
&lt;li&gt;Written in a 26*26 matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Permutation
&lt;ul&gt;
&lt;li&gt;Use a key (keyword) -&amp;gt; select  particular permutaion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;One-time pad
&lt;ul&gt;
&lt;li&gt;Definition
&lt;ul&gt;
&lt;li&gt;Based on a large nonrepeating set of keys (written on paper and glued together into a pad)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Procedure
&lt;ul&gt;
&lt;li&gt;Sender writes key one time above the letters of the plaintext&lt;/li&gt;
&lt;li&gt;Encipher the plaintext with a chart like Vigenere tableau&lt;/li&gt;
&lt;li&gt;Sender destroys the key&lt;/li&gt;
&lt;li&gt;Receiver takes the appropriate number of keys&lt;/li&gt;
&lt;li&gt;Decipher the message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example
&lt;ul&gt;
&lt;li&gt;Vernam cipher
&lt;ul&gt;
&lt;li&gt;Involves an arbitrarily long nonrepeating sequence of numbers that are combined with the plaintext&lt;/li&gt;
&lt;li&gt;Possible attack
&lt;ul&gt;
&lt;li&gt;Random number generator&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;public-key-encryption&#34;&gt;Public Key Encryption&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Procedure (Everyone has 2 keys)
&lt;ul&gt;
&lt;li&gt;Original message&lt;/li&gt;
&lt;li&gt;Encryption key -&amp;gt; Encryption algorithm
&lt;ul&gt;
&lt;li&gt;Plaintext &amp;lt;- Encryption
&lt;ul&gt;
&lt;li&gt;The original form of a message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ciphertext &amp;lt;- Decryption
&lt;ul&gt;
&lt;li&gt;The encrypted form a message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Original plaintext&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Encrypted message&lt;/li&gt;
&lt;li&gt;Encrypted message sent over Internet&lt;/li&gt;
&lt;li&gt;Encrypted message arrives destination&lt;/li&gt;
&lt;li&gt;Decryption key -&amp;gt; Decryption algorithm&lt;/li&gt;
&lt;li&gt;Original message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Algorithms
&lt;ul&gt;
&lt;li&gt;RSA&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>ICOM6012 Topic 4 Transport Layer</title>
      <link>https://www.pseudoyu.com/zh/2020/10/20/icom6012_topic4/</link>
      <pubDate>Tue, 20 Oct 2020 09:37:44 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/zh/2020/10/20/icom6012_topic4/</guid>
      
        <description>&lt;h1 id=&#34;icom6012-internet-infrastructure-technologies&#34;&gt;ICOM6012 Internet Infrastructure Technologies&lt;/h1&gt;
&lt;h2 id=&#34;topic-4-transport-layer&#34;&gt;Topic 4 Transport Layer&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/transport_layer.svg&#34; alt=&#34;transport_layer.svg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;actions&#34;&gt;Actions&lt;/h2&gt;
&lt;h3 id=&#34;sender&#34;&gt;Sender&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Get application layer message&lt;/li&gt;
&lt;li&gt;Determine segment header fields values&lt;/li&gt;
&lt;li&gt;Create segment&lt;/li&gt;
&lt;li&gt;Pass segment to IP&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;receiver&#34;&gt;Receiver&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Receive segment from IP&lt;/li&gt;
&lt;li&gt;Check header values&lt;/li&gt;
&lt;li&gt;Extract application layer message&lt;/li&gt;
&lt;li&gt;Demultiplexes message up to application via socket&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;services&#34;&gt;Services&lt;/h2&gt;
&lt;h3 id=&#34;provide-logical-communication-between-processes&#34;&gt;Provide logical communication between processes&lt;/h3&gt;
&lt;h3 id=&#34;run-in-end-system&#34;&gt;Run in end system&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Send side
&lt;ul&gt;
&lt;li&gt;Break app messages into segment&lt;/li&gt;
&lt;li&gt;Pass to network layer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Receive side
&lt;ul&gt;
&lt;li&gt;Reassembles segments into messages&lt;/li&gt;
&lt;li&gt;Pass to application layer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;protocols&#34;&gt;Protocols&lt;/h2&gt;
&lt;h3 id=&#34;tcp&#34;&gt;TCP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Features
&lt;ul&gt;
&lt;li&gt;Point-to-point
&lt;ul&gt;
&lt;li&gt;One sender, one receiver&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reliable, in-order byte system
&lt;ul&gt;
&lt;li&gt;No message boundaries&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Full duplex data
&lt;ul&gt;
&lt;li&gt;Bi-directional data flow in same connection&lt;/li&gt;
&lt;li&gt;MSS: maximum segment size (excluding header)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cumulative ACKs&lt;/li&gt;
&lt;li&gt;Pipelining
&lt;ul&gt;
&lt;li&gt;TCP congestion and flow control set window size&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flow Control
&lt;ul&gt;
&lt;li&gt;Sender will not overwhelm receiver&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Congestion control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Concepts
&lt;ul&gt;
&lt;li&gt;Segment structure&lt;/li&gt;
&lt;li&gt;Sequence numbers
&lt;ul&gt;
&lt;li&gt;Byte stream &amp;ldquo;number&amp;rdquo; of first byte in segment&amp;rsquo;s data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Acknowledgements (ACKs)
&lt;ul&gt;
&lt;li&gt;Seq # of next byte expected from other side&lt;/li&gt;
&lt;li&gt;Cumulative ACKs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Procedure
&lt;ul&gt;
&lt;li&gt;Connection-oriented
&lt;ul&gt;
&lt;li&gt;Handshaking initializes sender, receiver state before data exchange&lt;/li&gt;
&lt;li&gt;TCP socket identified by 4-tuple
&lt;ul&gt;
&lt;li&gt;Source IP&lt;/li&gt;
&lt;li&gt;Source Port #&lt;/li&gt;
&lt;li&gt;Dest IP&lt;/li&gt;
&lt;li&gt;Dest Port #&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server host may support many simultaneous TCP sockets&lt;/li&gt;
&lt;li&gt;Web servers have different sockets for each connecting client
(Non-persistent HTTP will have different socket for each request)&lt;/li&gt;
&lt;li&gt;Demux
&lt;ul&gt;
&lt;li&gt;Receiver uses all four values to direct segment to appropriate socket&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3-way handshake
&lt;ul&gt;
&lt;li&gt;Connection setup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Connection management
&lt;ul&gt;
&lt;li&gt;Handshake
&lt;ul&gt;
&lt;li&gt;Agree to establish connection&lt;/li&gt;
&lt;li&gt;Agree on connection parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Retransmission&lt;/li&gt;
&lt;li&gt;Closing a connection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Events
&lt;ul&gt;
&lt;li&gt;Data received from application
&lt;ul&gt;
&lt;li&gt;Create segment with seq # (a byte-stream number of first data byte in segment)&lt;/li&gt;
&lt;li&gt;Start timer if not already running
&lt;ul&gt;
&lt;li&gt;Think of timer as for oldest unACKed segment&lt;/li&gt;
&lt;li&gt;Expiration interval: TimeOutInterval&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Timeout
&lt;ul&gt;
&lt;li&gt;Retransmit segment that caused timeout&lt;/li&gt;
&lt;li&gt;Restart timer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ACK received
&lt;ul&gt;
&lt;li&gt;Update what is known to ACKed&lt;/li&gt;
&lt;li&gt;Start timer if there are still unACKed segment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shortcomings
&lt;ul&gt;
&lt;li&gt;SYN DoS Attack
&lt;ul&gt;
&lt;li&gt;Half-open TCP connections consume all the TCP connection resources&lt;/li&gt;
&lt;li&gt;SYN packet with a spoofed source address&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;udp&#34;&gt;UDP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Features&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No frills&lt;/li&gt;
&lt;li&gt;Bare bones&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Best effort&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;Lost&lt;/li&gt;
&lt;li&gt;Delivered out-of-order to app&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No handshaking&lt;/li&gt;
&lt;li&gt;Handle independently&lt;/li&gt;
&lt;li&gt;Services not available
&lt;ul&gt;
&lt;li&gt;Delay guarantee&lt;/li&gt;
&lt;li&gt;Bandwidth guarantee&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Concepts&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Segment format
&lt;ul&gt;
&lt;li&gt;Source port #&lt;/li&gt;
&lt;li&gt;Dest port #&lt;/li&gt;
&lt;li&gt;Length&lt;/li&gt;
&lt;li&gt;Checksum
&lt;ul&gt;
&lt;li&gt;Detect errors
&lt;ul&gt;
&lt;li&gt;Sender
&lt;ul&gt;
&lt;li&gt;Treat segement contents&lt;/li&gt;
&lt;li&gt;Checksum: 1&amp;rsquo;s complement sum&lt;/li&gt;
&lt;li&gt;Put checksum into UDP field value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Receiver
&lt;ul&gt;
&lt;li&gt;Compute checksum of received segment&lt;/li&gt;
&lt;li&gt;Check equality
&lt;ul&gt;
&lt;li&gt;No: error detected&lt;/li&gt;
&lt;li&gt;Yes: no error detected (not sure)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Checksum calculation may be disabled in order to speed up the processing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Procedure&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connectionless demux
&lt;ul&gt;
&lt;li&gt;Create socket with unique local port #&lt;/li&gt;
&lt;li&gt;Sender side: create datagram to send into UDP socket
&lt;ul&gt;
&lt;li&gt;Dest IP&lt;/li&gt;
&lt;li&gt;Dest port #&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Receive side: receive UDP segment
(IP datagrams with same dest port #, but different source will be directed to same socket)
&lt;ul&gt;
&lt;li&gt;Check dest port #&lt;/li&gt;
&lt;li&gt;Direct UDP segment to socket with that port #&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Utilization&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Streaming multimedia apps
&lt;ul&gt;
&lt;li&gt;Loss tolerant&lt;/li&gt;
&lt;li&gt;Rate sensitive&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNS&lt;/li&gt;
&lt;li&gt;SNMP&lt;/li&gt;
&lt;li&gt;HTTP/3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shortcomings&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Need reliability at application layer&lt;/li&gt;
&lt;li&gt;Congestion control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sctp&#34;&gt;SCTP&lt;/h3&gt;
&lt;h3 id=&#34;dccp&#34;&gt;DCCP&lt;/h3&gt;
&lt;h2 id=&#34;multiplexing-and-demultiplexing&#34;&gt;Multiplexing and Demultiplexing&lt;/h2&gt;
&lt;h3 id=&#34;multiplexing-at-sender&#34;&gt;Multiplexing at sender&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Handle data from multiple sockets, add transport header&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;demultiplexing-at-receiver&#34;&gt;Demultiplexing at receiver&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Handle data info to deliver received segments to correct socket&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;host-receivers-ip-datagram-host-uses-ip--port--to-redirect-segment&#34;&gt;Host receivers IP datagram (Host uses IP &amp;amp; port # to redirect segment)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Source IP&lt;/li&gt;
&lt;li&gt;Dest IP&lt;/li&gt;
&lt;li&gt;One transport layer segment
&lt;ul&gt;
&lt;li&gt;Source port #&lt;/li&gt;
&lt;li&gt;Dest port #&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;congestion-control&#34;&gt;Congestion Control&lt;/h2&gt;
&lt;h3 id=&#34;cause&#34;&gt;Cause&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Too many sources sending too much data too fast for network to handle&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;manifestations&#34;&gt;Manifestations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Long delay
&lt;ul&gt;
&lt;li&gt;Queueing in router buffers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Packet loss
&lt;ul&gt;
&lt;li&gt;Buffer overflow at network&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;approaches&#34;&gt;Approaches&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;End-end congestion control
&lt;ul&gt;
&lt;li&gt;Features
&lt;ul&gt;
&lt;li&gt;No explicit feedback from network&lt;/li&gt;
&lt;li&gt;Congestion inferred from observed loss, delay&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Network-assisted congestion control
&lt;ul&gt;
&lt;li&gt;Features
&lt;ul&gt;
&lt;li&gt;Routers provide direct feedback to hosts with flow passing through congested router&lt;/li&gt;
&lt;li&gt;May indicate congestion level or explicit set sending rate&lt;/li&gt;
&lt;li&gt;TCP ECN ATM DECbit protocols&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp-congestion-control&#34;&gt;TCP Congestion Control&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;AIMD
&lt;ul&gt;
&lt;li&gt;Sender can increase sending rate until packet loss occurs, then decrease&lt;/li&gt;
&lt;li&gt;Additive increase
&lt;ul&gt;
&lt;li&gt;1 MSS (maximum segment size) until loss detected&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multiplicative decrease
&lt;ul&gt;
&lt;li&gt;Cut sending rate in half at each loss event&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Detecting, reacting to loss
&lt;ul&gt;
&lt;li&gt;ACKs problem
&lt;ul&gt;
&lt;li&gt;cwnd is cut in half&lt;/li&gt;
&lt;li&gt;Window grow linearly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Timeout event
&lt;ul&gt;
&lt;li&gt;cwnd is set to 1 MSS&lt;/li&gt;
&lt;li&gt;Window grow exponentially to threshold, then linearly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TCP slow start
&lt;ul&gt;
&lt;li&gt;Initially cwnd = 1 MSS&lt;/li&gt;
&lt;li&gt;Double cwnd every RTT&lt;/li&gt;
&lt;li&gt;Done by incrementing cwnd for every ACK received&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
  </channel>
</rss>
