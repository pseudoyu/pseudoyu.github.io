<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Pseudoyu</title>
    <link>https://www.pseudoyu.com/en/posts/</link>
    <description>Recent content in Posts on Pseudoyu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 02 Nov 2020 09:50:17 +0800</lastBuildDate>
    
	<atom:link href="https://www.pseudoyu.com/en/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java Generics</title>
      <link>https://www.pseudoyu.com/en/2020/11/02/java-generics/</link>
      <pubDate>Mon, 02 Nov 2020 09:50:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/11/02/java-generics/</guid>
      <description>Java Basics 泛型 (Generics) 定义 提供编译时类型安全检测机制 参数化类型 Java泛型 伪泛型（类型擦除） 使用方式 泛型类 // 定义泛型类 public class Generic&amp;lt;T&amp;gt; { private T key; public class Generic(T key) { this.key = key; } public</description>
    </item>
    
    <item>
      <title>Blockchain Ethereum Transaction tree and Receipt tree</title>
      <link>https://www.pseudoyu.com/en/2020/10/31/blockchain-ethereum-transaction-tree-and-receipt-tree/</link>
      <pubDate>Sat, 31 Oct 2020 19:36:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/31/blockchain-ethereum-transaction-tree-and-receipt-tree/</guid>
      <description>Blockchain Technology and Applications Ethereum System (Account-based ledger) Transaction tree and Receipt tree  Merkle proof Bloom filter  Search whether an element is in a collection Filter useless blocks False postive No false negative Can&amp;rsquo;t do delete operation   Transaction-driven state machine  </description>
    </item>
    
    <item>
      <title>Blockchain Ethereum State tree</title>
      <link>https://www.pseudoyu.com/en/2020/10/30/blockchain-ethereum-state-tree/</link>
      <pubDate>Fri, 30 Oct 2020 10:21:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/30/blockchain-ethereum-state-tree/</guid>
      <description>Blockchain Technology and Applications Ethereum System (Account-based ledger) State tree  addr -&amp;gt; state  Hash  Construct merkle tree cost too much   Unsorted merkle tree  No search and update method   Sorted merkle tree  Cost too much when inserting     (Key, Value)  RLP (Recursive Length Prefix)  Nested array of bytes   Compared: protocol buffer (protocolbuf)   Trie (Retrieval)  Pros  Branching factor Efficiency of trie depends on the length of key Avoid collision resistence Fixed input -&amp;gt; fixed output Update operation locally   Cons  Storage cost     Patricia tree (trie)  Compact the path, less memory cost When the distribution is sparse   Merkle Patricia Tree  Pointer -&amp;gt; Hash pointer  Merkle tree vs.</description>
    </item>
    
    <item>
      <title>Blockchain Ethereum Features</title>
      <link>https://www.pseudoyu.com/en/2020/10/29/blockchain-ethereum-features/</link>
      <pubDate>Thu, 29 Oct 2020 09:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/29/blockchain-ethereum-features/</guid>
      <description>Blockchain Technology and Applications Ethereum System (Account-based ledger) Feature  Memory hard Mining puzzle ASIC resistance  Account  Threats  Double spending attack Replay attack  Solution: add a nonce to count tx     Type  Externally owned account  Balance Nonce (sequence number)   Smart contract account (can&amp;rsquo;t start a transaction)  Balance Nonce Code Storge      PoW -&amp;gt; PoS Smart contract (decentralized contract) </description>
    </item>
    
    <item>
      <title>Blockchain BitCoin Questions</title>
      <link>https://www.pseudoyu.com/en/2020/10/28/blockchain-bitcoin-questions/</link>
      <pubDate>Wed, 28 Oct 2020 14:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/28/blockchain-bitcoin-questions/</guid>
      <description>Blockchain Technology and Applications BitCoin System (Transaction-based ledger) Additional questions  Q: In a transaction, the receiver is not connected to the bitcoin network.  A: No need online, just records   Q: Lost private key  A: No solution Exchanges: Mt. Gox   Q: Wrong address  A: No solution   Q: OP_RETURN, return mistake, why it&amp;rsquo;s still executed?  A: OP_RETURN is in the output, so it will be verified in the next TX   Q: How to judge who find the nonce first?</description>
    </item>
    
    <item>
      <title>Blockchain BitCoin Anonymity</title>
      <link>https://www.pseudoyu.com/en/2020/10/28/blockchain-bitcoin-anonymity/</link>
      <pubDate>Wed, 28 Oct 2020 10:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/28/blockchain-bitcoin-anonymity/</guid>
      <description>Blockchain Technology and Applications BitCoin System (Transaction-based ledger) Anonymity  Pseudonymity Threats  Address generation  Analyze tx Analyze wallets (if used)   Connection to real identity  KYC (Know Your Customer)     Bad use  Silk road (eBay for illegal drugs)   Tips  TOR browser Coin mixing   Zero-knowledge proof  Signature (public key - private key)   Possible solution  Sacrifice  Performance Not absolutely secure   Zerocoin  Base coin Zero coin   Zerocash    </description>
    </item>
    
    <item>
      <title>Blockchain BitCoin Scripts</title>
      <link>https://www.pseudoyu.com/en/2020/10/24/blockchain-bitcoin-scripts/</link>
      <pubDate>Sat, 24 Oct 2020 09:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/24/blockchain-bitcoin-scripts/</guid>
      <description>Blockchain Technology and Applications BitCoin System (Transaction-based ledger) Scripts (stack based language)  TX structure  txid hash version (of bitcoin) size locktime (take effect time) vin  txid vout scriptSig (input script)  asm hex     vout  value n scriptPubKey (output script) value   blockhash confirmations time (tx time) blocktime   Transaction  P2PK (Pay to Public Key)  input script  PUSHDATA (Sig) (signed by provate key)   output script  PUSHDATA (PubKey) CHECKSIG     P2PKH (Pay to Public Key Hash)  input script  PUSHDATA (Sig) (signed by provate key) PUSHDATA (PubKey)   output script  DUP (duplicate a PubKey) HASH160 (calculate the PubKey&amp;rsquo;s hash) PUSHDATA (PubKeyHash) EQUALVERIFY CHECKSIG     P2SH (Pay to Script Hash)  redeemScript  PUSHDATA (PubKey) CHECKSIG   input script  PUSHDATA (Sig) PUSHDATA (serialized redeemScript)   output script  HASH160 PUSHDATA (redeemScriptHash) EQUAL     Proof of Burn  Destroy bitcoin      </description>
    </item>
    
    <item>
      <title>Blockchain BitCoin Fork</title>
      <link>https://www.pseudoyu.com/en/2020/10/23/blockchain-bitcoin-fork/</link>
      <pubDate>Fri, 23 Oct 2020 09:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/23/blockchain-bitcoin-fork/</guid>
      <description>Blockchain Technology and Applications BitCoin System (Transaction-based ledger) Fork  State fork  Forking attack (deliberate fork)   Protocol fork  Hard fork (permanent)  Block size limit (1M -&amp;gt; 4M)   Soft fork (&amp;gt; 50%, temporary)  Block size limit (1M -&amp;gt; 0.5M) coinbase  As extra nonce 2^32 -&amp;gt; 2^96 (adding 8 bytes) As root hash of UTXO   P2SH(Pay to Script Hash)      </description>
    </item>
    
    <item>
      <title>Java Throwable</title>
      <link>https://www.pseudoyu.com/en/2020/10/22/java-throwable/</link>
      <pubDate>Thu, 22 Oct 2020 10:50:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/22/java-throwable/</guid>
      <description>Java Basics Throwable Error (JVM can&amp;rsquo;t handle with)
 VirtualMachineError  StackOverFlowError OutOfMemoryError   AWTError  Exception (Can be deal with by program)
 IOException  EOFException FileNotFoundException   RuntimeException  ArrithmeticException MissingResourceException ClassNotFoundException NullPointerException IllegalArgumentException ArrayIndexOutOfBoundsException UnknownTypeException    Basic syntax  try-catch throw throws finally  </description>
    </item>
    
    <item>
      <title>Java Inheritance</title>
      <link>https://www.pseudoyu.com/en/2020/10/22/java-inheritance/</link>
      <pubDate>Thu, 22 Oct 2020 09:50:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/22/java-inheritance/</guid>
      <description>Java Basics Inheritance Access  Modifiers  protected  Visible to child class   private public   Encapsulation  Using API to communicate Class or members can be least accessed by external   Child class rewrites the parent class  Methods in child class must have higher access level   Field can&amp;rsquo;t be public  getter setter    Abstract class and Interface  Abstract class  abstract keyword  abstract method -&amp;gt; abstract class   Can&amp;rsquo;t be instanced Can be inherited   Interface  public field  static final   Members(field and method)  public     Difference  Abstract class provide a IS-A relationship while Interface provides a LIKE-A relationship One class can applied several interfaces but can&amp;rsquo;t inherit more than one abstract class Fields of interface must be static/final but abstract class has no restriction Members of interface must be public but abstract class have multiple accesses   Choose  Interface (higher priority)  Irrelevant classes need to realize the same method need to use multiple inheritance   Abstract class  Relevant classes need to share same code block Need to control members&amp;rsquo; access Need to inherit non-static or no-constant field      Super  Access parent classes&amp;rsquo; constructor Access members of parent classes  Method priority  this.</description>
    </item>
    
    <item>
      <title>Java Reflect</title>
      <link>https://www.pseudoyu.com/en/2020/10/22/java-reflect/</link>
      <pubDate>Thu, 22 Oct 2020 09:50:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/22/java-reflect/</guid>
      <description>Java Basics Reflect Core concept  Load classes, methods/fields when JVM is running, no prior requirement of knowing the object when writing or compiling code  Functions (runtime)
 Enables java code to discover information about the fields, methods and constructors of loaded classes Operate on their underlying counterparts within security restructions  Usage  Develop universal frameworks  java.lang.reflect  Field Method Constructor  Advantages  Extensibility Help with development (IDE) Help with debugging and testing  Disadvantages  Cost/Optimization Security restructions Exposing inner elements (private attributes or methods)  </description>
    </item>
    
    <item>
      <title>Blockchain BitCoin Mining</title>
      <link>https://www.pseudoyu.com/en/2020/10/22/blockchain-bitcoin-mining/</link>
      <pubDate>Thu, 22 Oct 2020 09:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/22/blockchain-bitcoin-mining/</guid>
      <description>Blockchain Technology and Applications BitCoin System (Transaction-based ledger) Mining  Solve puzzles  Average block time  10 minutes   Difficulty  Target = target * (actual time / expected time) Adjust every 2 weeks Ar most 4 times, at least 1/4     Bernoulli process (nearly poisson process in BitCoin mining)  Bernoulli trial  A random experiment with binary outcome   A sequence of independent Bernoulli trial   Feature  Memoryless Progress free  Ensure the fairness of mining   Exponential distribution   Device (Universal -&amp;gt; Specific)  CPU GPU ASIC (Application Specific Integrated Circuit)) Mining pool (on demand mining)  Pool manager (risks of 51% attack) miners      </description>
    </item>
    
    <item>
      <title>Blockchain BitCoin Features</title>
      <link>https://www.pseudoyu.com/en/2020/10/21/blockchain-bitcoin-features/</link>
      <pubDate>Wed, 21 Oct 2020 22:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/21/blockchain-bitcoin-features/</guid>
      <description>Blockchain Technology and Applications BitCoin System (Transaction-based ledger) UTXO (Unspent Transaction Output)  Total inputs = total outputs  Quantity  21,000,000  Block reward  Coinbase transaction Cut half every 4 year  Transaction fee BitCoin network  Structure  Application layer  BitCoin blockchain   Network layer  P2P overlay network     Node  Seed node   Feature  Simple Robust Not efficient &amp;ldquo;Best effort&amp;rdquo;   Message transport  Flooding    Security  Problem  Sybil attack Forking attack Boycott Selfish mining  Reduce competition     Solution  Based on computing power (large cost) Require 6 confirmation by nodes (long time, about 1 hour)    </description>
    </item>
    
    <item>
      <title>ICOM6045 Topic 1 Cryptography</title>
      <link>https://www.pseudoyu.com/en/2020/10/21/icom6045-topic-1-cryptography/</link>
      <pubDate>Wed, 21 Oct 2020 19:53:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/21/icom6045-topic-1-cryptography/</guid>
      <description>ICOM6045 Fundamentals of E-Commerce Security Topic 1 Cryptography Definition  Process of transforming information to make it unreadable to anyone except those possessing the key  Purpose  Data confidentiality  Transpositions/Permutations  An encryption in which the letters of the message are rearranged Function  Try to break established patterns   Example  Columnar transposition  Rearrangement of the characters of the plaintext into columns Based on characteristic patterns of pairs of adjacent letters, called digrams Analysis  Compute the letter frequencies  Break the text into columns by compare a block of ciphertext characters against characters successively farther away in the ciphertext.</description>
    </item>
    
    <item>
      <title>Java Object Universal Functions</title>
      <link>https://www.pseudoyu.com/en/2020/10/21/java-object-universal-functions/</link>
      <pubDate>Wed, 21 Oct 2020 12:50:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/21/java-object-universal-functions/</guid>
      <description>Java Basics Object Universal Functions equals()  Equivalence relationship  x.euqal(x);  Compared to self   x.equals(y) == y.equals(x);  When conversed, also true   if (x.equals(y) &amp;amp;&amp;amp; y.equals(z)) x.equals(z);  When transited, also true   x.equals(y) == x.equals(y);  When repeated, always true   x.equals(null) == false;  When compared to null, always false (when x is not assigned null)     About ==  For primitive data type, == measures the equivalence (there is no equals()) For reference, == measures whether the variables reference to the same object or not   Mechanism  Check if it refers to the same object  Yes, return true No, continue   Check their type  No, return false Yes, continue   Convert the object Check the equivalence of every key fields    hashCode()  hashCode() returns a hash value, and use equals() to check the equivalence  equal -&amp;gt; same hash same hash can&amp;rsquo;t -&amp;gt; equal (hash generated randomly)   Cover hashCode() before equals() Add/realize hashCode() before using HashSet or HashMap class  clone()  Object protected function Shallow clone  Cloned object and the original object refer to the same object   Deep clone  Cloned object and the original object refer to different object   Alternative method  Clone constructor    toString() </description>
    </item>
    
    <item>
      <title>Blockchain Protocol</title>
      <link>https://www.pseudoyu.com/en/2020/10/21/blockchain-protocol/</link>
      <pubDate>Wed, 21 Oct 2020 12:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/21/blockchain-protocol/</guid>
      <description>Blockchain Technology and Applications Protocol Distributed consensus  &amp;ldquo;Impossibility result&amp;rdquo;  FLP  In an asynchronous system, if one faulty exists, there is no consensus   CAP Theorem  Consistency Availability Partition tolerance     Example  Distributed hash table    Consensus in BitCoin  Membership (decide who can vote)  Hyperledger  Fabric     Vote by computing power (based on puzzle friendly) Increasing concern  Win  Longest valid chain   Lose  Orphan block      </description>
    </item>
    
    <item>
      <title>Java Keywords</title>
      <link>https://www.pseudoyu.com/en/2020/10/21/java-keywords/</link>
      <pubDate>Wed, 21 Oct 2020 11:50:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/21/java-keywords/</guid>
      <description>Java Basics Keywords final  Data  As for primitive data type, final make its value immutable As for reference, it can&amp;rsquo;t reference other objects but can modify itself   Method  Methods stated can&amp;rsquo;t be rewrite by its child class   Class  Can&amp;rsquo;t be inherited    static  Variable  static variable (also called class variable)  Belongs to the class and can be shared/accessed by the class name   instance variable  When creating an instance there will be an instance variable     static method  It exists when loading the class Don&amp;rsquo;t rely on any instance Can&amp;rsquo;t be abstract Can&amp;rsquo;t contain this, super keywords (they are related to specific object)   static (initialization) block  Operate once when doing the class initialization   static inner class  Don&amp;rsquo;t rely on external instance Can&amp;rsquo;t access non-static variables or methods of external class   static import  No need to refer to the ClassName  Simplify Hard to read     Initialization order  static variable, static block (Parent class) static variable, static block (Child class) instance variable, block (Parent class) Constructor (Parent class) instance variable, block (Child class) Constructor (Child class)    </description>
    </item>
    
    <item>
      <title>Java Operation</title>
      <link>https://www.pseudoyu.com/en/2020/10/21/java-operation/</link>
      <pubDate>Wed, 21 Oct 2020 10:50:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/21/java-operation/</guid>
      <description>Java Basics Operation Compare  Pass by value (Java use pass-by-value to pass parameters)  Change object&amp;rsquo;s value in a function will affect the original object&amp;rsquo;s value (same object) When referencing to a new object, change won&amp;rsquo;t affect the original object&amp;rsquo;s value (different object)   Pass by reference  Casting (compiler force to convert types using (type of))
 += -= *= /=  switch  Use string object in switch conditional statements  </description>
    </item>
    
    <item>
      <title>Blockchain Data Structure</title>
      <link>https://www.pseudoyu.com/en/2020/10/21/blockchain-data-structure/</link>
      <pubDate>Wed, 21 Oct 2020 10:07:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/21/blockchain-data-structure/</guid>
      <description>Blockchain Technology and Applications Data Structure Hash pointer (blockchain is a linked list using hash pointers)
 Genesis block &amp;lt;- block1 &amp;lt;- block2 &amp;lt;-&amp;hellip;&amp;lt;- recent block (every block has a hash pointer) Tamper-event log  Merkle tree (using hash pointer instead of pointer)  Merkle proof (proof of membership/inclusion)  O(log(n))   Think: proof of non-membership  O(n) Sorted merkle tree: O(log(n))    Application (blockchain)  Node  Full node (fully validating node)  Block header  Version Hash of previous block header Merkle root hash (protect all nodes) Target Nonce   Block body  Transaction lists     Light node (light weight node)  Only store block headers     Problem  Double spending    </description>
    </item>
    
    <item>
      <title>Java String</title>
      <link>https://www.pseudoyu.com/en/2020/10/21/java-string/</link>
      <pubDate>Wed, 21 Oct 2020 09:50:17 +0800</pubDate>
      
      <guid>https://www.pseudoyu.com/en/2020/10/21/java-string/</guid>
      <description>Java Basics String Feature  Immutable (byte, stated as final type)  Cache hash value  As the key of HashMap   Requirement of String Pool  Get reference from String Pool if it exists   Security  As parameter for many java classes  Network connection Opening files     Thread-safety  Shared among multiple threads freely      Compare  String  Immutable Thread-safe   StringBuffer  Mutable Thread-safe  Requirements of doing synchronization     StringBuilder  Mutable Not thread-safe    String Pool (stores all literal strings)  Useful to reduce memory requirements intern() method  If there is a string equals to the called one exists, return it (using equals() method) If not, create a new string and return   Create 2 &amp;ldquo;same&amp;rdquo; string  new String()  Create different strings   s.</description>
    </item>
    
  </channel>
</rss>